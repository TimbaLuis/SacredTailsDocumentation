{
  "api/Global._ObjectMakeBase.html": {
    "href": "api/Global._ObjectMakeBase.html",
    "title": "Class _ObjectMakeBase | Example Unity documentation",
    "keywords": "Class _ObjectMakeBase Inheritance Object _ObjectMakeBase DelayObjectMake FowardObjectMake MultiCircleObjectMake MultiObjectMake SimpleObjectMake Namespace : Global Assembly : cs.temp.dll.dll Syntax public class _ObjectMakeBase : MonoBehaviour Fields m_makeObjs Declaration public GameObject[] m_makeObjs Field Value Type Description GameObject [] m_movePos Declaration public Transform m_movePos Field Value Type Description Transform Methods GetRandomValue(Single) Declaration public float GetRandomValue(float value) Parameters Type Name Description Single value Returns Type Description Single GetRandomVector(Vector3) Declaration public Vector3 GetRandomVector(Vector3 value) Parameters Type Name Description Vector3 value Returns Type Description Vector3"
  },
  "api/Global.ActionCardDto.html": {
    "href": "api/Global.ActionCardDto.html",
    "title": "Class ActionCardDto | Example Unity documentation",
    "keywords": "Class ActionCardDto Inheritance Object ActionCardDto Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ActionCardDto : ActionCard Fields indexCard Declaration public int indexCard Field Value Type Description Int32"
  },
  "api/Global.ActionDataList.html": {
    "href": "api/Global.ActionDataList.html",
    "title": "Class ActionDataList | Example Unity documentation",
    "keywords": "Class ActionDataList Inheritance Object ActionDataList Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class ActionDataList : SerializedScriptableObject Fields actions Declaration public List<BattleActionData> actions Field Value Type Description List < BattleActionData >"
  },
  "api/Global.ActionTypeEnum.html": {
    "href": "api/Global.ActionTypeEnum.html",
    "title": "Enum ActionTypeEnum | Example Unity documentation",
    "keywords": "Enum ActionTypeEnum Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public enum ActionTypeEnum Fields Name Description BlockAction BuffDebuff ChangeShinsei CopyCat Damage Healing PutAlteredState Randomize ReflectDamage SkipTurn StatSwap TerrainChange TMP"
  },
  "api/Global.AESEncryption.html": {
    "href": "api/Global.AESEncryption.html",
    "title": "Class AESEncryption | Example Unity documentation",
    "keywords": "Class AESEncryption Inheritance Object AESEncryption Namespace : Global Assembly : cs.temp.dll.dll Syntax public static class AESEncryption Fields IV Declaration public const string IV = \"ABCDEFGHIJKLMNOP\" Field Value Type Description String Key Declaration public const string Key = \"ABCDEFGHJKLMNOPQRSTUVWXYZABCDEFG\" Field Value Type Description String Methods Decrypt(String) Declaration public static string Decrypt(string encryptedText) Parameters Type Name Description String encryptedText Returns Type Description String Encrypt(String) Declaration public static string Encrypt(string message) Parameters Type Name Description String message Returns Type Description String"
  },
  "api/Global.AlteredStateController.html": {
    "href": "api/Global.AlteredStateController.html",
    "title": "Class AlteredStateController | Example Unity documentation",
    "keywords": "Class AlteredStateController Inheritance Object AlteredStateController Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AlteredStateController : MonoBehaviour Fields alteredStates Declaration public List<BattleAlteredStateBase> alteredStates Field Value Type Description List < BattleAlteredStateBase > Methods CheckAlteredStates(Boolean, ActionCardDto) Check the player altered states, execute them with the aid of the alteredStateControllers classes found in the alteredStates list. Declaration public bool CheckAlteredStates(bool isPlayer, ActionCardDto playerTurn) Parameters Type Name Description Boolean isPlayer Is the Local Player altered states ActionCardDto playerTurn turn of the player checking the actions Returns Type Description Boolean InitAlteredStateController(BattleGameMode, BattleUIController) Declaration public void InitAlteredStateController(BattleGameMode _battleGameMode, BattleUIController _battleUIController) Parameters Type Name Description BattleGameMode _battleGameMode BattleUIController _battleUIController InitNewAlteredStates(Boolean, Dictionary<AlteredStateEnum, AlteredStateData>, Dictionary<AlteredStateEnum, AlteredStateData>, Boolean) Declaration public void InitNewAlteredStates(bool isPlayer, Dictionary<AlteredStateEnum, AlteredStateData> serverStates, Dictionary<AlteredStateEnum, AlteredStateData> localStates, bool justReplace = false) Parameters Type Name Description Boolean isPlayer Dictionary < AlteredStateEnum , AlteredStateData > serverStates Dictionary < AlteredStateEnum , AlteredStateData > localStates Boolean justReplace"
  },
  "api/Global.AlteredStateData.html": {
    "href": "api/Global.AlteredStateData.html",
    "title": "Class AlteredStateData | Example Unity documentation",
    "keywords": "Class AlteredStateData Inheritance Object AlteredStateData Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class AlteredStateData Fields amount Declaration public int amount Field Value Type Description Int32 isTargetLocalPlayer Declaration public bool isTargetLocalPlayer Field Value Type Description Boolean perTurns Declaration public bool perTurns Field Value Type Description Boolean turnsDuration Declaration public int turnsDuration Field Value Type Description Int32 turnsLeft Declaration public int turnsLeft Field Value Type Description Int32 Methods HasPassedATurn() Declaration public bool HasPassedATurn() Returns Type Description Boolean"
  },
  "api/Global.AlteredStateEnum.html": {
    "href": "api/Global.AlteredStateEnum.html",
    "title": "Enum AlteredStateEnum | Example Unity documentation",
    "keywords": "Enum AlteredStateEnum Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum AlteredStateEnum Fields Name Description Bleeding EvasionChange Ignited Rooted"
  },
  "api/Global.AlteredStatesDataSO.html": {
    "href": "api/Global.AlteredStatesDataSO.html",
    "title": "Class AlteredStatesDataSO | Example Unity documentation",
    "keywords": "Class AlteredStatesDataSO Inheritance Object AlteredStatesDataSO Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class AlteredStatesDataSO : SerializedScriptableObject Fields alteredStates Declaration public List<BattleAlteredStateDataSO> alteredStates Field Value Type Description List < BattleAlteredStateDataSO > Methods GetJsonAlteredStates() Declaration public void GetJsonAlteredStates()"
  },
  "api/Global.AlteredView.AlteredByTurns.html": {
    "href": "api/Global.AlteredView.AlteredByTurns.html",
    "title": "Class AlteredView.AlteredByTurns | Example Unity documentation",
    "keywords": "Class AlteredView.AlteredByTurns Inheritance Object AlteredView.AlteredByTurns Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class AlteredByTurns Fields alteredObject Declaration public GameObject alteredObject Field Value Type Description GameObject turns Declaration public int turns Field Value Type Description Int32"
  },
  "api/Global.AlteredView.html": {
    "href": "api/Global.AlteredView.html",
    "title": "Class AlteredView | Example Unity documentation",
    "keywords": "Class AlteredView Inheritance Object AlteredView Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AlteredView : MonoBehaviour Fields spriteTest Declaration public Sprite spriteTest Field Value Type Description Sprite testTurn Declaration public int testTurn Field Value Type Description Int32 Methods PassTurn() Declaration public void PassTurn() ShowAlteredByTime(Int32, Sprite) Declaration public void ShowAlteredByTime(int turnCount, Sprite icon) Parameters Type Name Description Int32 turnCount Sprite icon Test() Declaration public void Test() UpdateAlteredVisual(GameObject, String, Sprite) Declaration public void UpdateAlteredVisual(GameObject target, string text, Sprite icon = null) Parameters Type Name Description GameObject target String text Sprite icon"
  },
  "api/Global.Analytics.html": {
    "href": "api/Global.Analytics.html",
    "title": "Class Analytics | Example Unity documentation",
    "keywords": "Class Analytics Inheritance Object Analytics Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Analytics : MonoBehaviour Methods UpdateAnalityc(String, Int32) Declaration public void UpdateAnalityc(string statistic, int value) Parameters Type Name Description String statistic Int32 value UpdateAnalitycCounter(String) Declaration public void UpdateAnalitycCounter(string statistic) Parameters Type Name Description String statistic"
  },
  "api/Global.AnimatorListener.html": {
    "href": "api/Global.AnimatorListener.html",
    "title": "Class AnimatorListener | Example Unity documentation",
    "keywords": "Class AnimatorListener Inheritance Object AnimatorListener Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AnimatorListener : NetworkBehaviour"
  },
  "api/Global.AtlasTextures.html": {
    "href": "api/Global.AtlasTextures.html",
    "title": "Class AtlasTextures | Example Unity documentation",
    "keywords": "Class AtlasTextures Inheritance Object AtlasTextures Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class AtlasTextures Fields AmbientOclusion Declaration public Texture2D AmbientOclusion Field Value Type Description Texture2D Difuse Declaration public Texture2D Difuse Field Value Type Description Texture2D Metallic Declaration public Texture2D Metallic Field Value Type Description Texture2D Normal Declaration public Texture2D Normal Field Value Type Description Texture2D"
  },
  "api/Global.AuthPanel.html": {
    "href": "api/Global.AuthPanel.html",
    "title": "Class AuthPanel | Example Unity documentation",
    "keywords": "Class AuthPanel Inheritance Object AuthPanel Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AuthPanel Fields authPanelType Declaration public List<AuthPanelType> authPanelType Field Value Type Description List < AuthPanelType > panelItem Declaration public Transform panelItem Field Value Type Description Transform"
  },
  "api/Global.AuthPanelType.html": {
    "href": "api/Global.AuthPanelType.html",
    "title": "Enum AuthPanelType | Example Unity documentation",
    "keywords": "Enum AuthPanelType Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum AuthPanelType Fields Name Description FORGOT_PASSWORD LOGIN SIGN_UP"
  },
  "api/Global.AutoDestroyPS.html": {
    "href": "api/Global.AutoDestroyPS.html",
    "title": "Class AutoDestroyPS | Example Unity documentation",
    "keywords": "Class AutoDestroyPS Inheritance Object AutoDestroyPS Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AutoDestroyPS : MonoBehaviour"
  },
  "api/Global.BackpackController.html": {
    "href": "api/Global.BackpackController.html",
    "title": "Class BackpackController | Example Unity documentation",
    "keywords": "Class BackpackController Inheritance Object BackpackController Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BackpackController : MonoBehaviour Fields backpackPanel Declaration public GameObject backpackPanel Field Value Type Description GameObject Methods CloseBackPack() Declaration public void CloseBackPack() OpenBackPack() Declaration public void OpenBackPack()"
  },
  "api/Global.BaseMultipliers.html": {
    "href": "api/Global.BaseMultipliers.html",
    "title": "Class BaseMultipliers | Example Unity documentation",
    "keywords": "Class BaseMultipliers Inheritance Object BaseMultipliers Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BaseMultipliers Fields statBonus1 Declaration public ShinseiStatsEnum statBonus1 Field Value Type Description ShinseiStatsEnum statBonus2 Declaration public ShinseiStatsEnum statBonus2 Field Value Type Description ShinseiStatsEnum statPenalty Declaration public ShinseiStatsEnum statPenalty Field Value Type Description ShinseiStatsEnum"
  },
  "api/Global.BattleActionBlockCard.html": {
    "href": "api/Global.BattleActionBlockCard.html",
    "title": "Class BattleActionBlockCard | Example Unity documentation",
    "keywords": "Class BattleActionBlockCard Inheritance Object BattleActionsBase BattleActionBlockCard Inherited Members BattleActionsBase.actionType BattleActionsBase.camManager BattleActionsBase.vFXInstancer BattleActionsBase.battleGameMode BattleActionsBase.battleUIController BattleActionsBase.shinseiTypeScriptable BattleActionsBase.launchVfx BattleActionsBase.vfxTime BattleActionsBase.actionTime BattleActionsBase.targetName BattleActionsBase.Init(CameraPlaneController, VFXInstancer, BattleGameMode, BattleUIController, ShinseiTypeScriptable) BattleActionsBase.CheckAction(Single, Action) BattleActionsBase.DecideIndexes(VFXPositionEnum, VFXPositionEnum, CamerasAvailableEnum, CamerasAvailableEnum, Boolean, BattleActionData) BattleActionsBase.ShowBothShinseisFar() BattleActionsBase.PlayAnimation(UserInfo, AttacksAnimation, Boolean, BattleActionData) BattleActionsBase.ActionTime() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BattleActionBlockCard : BattleActionsBase Methods EndAction(Boolean, UserInfo, UserInfo, BattleActionData) Declaration public override void EndAction(bool isLocalPlayer, UserInfo ownerPlayerAction, UserInfo otherPlayer, BattleActionData battleActionData) Parameters Type Name Description Boolean isLocalPlayer UserInfo ownerPlayerAction UserInfo otherPlayer BattleActionData battleActionData Overrides BattleActionsBase.EndAction(Boolean, UserInfo, UserInfo, BattleActionData) ExecuteAction(Boolean, UserInfo, UserInfo, BattleActionData, Action) Declaration public override void ExecuteAction(bool isLocalPlayer, UserInfo ownerPlayer, UserInfo otherPlayer, BattleActionData battleActionData, Action onEndVfxCallback = null) Parameters Type Name Description Boolean isLocalPlayer UserInfo ownerPlayer UserInfo otherPlayer BattleActionData battleActionData Action onEndVfxCallback Overrides BattleActionsBase.ExecuteAction(Boolean, UserInfo, UserInfo, BattleActionData, Action)"
  },
  "api/Global.BattleActionBuffDebuff.html": {
    "href": "api/Global.BattleActionBuffDebuff.html",
    "title": "Class BattleActionBuffDebuff | Example Unity documentation",
    "keywords": "Class BattleActionBuffDebuff Logic that allow change value of stats in combat Inheritance Object BattleActionsBase BattleActionBuffDebuff Inherited Members BattleActionsBase.actionType BattleActionsBase.camManager BattleActionsBase.vFXInstancer BattleActionsBase.battleGameMode BattleActionsBase.battleUIController BattleActionsBase.shinseiTypeScriptable BattleActionsBase.launchVfx BattleActionsBase.vfxTime BattleActionsBase.actionTime BattleActionsBase.targetName BattleActionsBase.Init(CameraPlaneController, VFXInstancer, BattleGameMode, BattleUIController, ShinseiTypeScriptable) BattleActionsBase.CheckAction(Single, Action) BattleActionsBase.DecideIndexes(VFXPositionEnum, VFXPositionEnum, CamerasAvailableEnum, CamerasAvailableEnum, Boolean, BattleActionData) BattleActionsBase.ShowBothShinseisFar() BattleActionsBase.PlayAnimation(UserInfo, AttacksAnimation, Boolean, BattleActionData) BattleActionsBase.ActionTime() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BattleActionBuffDebuff : BattleActionsBase Methods EndAction(Boolean, UserInfo, UserInfo, BattleActionData) Declaration public override void EndAction(bool isLocalPlayer, UserInfo ownerPlayer, UserInfo otherPlayer, BattleActionData buffDebuffData) Parameters Type Name Description Boolean isLocalPlayer UserInfo ownerPlayer UserInfo otherPlayer BattleActionData buffDebuffData Overrides BattleActionsBase.EndAction(Boolean, UserInfo, UserInfo, BattleActionData) ExecuteAction(Boolean, UserInfo, UserInfo, BattleActionData, Action) Declaration public override void ExecuteAction(bool isLocalPlayer, UserInfo ownerPlayer, UserInfo otherPlayer, BattleActionData buffDebuffData, Action onEndVfxCallback = null) Parameters Type Name Description Boolean isLocalPlayer UserInfo ownerPlayer UserInfo otherPlayer BattleActionData buffDebuffData Action onEndVfxCallback Overrides BattleActionsBase.ExecuteAction(Boolean, UserInfo, UserInfo, BattleActionData, Action)"
  },
  "api/Global.BattleActionChangeShinsei.html": {
    "href": "api/Global.BattleActionChangeShinsei.html",
    "title": "Class BattleActionChangeShinsei | Example Unity documentation",
    "keywords": "Class BattleActionChangeShinsei Logic of action that allow you change shinsei in combat Inheritance Object BattleActionsBase BattleActionChangeShinsei Inherited Members BattleActionsBase.actionType BattleActionsBase.camManager BattleActionsBase.vFXInstancer BattleActionsBase.battleGameMode BattleActionsBase.battleUIController BattleActionsBase.shinseiTypeScriptable BattleActionsBase.launchVfx BattleActionsBase.vfxTime BattleActionsBase.actionTime BattleActionsBase.targetName BattleActionsBase.Init(CameraPlaneController, VFXInstancer, BattleGameMode, BattleUIController, ShinseiTypeScriptable) BattleActionsBase.CheckAction(Single, Action) BattleActionsBase.DecideIndexes(VFXPositionEnum, VFXPositionEnum, CamerasAvailableEnum, CamerasAvailableEnum, Boolean, BattleActionData) BattleActionsBase.ShowBothShinseisFar() BattleActionsBase.PlayAnimation(UserInfo, AttacksAnimation, Boolean, BattleActionData) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BattleActionChangeShinsei : BattleActionsBase Methods ActionTime() Declaration public override float ActionTime() Returns Type Description Single Overrides BattleActionsBase.ActionTime() EndAction(Boolean, UserInfo, UserInfo, BattleActionData) Declaration public override void EndAction(bool isLocalPlayer, UserInfo ownerPlayerAction, UserInfo otherPlayer, BattleActionData battleActionData) Parameters Type Name Description Boolean isLocalPlayer UserInfo ownerPlayerAction UserInfo otherPlayer BattleActionData battleActionData Overrides BattleActionsBase.EndAction(Boolean, UserInfo, UserInfo, BattleActionData) ExecuteAction(Boolean, UserInfo, UserInfo, BattleActionData, Action) Declaration public override void ExecuteAction(bool isLocalPlayer, UserInfo ownerPlayerAction, UserInfo otherPlayer, BattleActionData battleActionData, Action onEndVfxCallback = null) Parameters Type Name Description Boolean isLocalPlayer UserInfo ownerPlayerAction UserInfo otherPlayer BattleActionData battleActionData Action onEndVfxCallback Overrides BattleActionsBase.ExecuteAction(Boolean, UserInfo, UserInfo, BattleActionData, Action)"
  },
  "api/Global.BattleActionChangeTerrain.html": {
    "href": "api/Global.BattleActionChangeTerrain.html",
    "title": "Class BattleActionChangeTerrain | Example Unity documentation",
    "keywords": "Class BattleActionChangeTerrain Inheritance Object BattleActionsBase BattleActionChangeTerrain Inherited Members BattleActionsBase.actionType BattleActionsBase.camManager BattleActionsBase.vFXInstancer BattleActionsBase.battleGameMode BattleActionsBase.battleUIController BattleActionsBase.shinseiTypeScriptable BattleActionsBase.launchVfx BattleActionsBase.vfxTime BattleActionsBase.actionTime BattleActionsBase.targetName BattleActionsBase.Init(CameraPlaneController, VFXInstancer, BattleGameMode, BattleUIController, ShinseiTypeScriptable) BattleActionsBase.CheckAction(Single, Action) BattleActionsBase.DecideIndexes(VFXPositionEnum, VFXPositionEnum, CamerasAvailableEnum, CamerasAvailableEnum, Boolean, BattleActionData) BattleActionsBase.ShowBothShinseisFar() BattleActionsBase.PlayAnimation(UserInfo, AttacksAnimation, Boolean, BattleActionData) BattleActionsBase.ActionTime() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BattleActionChangeTerrain : BattleActionsBase Fields terrainsBehaviours Declaration public List<BattleTerrainBehavioursBase> terrainsBehaviours Field Value Type Description List < BattleTerrainBehavioursBase > Methods EndAction(Boolean, UserInfo, UserInfo, BattleActionData) Declaration public override void EndAction(bool isLocalPlayer, UserInfo ownerPlayerAction, UserInfo otherPlayer, BattleActionData changeTerrainData) Parameters Type Name Description Boolean isLocalPlayer UserInfo ownerPlayerAction UserInfo otherPlayer BattleActionData changeTerrainData Overrides BattleActionsBase.EndAction(Boolean, UserInfo, UserInfo, BattleActionData) ExecuteAction(Boolean, UserInfo, UserInfo, BattleActionData, Action) Declaration public override void ExecuteAction(bool isLocalPlayer, UserInfo ownerPlayerAction, UserInfo otherPlayer, BattleActionData changeTerrainData, Action onEndVfxCallback = null) Parameters Type Name Description Boolean isLocalPlayer UserInfo ownerPlayerAction UserInfo otherPlayer BattleActionData changeTerrainData Action onEndVfxCallback Overrides BattleActionsBase.ExecuteAction(Boolean, UserInfo, UserInfo, BattleActionData, Action)"
  },
  "api/Global.BattleActionDamage.html": {
    "href": "api/Global.BattleActionDamage.html",
    "title": "Class BattleActionDamage | Example Unity documentation",
    "keywords": "Class BattleActionDamage Actions that make damage Inheritance Object BattleActionsBase BattleActionDamage Inherited Members BattleActionsBase.actionType BattleActionsBase.camManager BattleActionsBase.vFXInstancer BattleActionsBase.battleGameMode BattleActionsBase.battleUIController BattleActionsBase.shinseiTypeScriptable BattleActionsBase.launchVfx BattleActionsBase.vfxTime BattleActionsBase.actionTime BattleActionsBase.targetName BattleActionsBase.Init(CameraPlaneController, VFXInstancer, BattleGameMode, BattleUIController, ShinseiTypeScriptable) BattleActionsBase.CheckAction(Single, Action) BattleActionsBase.DecideIndexes(VFXPositionEnum, VFXPositionEnum, CamerasAvailableEnum, CamerasAvailableEnum, Boolean, BattleActionData) BattleActionsBase.ShowBothShinseisFar() BattleActionsBase.PlayAnimation(UserInfo, AttacksAnimation, Boolean, BattleActionData) BattleActionsBase.ActionTime() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BattleActionDamage : BattleActionsBase Methods EndAction(Boolean, UserInfo, UserInfo, BattleActionData) Declaration public override void EndAction(bool isLocalPlayer, UserInfo ownerPlayerAction, UserInfo otherPlayer, BattleActionData battleActionData) Parameters Type Name Description Boolean isLocalPlayer UserInfo ownerPlayerAction UserInfo otherPlayer BattleActionData battleActionData Overrides BattleActionsBase.EndAction(Boolean, UserInfo, UserInfo, BattleActionData) ExecuteAction(Boolean, UserInfo, UserInfo, BattleActionData, Action) Declaration public override void ExecuteAction(bool isLocalPlayer, UserInfo ownerPlayer, UserInfo otherPlayer, BattleActionData battleActionData, Action onEndVfxCallback = null) Parameters Type Name Description Boolean isLocalPlayer UserInfo ownerPlayer UserInfo otherPlayer BattleActionData battleActionData Action onEndVfxCallback Overrides BattleActionsBase.ExecuteAction(Boolean, UserInfo, UserInfo, BattleActionData, Action)"
  },
  "api/Global.BattleActionData.html": {
    "href": "api/Global.BattleActionData.html",
    "title": "Class BattleActionData | Example Unity documentation",
    "keywords": "Class BattleActionData Inheritance Object BattleActionData Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class BattleActionData : ICloneable Fields actionElementType Declaration public CharacterType actionElementType Field Value Type Description CharacterType actionType Declaration public ActionTypeEnum actionType Field Value Type Description ActionTypeEnum activateAlteredState Declaration public bool activateAlteredState Field Value Type Description Boolean alteredState Declaration public AlteredStateEnum alteredState Field Value Type Description AlteredStateEnum alteredStateToActivate Declaration public AlteredStateEnum alteredStateToActivate Field Value Type Description AlteredStateEnum amount Declaration public int amount Field Value Type Description Int32 applyEachTurn Declaration public bool applyEachTurn Field Value Type Description Boolean bonusPercent Declaration public float bonusPercent Field Value Type Description Single cardSkipTurn Declaration public bool cardSkipTurn Field Value Type Description Boolean casterAnim Declaration [NonSerialized] public AttacksAnimation casterAnim Field Value Type Description AttacksAnimation changeMinAndMaxStats Declaration public bool changeMinAndMaxStats Field Value Type Description Boolean copiedIndex Declaration [NonSerialized] public int copiedIndex Field Value Type Description Int32 criticsPercentChange Declaration public int criticsPercentChange Field Value Type Description Int32 criticsRoll Declaration public float criticsRoll Field Value Type Description Single currentVFXPositions Declaration [NonSerialized] public Dictionary<VFXPositionEnum, Transform> currentVFXPositions Field Value Type Description Dictionary < VFXPositionEnum , Transform > evadedTurns Declaration public int evadedTurns Field Value Type Description Int32 evadeRoll Declaration public float evadeRoll Field Value Type Description Single isBuff Declaration public bool isBuff Field Value Type Description Boolean isComingFromCopyIndex Declaration [NonSerialized] public int isComingFromCopyIndex Field Value Type Description Int32 isPercertange Declaration public bool isPercertange Field Value Type Description Boolean isSelfInflicted Declaration public bool isSelfInflicted Field Value Type Description Boolean isVfxReversed Declaration [NonSerialized] public bool isVfxReversed Field Value Type Description Boolean launchVfx Declaration [NonSerialized] public bool launchVfx Field Value Type Description Boolean numberOfTimesBuffApplied Declaration public int numberOfTimesBuffApplied Field Value Type Description Int32 perTurns Declaration public bool perTurns Field Value Type Description Boolean stat1 Declaration public ShinseiStatsEnum stat1 Field Value Type Description ShinseiStatsEnum stat2 Declaration public ShinseiStatsEnum stat2 Field Value Type Description ShinseiStatsEnum statBonusDamage Declaration public ShinseiStatsEnum statBonusDamage Field Value Type Description ShinseiStatsEnum statToModify Declaration public ShinseiStatsEnum statToModify Field Value Type Description ShinseiStatsEnum targetAnim Declaration [NonSerialized] public AttacksAnimation targetAnim Field Value Type Description AttacksAnimation turnActions Declaration [NonSerialized] public ActionCardDto turnActions Field Value Type Description ActionCardDto turnsDuration Declaration public int turnsDuration Field Value Type Description Int32 turnsPassed Declaration public int turnsPassed Field Value Type Description Int32 typeOfTerrain Declaration public TypesOfTerrainEnum typeOfTerrain Field Value Type Description TypesOfTerrainEnum vfxAffectBoth Declaration [NonSerialized] public bool vfxAffectBoth Field Value Type Description Boolean vfxIndex Declaration [NonSerialized] public int vfxIndex Field Value Type Description Int32 vfxTime Declaration [NonSerialized] public float vfxTime Field Value Type Description Single Methods Clone() Declaration public object Clone() Returns Type Description Object"
  },
  "api/Global.BattleActionHeal.html": {
    "href": "api/Global.BattleActionHeal.html",
    "title": "Class BattleActionHeal | Example Unity documentation",
    "keywords": "Class BattleActionHeal This class allow grown up the life values Inheritance Object BattleActionsBase BattleActionHeal Inherited Members BattleActionsBase.actionType BattleActionsBase.camManager BattleActionsBase.vFXInstancer BattleActionsBase.battleGameMode BattleActionsBase.battleUIController BattleActionsBase.shinseiTypeScriptable BattleActionsBase.launchVfx BattleActionsBase.vfxTime BattleActionsBase.actionTime BattleActionsBase.targetName BattleActionsBase.Init(CameraPlaneController, VFXInstancer, BattleGameMode, BattleUIController, ShinseiTypeScriptable) BattleActionsBase.CheckAction(Single, Action) BattleActionsBase.DecideIndexes(VFXPositionEnum, VFXPositionEnum, CamerasAvailableEnum, CamerasAvailableEnum, Boolean, BattleActionData) BattleActionsBase.ShowBothShinseisFar() BattleActionsBase.PlayAnimation(UserInfo, AttacksAnimation, Boolean, BattleActionData) BattleActionsBase.ActionTime() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BattleActionHeal : BattleActionsBase Methods EndAction(Boolean, UserInfo, UserInfo, BattleActionData) Declaration public override void EndAction(bool isLocalPlayer, UserInfo ownerPlayerAction, UserInfo otherPlayer, BattleActionData battleActionData) Parameters Type Name Description Boolean isLocalPlayer UserInfo ownerPlayerAction UserInfo otherPlayer BattleActionData battleActionData Overrides BattleActionsBase.EndAction(Boolean, UserInfo, UserInfo, BattleActionData) ExecuteAction(Boolean, UserInfo, UserInfo, BattleActionData, Action) Declaration public override void ExecuteAction(bool isLocalPlayer, UserInfo ownerPlayer, UserInfo otherPlayer, BattleActionData healData, Action onEndVfxCallback = null) Parameters Type Name Description Boolean isLocalPlayer UserInfo ownerPlayer UserInfo otherPlayer BattleActionData healData Action onEndVfxCallback Overrides BattleActionsBase.ExecuteAction(Boolean, UserInfo, UserInfo, BattleActionData, Action)"
  },
  "api/Global.BattleActionPutAlteredState.html": {
    "href": "api/Global.BattleActionPutAlteredState.html",
    "title": "Class BattleActionPutAlteredState | Example Unity documentation",
    "keywords": "Class BattleActionPutAlteredState This class control the behavior of Altered States Inheritance Object BattleActionsBase BattleActionPutAlteredState Inherited Members BattleActionsBase.actionType BattleActionsBase.camManager BattleActionsBase.vFXInstancer BattleActionsBase.battleGameMode BattleActionsBase.battleUIController BattleActionsBase.shinseiTypeScriptable BattleActionsBase.launchVfx BattleActionsBase.vfxTime BattleActionsBase.actionTime BattleActionsBase.targetName BattleActionsBase.Init(CameraPlaneController, VFXInstancer, BattleGameMode, BattleUIController, ShinseiTypeScriptable) BattleActionsBase.CheckAction(Single, Action) BattleActionsBase.DecideIndexes(VFXPositionEnum, VFXPositionEnum, CamerasAvailableEnum, CamerasAvailableEnum, Boolean, BattleActionData) BattleActionsBase.ShowBothShinseisFar() BattleActionsBase.PlayAnimation(UserInfo, AttacksAnimation, Boolean, BattleActionData) BattleActionsBase.ActionTime() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BattleActionPutAlteredState : BattleActionsBase Methods EndAction(Boolean, UserInfo, UserInfo, BattleActionData) Declaration public override void EndAction(bool isLocalPlayer, UserInfo ownerPlayer, UserInfo otherPlayer, BattleActionData putAlteredStateData) Parameters Type Name Description Boolean isLocalPlayer UserInfo ownerPlayer UserInfo otherPlayer BattleActionData putAlteredStateData Overrides BattleActionsBase.EndAction(Boolean, UserInfo, UserInfo, BattleActionData) ExecuteAction(Boolean, UserInfo, UserInfo, BattleActionData, Action) Declaration public override void ExecuteAction(bool isLocalPlayer, UserInfo ownerPlayer, UserInfo otherPlayer, BattleActionData putAlteredStateData, Action onEndVfxCallback = null) Parameters Type Name Description Boolean isLocalPlayer UserInfo ownerPlayer UserInfo otherPlayer BattleActionData putAlteredStateData Action onEndVfxCallback Overrides BattleActionsBase.ExecuteAction(Boolean, UserInfo, UserInfo, BattleActionData, Action)"
  },
  "api/Global.BattleActionReflect.html": {
    "href": "api/Global.BattleActionReflect.html",
    "title": "Class BattleActionReflect | Example Unity documentation",
    "keywords": "Class BattleActionReflect This class controls a special attack case when shinsei reflect damage Inheritance Object BattleActionsBase BattleActionReflect Inherited Members BattleActionsBase.actionType BattleActionsBase.camManager BattleActionsBase.vFXInstancer BattleActionsBase.battleGameMode BattleActionsBase.battleUIController BattleActionsBase.shinseiTypeScriptable BattleActionsBase.launchVfx BattleActionsBase.vfxTime BattleActionsBase.actionTime BattleActionsBase.targetName BattleActionsBase.Init(CameraPlaneController, VFXInstancer, BattleGameMode, BattleUIController, ShinseiTypeScriptable) BattleActionsBase.CheckAction(Single, Action) BattleActionsBase.DecideIndexes(VFXPositionEnum, VFXPositionEnum, CamerasAvailableEnum, CamerasAvailableEnum, Boolean, BattleActionData) BattleActionsBase.ShowBothShinseisFar() BattleActionsBase.PlayAnimation(UserInfo, AttacksAnimation, Boolean, BattleActionData) BattleActionsBase.ActionTime() BattleActionsBase.EndAction(Boolean, UserInfo, UserInfo, BattleActionData) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BattleActionReflect : BattleActionsBase Methods ExecuteAction(Boolean, UserInfo, UserInfo, BattleActionData, Action) Declaration public override void ExecuteAction(bool isLocalPlayer, UserInfo ownerPlayer, UserInfo otherPlayer, BattleActionData battleActionData, Action onEndVfxCallback = null) Parameters Type Name Description Boolean isLocalPlayer UserInfo ownerPlayer UserInfo otherPlayer BattleActionData battleActionData Action onEndVfxCallback Overrides BattleActionsBase.ExecuteAction(Boolean, UserInfo, UserInfo, BattleActionData, Action)"
  },
  "api/Global.BattleActionsBase.html": {
    "href": "api/Global.BattleActionsBase.html",
    "title": "Class BattleActionsBase | Example Unity documentation",
    "keywords": "Class BattleActionsBase Inheritance Object BattleActionsBase BattleActionBlockCard BattleActionBuffDebuff BattleActionChangeShinsei BattleActionChangeTerrain BattleActionDamage BattleActionHeal BattleActionPutAlteredState BattleActionReflect BattleActionsBaseTemplate BattleActionSkipTurn BattleActionStatSwap Namespace : Global Assembly : cs.temp.dll.dll Syntax public abstract class BattleActionsBase : MonoBehaviour Fields actionTime Declaration protected float actionTime Field Value Type Description Single actionType Declaration public ActionTypeEnum actionType Field Value Type Description ActionTypeEnum battleGameMode Declaration protected BattleGameMode battleGameMode Field Value Type Description BattleGameMode battleUIController Declaration protected BattleUIController battleUIController Field Value Type Description BattleUIController camManager Declaration protected CameraPlaneController camManager Field Value Type Description CameraPlaneController launchVfx Declaration protected bool launchVfx Field Value Type Description Boolean shinseiTypeScriptable Declaration protected ShinseiTypeScriptable shinseiTypeScriptable Field Value Type Description ShinseiTypeScriptable targetName Declaration protected string targetName Field Value Type Description String vFXInstancer Declaration protected VFXInstancer vFXInstancer Field Value Type Description VFXInstancer vfxTime Declaration protected float vfxTime Field Value Type Description Single Methods ActionTime() Declaration public virtual float ActionTime() Returns Type Description Single CheckAction(Single, Action) Declaration public IEnumerator CheckAction(float time, Action onEndVfxCallback) Parameters Type Name Description Single time Action onEndVfxCallback Returns Type Description IEnumerator DecideIndexes(out VFXPositionEnum, out VFXPositionEnum, out CamerasAvailableEnum, out CamerasAvailableEnum, Boolean, BattleActionData) Declaration public void DecideIndexes(out VFXPositionEnum ownerPositionIndexForMuzzle, out VFXPositionEnum targetPositionIndex, out CamerasAvailableEnum lookAtShinseiCam, out CamerasAvailableEnum lookAtOtherShinseiCam, bool isLocal, BattleActionData battleActionData) Parameters Type Name Description VFXPositionEnum ownerPositionIndexForMuzzle VFXPositionEnum targetPositionIndex CamerasAvailableEnum lookAtShinseiCam CamerasAvailableEnum lookAtOtherShinseiCam Boolean isLocal BattleActionData battleActionData EndAction(Boolean, UserInfo, UserInfo, BattleActionData) Declaration public virtual void EndAction(bool isLocalPlayer, UserInfo ownerPlayerAction, UserInfo otherPlayer, BattleActionData battleActionData) Parameters Type Name Description Boolean isLocalPlayer UserInfo ownerPlayerAction UserInfo otherPlayer BattleActionData battleActionData ExecuteAction(Boolean, UserInfo, UserInfo, BattleActionData, Action) Declaration public virtual void ExecuteAction(bool isLocalPlayer, UserInfo ownerPlayer, UserInfo otherPlayer, BattleActionData battleActionData, Action onEndVfxCallback = null) Parameters Type Name Description Boolean isLocalPlayer UserInfo ownerPlayer UserInfo otherPlayer BattleActionData battleActionData Action onEndVfxCallback Init(CameraPlaneController, VFXInstancer, BattleGameMode, BattleUIController, ShinseiTypeScriptable) Declaration public virtual void Init(CameraPlaneController _camManager, VFXInstancer _vFXInstancer, BattleGameMode _battleGameMode, BattleUIController _battleUIController, ShinseiTypeScriptable _shinseiTypeScriptable) Parameters Type Name Description CameraPlaneController _camManager VFXInstancer _vFXInstancer BattleGameMode _battleGameMode BattleUIController _battleUIController ShinseiTypeScriptable _shinseiTypeScriptable PlayAnimation(UserInfo, AttacksAnimation, Boolean, BattleActionData) Declaration public void PlayAnimation(UserInfo targetInfo, AttacksAnimation animation, bool isLocalPlayer, BattleActionData battleActionData) Parameters Type Name Description UserInfo targetInfo AttacksAnimation animation Boolean isLocalPlayer BattleActionData battleActionData ShowBothShinseisFar() Declaration public void ShowBothShinseisFar()"
  },
  "api/Global.BattleActionsBaseTemplate.html": {
    "href": "api/Global.BattleActionsBaseTemplate.html",
    "title": "Class BattleActionsBaseTemplate | Example Unity documentation",
    "keywords": "Class BattleActionsBaseTemplate Inheritance Object BattleActionsBase BattleActionsBaseTemplate Inherited Members BattleActionsBase.actionType BattleActionsBase.camManager BattleActionsBase.vFXInstancer BattleActionsBase.battleGameMode BattleActionsBase.battleUIController BattleActionsBase.shinseiTypeScriptable BattleActionsBase.launchVfx BattleActionsBase.vfxTime BattleActionsBase.actionTime BattleActionsBase.targetName BattleActionsBase.Init(CameraPlaneController, VFXInstancer, BattleGameMode, BattleUIController, ShinseiTypeScriptable) BattleActionsBase.ExecuteAction(Boolean, UserInfo, UserInfo, BattleActionData, Action) BattleActionsBase.CheckAction(Single, Action) BattleActionsBase.DecideIndexes(VFXPositionEnum, VFXPositionEnum, CamerasAvailableEnum, CamerasAvailableEnum, Boolean, BattleActionData) BattleActionsBase.ShowBothShinseisFar() BattleActionsBase.PlayAnimation(UserInfo, AttacksAnimation, Boolean, BattleActionData) BattleActionsBase.ActionTime() BattleActionsBase.EndAction(Boolean, UserInfo, UserInfo, BattleActionData) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BattleActionsBaseTemplate : BattleActionsBase"
  },
  "api/Global.BattleActionSkipTurn.html": {
    "href": "api/Global.BattleActionSkipTurn.html",
    "title": "Class BattleActionSkipTurn | Example Unity documentation",
    "keywords": "Class BattleActionSkipTurn This class allow user send a turn withouth data Inheritance Object BattleActionsBase BattleActionSkipTurn Inherited Members BattleActionsBase.actionType BattleActionsBase.camManager BattleActionsBase.vFXInstancer BattleActionsBase.battleGameMode BattleActionsBase.battleUIController BattleActionsBase.shinseiTypeScriptable BattleActionsBase.launchVfx BattleActionsBase.vfxTime BattleActionsBase.actionTime BattleActionsBase.targetName BattleActionsBase.Init(CameraPlaneController, VFXInstancer, BattleGameMode, BattleUIController, ShinseiTypeScriptable) BattleActionsBase.CheckAction(Single, Action) BattleActionsBase.DecideIndexes(VFXPositionEnum, VFXPositionEnum, CamerasAvailableEnum, CamerasAvailableEnum, Boolean, BattleActionData) BattleActionsBase.ShowBothShinseisFar() BattleActionsBase.PlayAnimation(UserInfo, AttacksAnimation, Boolean, BattleActionData) BattleActionsBase.ActionTime() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BattleActionSkipTurn : BattleActionsBase Methods EndAction(Boolean, UserInfo, UserInfo, BattleActionData) Declaration public override void EndAction(bool isLocalPlayer, UserInfo ownerPlayer, UserInfo otherPlayer, BattleActionData putAlteredStateData) Parameters Type Name Description Boolean isLocalPlayer UserInfo ownerPlayer UserInfo otherPlayer BattleActionData putAlteredStateData Overrides BattleActionsBase.EndAction(Boolean, UserInfo, UserInfo, BattleActionData) ExecuteAction(Boolean, UserInfo, UserInfo, BattleActionData, Action) Declaration public override void ExecuteAction(bool isLocalPlayer, UserInfo ownerPlayer, UserInfo otherPlayer, BattleActionData skipTurnData, Action onEndVfxCallback = null) Parameters Type Name Description Boolean isLocalPlayer UserInfo ownerPlayer UserInfo otherPlayer BattleActionData skipTurnData Action onEndVfxCallback Overrides BattleActionsBase.ExecuteAction(Boolean, UserInfo, UserInfo, BattleActionData, Action)"
  },
  "api/Global.BattleActionStatSwap.html": {
    "href": "api/Global.BattleActionStatSwap.html",
    "title": "Class BattleActionStatSwap | Example Unity documentation",
    "keywords": "Class BattleActionStatSwap This class allow swap between two stats Inheritance Object BattleActionsBase BattleActionStatSwap Inherited Members BattleActionsBase.actionType BattleActionsBase.camManager BattleActionsBase.vFXInstancer BattleActionsBase.battleGameMode BattleActionsBase.battleUIController BattleActionsBase.shinseiTypeScriptable BattleActionsBase.launchVfx BattleActionsBase.vfxTime BattleActionsBase.actionTime BattleActionsBase.targetName BattleActionsBase.Init(CameraPlaneController, VFXInstancer, BattleGameMode, BattleUIController, ShinseiTypeScriptable) BattleActionsBase.CheckAction(Single, Action) BattleActionsBase.DecideIndexes(VFXPositionEnum, VFXPositionEnum, CamerasAvailableEnum, CamerasAvailableEnum, Boolean, BattleActionData) BattleActionsBase.ShowBothShinseisFar() BattleActionsBase.PlayAnimation(UserInfo, AttacksAnimation, Boolean, BattleActionData) BattleActionsBase.ActionTime() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BattleActionStatSwap : BattleActionsBase Methods CheckBuffDebuffTargets(String, String, List<BattleActionData>) Declaration public void CheckBuffDebuffTargets(string stat1Name, string stat2Name, List<BattleActionData> targetBattleActions) Parameters Type Name Description String stat1Name String stat2Name List < BattleActionData > targetBattleActions EndAction(Boolean, UserInfo, UserInfo, BattleActionData) Declaration public override void EndAction(bool isLocalPlayer, UserInfo ownerPlayer, UserInfo otherPlayer, BattleActionData statSwapData) Parameters Type Name Description Boolean isLocalPlayer UserInfo ownerPlayer UserInfo otherPlayer BattleActionData statSwapData Overrides BattleActionsBase.EndAction(Boolean, UserInfo, UserInfo, BattleActionData) ExecuteAction(Boolean, UserInfo, UserInfo, BattleActionData, Action) Declaration public override void ExecuteAction(bool isLocalPlayer, UserInfo ownerPlayer, UserInfo otherPlayer, BattleActionData statSwapData, Action onEndVfxCallback = null) Parameters Type Name Description Boolean isLocalPlayer UserInfo ownerPlayer UserInfo otherPlayer BattleActionData statSwapData Action onEndVfxCallback Overrides BattleActionsBase.ExecuteAction(Boolean, UserInfo, UserInfo, BattleActionData, Action)"
  },
  "api/Global.BattleAlteredStateBase.html": {
    "href": "api/Global.BattleAlteredStateBase.html",
    "title": "Class BattleAlteredStateBase | Example Unity documentation",
    "keywords": "Class BattleAlteredStateBase Inheritance Object BattleAlteredStateBase BattleAlteredStateBleeding BattleAlteredStateEvasionChange BattleAlteredStateIgnited BattleAlteredStateRoot Namespace : Global Assembly : cs.temp.dll.dll Syntax public abstract class BattleAlteredStateBase : MonoBehaviour Fields alteredStateData Declaration public BattleAlteredStateDataSO alteredStateData Field Value Type Description BattleAlteredStateDataSO muzzleAnimation Declaration public AttacksAnimation muzzleAnimation Field Value Type Description AttacksAnimation Methods EndAlteredState(UserInfo, Boolean) Declaration public virtual void EndAlteredState(UserInfo _targetInfo = null, bool isTargetLocalPlayer = false) Parameters Type Name Description UserInfo _targetInfo Boolean isTargetLocalPlayer ExecuteAlteredState(UserInfo, List<BattleActionData>, Boolean) Declaration public virtual void ExecuteAlteredState(UserInfo _targetInfo = null, List<BattleActionData> turnActions = null, bool isTargetLocalPlayer = false) Parameters Type Name Description UserInfo _targetInfo List < BattleActionData > turnActions Boolean isTargetLocalPlayer InitAlteredState(Boolean, UserInfo, BattleGameMode, BattleUIController, Boolean) Declaration public virtual void InitAlteredState(bool isLocal, UserInfo _targetInfo, BattleGameMode _battleGameMode, BattleUIController _battleUIController, bool justReplace = false) Parameters Type Name Description Boolean isLocal UserInfo _targetInfo BattleGameMode _battleGameMode BattleUIController _battleUIController Boolean justReplace"
  },
  "api/Global.BattleAlteredStateBleeding.html": {
    "href": "api/Global.BattleAlteredStateBleeding.html",
    "title": "Class BattleAlteredStateBleeding | Example Unity documentation",
    "keywords": "Class BattleAlteredStateBleeding Inheritance Object BattleAlteredStateBase BattleAlteredStateBleeding Inherited Members BattleAlteredStateBase.alteredStateData BattleAlteredStateBase.muzzleAnimation BattleAlteredStateBase.InitAlteredState(Boolean, UserInfo, BattleGameMode, BattleUIController, Boolean) BattleAlteredStateBase.ExecuteAlteredState(UserInfo, List<BattleActionData>, Boolean) BattleAlteredStateBase.EndAlteredState(UserInfo, Boolean) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BattleAlteredStateBleeding : BattleAlteredStateBase"
  },
  "api/Global.BattleAlteredStateDataSO.html": {
    "href": "api/Global.BattleAlteredStateDataSO.html",
    "title": "Class BattleAlteredStateDataSO | Example Unity documentation",
    "keywords": "Class BattleAlteredStateDataSO Inheritance Object BattleAlteredStateDataSO Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class BattleAlteredStateDataSO : SerializedScriptableObject Fields alteredState Declaration public AlteredStateEnum alteredState Field Value Type Description AlteredStateEnum alteredStateActions Declaration public ActionDataList alteredStateActions Field Value Type Description ActionDataList displayMessage Declaration public string displayMessage Field Value Type Description String endMessage Declaration public string endMessage Field Value Type Description String startMessage Declaration public string startMessage Field Value Type Description String"
  },
  "api/Global.BattleAlteredStateEvasionChange.html": {
    "href": "api/Global.BattleAlteredStateEvasionChange.html",
    "title": "Class BattleAlteredStateEvasionChange | Example Unity documentation",
    "keywords": "Class BattleAlteredStateEvasionChange Inheritance Object BattleAlteredStateBase BattleAlteredStateEvasionChange Inherited Members BattleAlteredStateBase.alteredStateData BattleAlteredStateBase.muzzleAnimation Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BattleAlteredStateEvasionChange : BattleAlteredStateBase Methods EndAlteredState(UserInfo, Boolean) Declaration public override void EndAlteredState(UserInfo _targetInfo = null, bool isTargetLocalPlayer = false) Parameters Type Name Description UserInfo _targetInfo Boolean isTargetLocalPlayer Overrides BattleAlteredStateBase.EndAlteredState(UserInfo, Boolean) ExecuteAlteredState(UserInfo, List<BattleActionData>, Boolean) Declaration public override void ExecuteAlteredState(UserInfo _targetInfo = null, List<BattleActionData> turnActions = null, bool isTargetLocalPlayer = false) Parameters Type Name Description UserInfo _targetInfo List < BattleActionData > turnActions Boolean isTargetLocalPlayer Overrides BattleAlteredStateBase.ExecuteAlteredState(UserInfo, List<BattleActionData>, Boolean) InitAlteredState(Boolean, UserInfo, BattleGameMode, BattleUIController, Boolean) Declaration public override void InitAlteredState(bool isLocal, UserInfo _targetInfo, BattleGameMode _battleGameMode, BattleUIController _battleUIController, bool justReplace = false) Parameters Type Name Description Boolean isLocal UserInfo _targetInfo BattleGameMode _battleGameMode BattleUIController _battleUIController Boolean justReplace Overrides BattleAlteredStateBase.InitAlteredState(Boolean, UserInfo, BattleGameMode, BattleUIController, Boolean)"
  },
  "api/Global.BattleAlteredStateIgnited.html": {
    "href": "api/Global.BattleAlteredStateIgnited.html",
    "title": "Class BattleAlteredStateIgnited | Example Unity documentation",
    "keywords": "Class BattleAlteredStateIgnited Specific case of Altered State Ignite Inheritance Object BattleAlteredStateBase BattleAlteredStateIgnited Inherited Members BattleAlteredStateBase.alteredStateData BattleAlteredStateBase.muzzleAnimation BattleAlteredStateBase.InitAlteredState(Boolean, UserInfo, BattleGameMode, BattleUIController, Boolean) BattleAlteredStateBase.EndAlteredState(UserInfo, Boolean) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BattleAlteredStateIgnited : BattleAlteredStateBase Methods ExecuteAlteredState(UserInfo, List<BattleActionData>, Boolean) Declaration public override void ExecuteAlteredState(UserInfo _targetInfo = null, List<BattleActionData> turnActions = null, bool isTargetLocalPlayer = false) Parameters Type Name Description UserInfo _targetInfo List < BattleActionData > turnActions Boolean isTargetLocalPlayer Overrides BattleAlteredStateBase.ExecuteAlteredState(UserInfo, List<BattleActionData>, Boolean)"
  },
  "api/Global.BattleAlteredStateRoot.html": {
    "href": "api/Global.BattleAlteredStateRoot.html",
    "title": "Class BattleAlteredStateRoot | Example Unity documentation",
    "keywords": "Class BattleAlteredStateRoot The specific case of altered state Root Inheritance Object BattleAlteredStateBase BattleAlteredStateRoot Inherited Members BattleAlteredStateBase.alteredStateData BattleAlteredStateBase.muzzleAnimation BattleAlteredStateBase.InitAlteredState(Boolean, UserInfo, BattleGameMode, BattleUIController, Boolean) BattleAlteredStateBase.EndAlteredState(UserInfo, Boolean) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BattleAlteredStateRoot : BattleAlteredStateBase Methods ExecuteAlteredState(UserInfo, List<BattleActionData>, Boolean) Declaration public override void ExecuteAlteredState(UserInfo ownerInfo = null, List<BattleActionData> turnActions = null, bool isTargetLocalPlayer = false) Parameters Type Name Description UserInfo ownerInfo List < BattleActionData > turnActions Boolean isTargetLocalPlayer Overrides BattleAlteredStateBase.ExecuteAlteredState(UserInfo, List<BattleActionData>, Boolean)"
  },
  "api/Global.BattleNotificationSystem.html": {
    "href": "api/Global.BattleNotificationSystem.html",
    "title": "Class BattleNotificationSystem | Example Unity documentation",
    "keywords": "Class BattleNotificationSystem Inheritance Object BattleNotificationSystem Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BattleNotificationSystem : TextboxBase"
  },
  "api/Global.BattleTerrainBehavioursBase.html": {
    "href": "api/Global.BattleTerrainBehavioursBase.html",
    "title": "Class BattleTerrainBehavioursBase | Example Unity documentation",
    "keywords": "Class BattleTerrainBehavioursBase Inheritance Object BattleTerrainBehavioursBase BattleTerrainBehaviourSnow Namespace : Global Assembly : cs.temp.dll.dll Syntax public abstract class BattleTerrainBehavioursBase : MonoBehaviour Fields allShinseis Declaration protected List<Shinsei> allShinseis Field Value Type Description List < Shinsei > battleGameMode Declaration protected BattleGameMode battleGameMode Field Value Type Description BattleGameMode terrainData Declaration public BattleTerrainDataSO terrainData Field Value Type Description BattleTerrainDataSO turnsDuration Declaration protected int turnsDuration Field Value Type Description Int32 turnsLeft Declaration public int turnsLeft Field Value Type Description Int32 Methods EndAction(CharacterType, Boolean) Declaration public float EndAction(CharacterType shinseiType, bool isPlayer = false) Parameters Type Name Description CharacterType shinseiType Boolean isPlayer Returns Type Description Single EndTerrainBehaviour() End terrain behaviour, return time of behaviour Declaration public virtual float EndTerrainBehaviour() Returns Type Description Single ExecuteAction(CharacterType, Boolean) Declaration public float ExecuteAction(CharacterType shinseiType, bool isPlayer = false) Parameters Type Name Description CharacterType shinseiType Boolean isPlayer Returns Type Description Single ExecuteActionsOfTerrain(Func<CharacterType, Boolean, Single>, Boolean) Execute the actions set to this terrain, Declaration public virtual float ExecuteActionsOfTerrain(Func<CharacterType, bool, float> executeOrEnd, bool toAll = false) Parameters Type Name Description Func < CharacterType , Boolean , Single > executeOrEnd Boolean toAll toAll shinseis or just to the current ones Returns Type Description Single ExecuteTerrainBehaviour() Execute terrain behaviour, return time of behaviour Declaration public virtual float ExecuteTerrainBehaviour() Returns Type Description Single InitTerrainBehaviour(BattleGameMode) Init terrain behaviour, return time of behaviour Declaration public virtual float InitTerrainBehaviour(BattleGameMode battleGameMode) Parameters Type Name Description BattleGameMode battleGameMode Returns Type Description Single"
  },
  "api/Global.BattleTerrainBehaviourSnow.html": {
    "href": "api/Global.BattleTerrainBehaviourSnow.html",
    "title": "Class BattleTerrainBehaviourSnow | Example Unity documentation",
    "keywords": "Class BattleTerrainBehaviourSnow Inheritance Object BattleTerrainBehavioursBase BattleTerrainBehaviourSnow Inherited Members BattleTerrainBehavioursBase.allShinseis BattleTerrainBehavioursBase.turnsLeft BattleTerrainBehavioursBase.turnsDuration BattleTerrainBehavioursBase.battleGameMode BattleTerrainBehavioursBase.terrainData BattleTerrainBehavioursBase.ExecuteActionsOfTerrain(Func<CharacterType, Boolean, Single>, Boolean) BattleTerrainBehavioursBase.ExecuteAction(CharacterType, Boolean) BattleTerrainBehavioursBase.EndAction(CharacterType, Boolean) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BattleTerrainBehaviourSnow : BattleTerrainBehavioursBase Methods EndTerrainBehaviour() Declaration public override float EndTerrainBehaviour() Returns Type Description Single Overrides BattleTerrainBehavioursBase.EndTerrainBehaviour() ExecuteTerrainBehaviour() Declaration public override float ExecuteTerrainBehaviour() Returns Type Description Single Overrides BattleTerrainBehavioursBase.ExecuteTerrainBehaviour() InitTerrainBehaviour(BattleGameMode) Declaration public override float InitTerrainBehaviour(BattleGameMode battleGameMode) Parameters Type Name Description BattleGameMode battleGameMode Returns Type Description Single Overrides BattleTerrainBehavioursBase.InitTerrainBehaviour(BattleGameMode)"
  },
  "api/Global.BattleTerrainDataSO.html": {
    "href": "api/Global.BattleTerrainDataSO.html",
    "title": "Class BattleTerrainDataSO | Example Unity documentation",
    "keywords": "Class BattleTerrainDataSO Inheritance Object BattleTerrainDataSO Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class BattleTerrainDataSO : SerializedScriptableObject Fields displayMessage Declaration public string displayMessage Field Value Type Description String globalActions Declaration public ActionDataList globalActions Field Value Type Description ActionDataList terrainType Declaration public TypesOfTerrainEnum terrainType Field Value Type Description TypesOfTerrainEnum typesActions Declaration public List<TypesActions> typesActions Field Value Type Description List < TypesActions > Methods GetJsonActionCards() Declaration public void GetJsonActionCards()"
  },
  "api/Global.BodyStyle.BodyPartDressable.html": {
    "href": "api/Global.BodyStyle.BodyPartDressable.html",
    "title": "Class BodyStyle.BodyPartDressable | Example Unity documentation",
    "keywords": "Class BodyStyle.BodyPartDressable Inheritance Object BodyStyle.BodyPartDressable Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class BodyPartDressable Methods SelectObject(Int32, Boolean) Declaration public void SelectObject(int index, bool isLocal = false) Parameters Type Name Description Int32 index Boolean isLocal"
  },
  "api/Global.BodyStyle.html": {
    "href": "api/Global.BodyStyle.html",
    "title": "Class BodyStyle | Example Unity documentation",
    "keywords": "Class BodyStyle Inheritance Object BodyStyle Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BodyStyle : MonoBehaviour Fields bodyParts Declaration public List<BodyStyle.BodyPartDressable> bodyParts Field Value Type Description List < BodyStyle.BodyPartDressable >"
  },
  "api/Global.BoneAnimationTracker.html": {
    "href": "api/Global.BoneAnimationTracker.html",
    "title": "Class BoneAnimationTracker | Example Unity documentation",
    "keywords": "Class BoneAnimationTracker Inheritance Object BoneAnimationTracker Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BoneAnimationTracker : MonoBehaviour Fields boneTracker Declaration public GameObject boneTracker Field Value Type Description GameObject matAnimations Declaration public List<MatAnimation> matAnimations Field Value Type Description List < MatAnimation > materials Declaration public List<Material> materials Field Value Type Description List < Material > Methods Update() Declaration public void Update() VerifyAllMatAnimations(MatAnimation.AttachedEdge, Single) Declaration public void VerifyAllMatAnimations(MatAnimation.AttachedEdge targetAttachedEdge, float bonePositionEdge) Parameters Type Name Description MatAnimation.AttachedEdge targetAttachedEdge Single bonePositionEdge"
  },
  "api/Global.BotPlayfabIdsList.html": {
    "href": "api/Global.BotPlayfabIdsList.html",
    "title": "Class BotPlayfabIdsList | Example Unity documentation",
    "keywords": "Class BotPlayfabIdsList Inheritance Object BotPlayfabIdsList Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BotPlayfabIdsList : ScriptableObject Fields playfabIdList Declaration public List<string> playfabIdList Field Value Type Description List < String >"
  },
  "api/Global.BracketsData.html": {
    "href": "api/Global.BracketsData.html",
    "title": "Class BracketsData | Example Unity documentation",
    "keywords": "Class BracketsData Inheritance Object BracketsData Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BracketsData Fields displayName1 Declaration public string displayName1 Field Value Type Description String displayName2 Declaration public string displayName2 Field Value Type Description String matchId Declaration public string matchId Field Value Type Description String p1Joined Declaration public bool p1Joined Field Value Type Description Boolean p2Joined Declaration public bool p2Joined Field Value Type Description Boolean PID1 Declaration public string PID1 Field Value Type Description String PID2 Declaration public string PID2 Field Value Type Description String"
  },
  "api/Global.BracketsTournamentManager.html": {
    "href": "api/Global.BracketsTournamentManager.html",
    "title": "Class BracketsTournamentManager | Example Unity documentation",
    "keywords": "Class BracketsTournamentManager Inheritance Object BracketsTournamentManager Implements IBracketsTournament IService Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BracketsTournamentManager : MonoBehaviour, IBracketsTournament Fields alreadyRecheckConnection Declaration public bool alreadyRecheckConnection Field Value Type Description Boolean checkTournamentInscription Declaration public CheckTournamentInscription checkTournamentInscription Field Value Type Description CheckTournamentInscription checkTournamentStateController Declaration public CheckTournamentStateController checkTournamentStateController Field Value Type Description CheckTournamentStateController currentStage Declaration public int currentStage Field Value Type Description Int32 onTournamentEnded Declaration public Action onTournamentEnded Field Value Type Description Action tournamentBracketsShowController Declaration public TournamentBracketsShowController tournamentBracketsShowController Field Value Type Description TournamentBracketsShowController Properties CheckTournamentInscription Declaration public CheckTournamentInscription CheckTournamentInscription { get; } Property Value Type Description CheckTournamentInscription CheckTournamentStateController Declaration public CheckTournamentStateController CheckTournamentStateController { get; } Property Value Type Description CheckTournamentStateController OnTournamentEnded Declaration public Action OnTournamentEnded { get; set; } Property Value Type Description Action Methods Awake() Declaration public void Awake() IsReady() Declaration public bool IsReady() Returns Type Description Boolean RecheckConection() Declaration public void RecheckConection() SetAlreadyConnection(Boolean) Declaration public void SetAlreadyConnection(bool state) Parameters Type Name Description Boolean state ShowPanelBracketsView(Boolean) Declaration public void ShowPanelBracketsView(bool active) Parameters Type Name Description Boolean active Implements IBracketsTournament IService"
  },
  "api/Global.CameraPhasesEnum.html": {
    "href": "api/Global.CameraPhasesEnum.html",
    "title": "Enum CameraPhasesEnum | Example Unity documentation",
    "keywords": "Enum CameraPhasesEnum Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum CameraPhasesEnum Fields Name Description PHASE_A PHASE_B PHASE_C PHASE_D"
  },
  "api/Global.CameraPointOfInteresEnum.html": {
    "href": "api/Global.CameraPointOfInteresEnum.html",
    "title": "Enum CameraPointOfInteresEnum | Example Unity documentation",
    "keywords": "Enum CameraPointOfInteresEnum Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum CameraPointOfInteresEnum Fields Name Description ARENA_CENTER ENEMY_SHINSEI PLAYER_SHINSEI"
  },
  "api/Global.CamerasAvailableEnum.html": {
    "href": "api/Global.CamerasAvailableEnum.html",
    "title": "Enum CamerasAvailableEnum | Example Unity documentation",
    "keywords": "Enum CamerasAvailableEnum Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum CamerasAvailableEnum Fields Name Description CENITAL_ENEMY CENITAL_PLAYER DEFAULT_CAMERA FAR_MIDDLE_CAMERA GENERAL_CAMERA LOOK_AT_CAMERA_ENEMY LOOK_AT_CAMERA_PLAYER MIDDLE_CAMERA ORBIT_CAMERA ORBIT_CAMERA_BACK PAN_CAMERA PAN_CAMERA_BACK SIDE_CAMERA_ENEMY SIDE_CAMERA_PLAYER"
  },
  "api/Global.CameraSpawner.html": {
    "href": "api/Global.CameraSpawner.html",
    "title": "Class CameraSpawner | Example Unity documentation",
    "keywords": "Class CameraSpawner Inheritance Object CameraSpawner Namespace : Global Assembly : cs.temp.dll.dll Syntax public class CameraSpawner : MonoBehaviour"
  },
  "api/Global.ChallengePlayerController.html": {
    "href": "api/Global.ChallengePlayerController.html",
    "title": "Class ChallengePlayerController | Example Unity documentation",
    "keywords": "Class ChallengePlayerController Inheritance Object ChallengePlayerController Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ChallengePlayerController : MonoBehaviour Fields bothConfirmed Declaration public bool bothConfirmed Field Value Type Description Boolean checkCount Declaration public int checkCount Field Value Type Description Int32 isRecivingChallenge Declaration public bool isRecivingChallenge Field Value Type Description Boolean onChallengeAgain Declaration public Action onChallengeAgain Field Value Type Description Action Methods BackButtonLogic(Boolean) Declaration public void BackButtonLogic(bool waitCancel = true) Parameters Type Name Description Boolean waitCancel CheckChallenge() Declaration public void CheckChallenge() ConfirmMatch(String) Declaration public void ConfirmMatch(string message) Parameters Type Name Description String message GenerateRandomMatchId() Declaration public string GenerateRandomMatchId() Returns Type Description String GetMatchId(String) Declaration public string GetMatchId(string randomNumber = \"\") Parameters Type Name Description String randomNumber Returns Type Description String GetMatchResultPayload() Declaration public GetMatchResult GetMatchResultPayload() Returns Type Description GetMatchResult MatchCanceledByChallenged(Boolean) Declaration public void MatchCanceledByChallenged(bool showOtherPlayerDeclinePopup) Parameters Type Name Description Boolean showOtherPlayerDeclinePopup MatchCanceledWait(Boolean) Declaration public IEnumerator MatchCanceledWait(bool waitPetitionTime = true) Parameters Type Name Description Boolean waitPetitionTime Returns Type Description IEnumerator RecieveChallenge(ThirdPersonController, String) Declaration public void RecieveChallenge(ThirdPersonController _otherPlayer, string _otherRandomMatchNumber) Parameters Type Name Description ThirdPersonController _otherPlayer String _otherRandomMatchNumber ResetAlreadyHasChallenge() Declaration public void ResetAlreadyHasChallenge() SetMatchIdAndChallengeInPlayerData(String) Declaration public void SetMatchIdAndChallengeInPlayerData(string popupMessage) Parameters Type Name Description String popupMessage SetOtherPlayerInfo(String, String) Declaration public void SetOtherPlayerInfo(string otherPlayerId, string otherPlayerName) Parameters Type Name Description String otherPlayerId String otherPlayerName TimingAcceptChallenge(String, Dictionary<PopupManager.ButtonType, Action>, Boolean) Declaration public IEnumerator TimingAcceptChallenge(string mainMessage, Dictionary<PopupManager.ButtonType, Action> mainButtons, bool isRecievingChallenge) Parameters Type Name Description String mainMessage Dictionary < PopupManager.ButtonType , Action > mainButtons Boolean isRecievingChallenge Returns Type Description IEnumerator WaitforOpponentToConfirm(GetMatchResult) Declaration public IEnumerator WaitforOpponentToConfirm(GetMatchResult matchData) Parameters Type Name Description GetMatchResult matchData Returns Type Description IEnumerator"
  },
  "api/Global.ChangeColor.html": {
    "href": "api/Global.ChangeColor.html",
    "title": "Class ChangeColor | Example Unity documentation",
    "keywords": "Class ChangeColor Inheritance Object ChangeColor Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ChangeColor : MonoBehaviour Fields color Declaration public Gradient color Field Value Type Description Gradient m_changeColor Declaration public Color m_changeColor Field Value Type Description Color m_ColorHandler Declaration public Image m_ColorHandler Field Value Type Description Image m_obj Declaration public GameObject m_obj Field Value Type Description GameObject Methods ChangeEffectColor(Single) Declaration public void ChangeEffectColor(float value) Parameters Type Name Description Single value CheckColorState() Declaration public void CheckColorState() CheckIsColorChange(Boolean) Declaration public void CheckIsColorChange(bool value) Parameters Type Name Description Boolean value"
  },
  "api/Global.ChangeGender.html": {
    "href": "api/Global.ChangeGender.html",
    "title": "Class ChangeGender | Example Unity documentation",
    "keywords": "Class ChangeGender Change between male and female character and update in playfab data Inheritance Object ChangeGender Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ChangeGender : MonoBehaviour Methods SelectGender(Int32) Declaration public void SelectGender(int index) Parameters Type Name Description Int32 index"
  },
  "api/Global.ChangeIconLeague.html": {
    "href": "api/Global.ChangeIconLeague.html",
    "title": "Class ChangeIconLeague | Example Unity documentation",
    "keywords": "Class ChangeIconLeague Inheritance Object ChangeIconLeague Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ChangeIconLeague : MonoBehaviour Methods ChangeIconUsingIndex(Int32) Declaration public void ChangeIconUsingIndex(int index) Parameters Type Name Description Int32 index"
  },
  "api/Global.CharacterAnimBehaviour.html": {
    "href": "api/Global.CharacterAnimBehaviour.html",
    "title": "Class CharacterAnimBehaviour | Example Unity documentation",
    "keywords": "Class CharacterAnimBehaviour Inheritance Object CharacterAnimBehaviour Namespace : Global Assembly : cs.temp.dll.dll Syntax public class CharacterAnimBehaviour : StateMachineBehaviour Methods OnStateMachineEnter(Animator, Int32) Declaration public override void OnStateMachineEnter(Animator animator, int stateMachinePathHash) Parameters Type Name Description Animator animator Int32 stateMachinePathHash"
  },
  "api/Global.CharacterAPI.html": {
    "href": "api/Global.CharacterAPI.html",
    "title": "Class CharacterAPI | Example Unity documentation",
    "keywords": "Class CharacterAPI Inheritance Object CharacterAPI Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class CharacterAPI Fields Accessory Declaration public long Accessory Field Value Type Description Int64 Body Declaration public long Body Field Value Type Description Int64 Ears Declaration public long Ears Field Value Type Description Int64 Head Declaration public long Head Field Value Type Description Int64 Tail Declaration public long Tail Field Value Type Description Int64"
  },
  "api/Global.CharacterColorSlot.html": {
    "href": "api/Global.CharacterColorSlot.html",
    "title": "Class CharacterColorSlot | Example Unity documentation",
    "keywords": "Class CharacterColorSlot UI Element that represents a color for character Inheritance Object CharacterStyleSlot CharacterColorSlot Inherited Members CharacterStyleSlot.OnColorSelected Namespace : Global Assembly : cs.temp.dll.dll Syntax public class CharacterColorSlot : CharacterStyleSlot Fields colorSlotImage Declaration public Image colorSlotImage Field Value Type Description Image Methods InitSlot<T>(T) Declaration public override void InitSlot<T>(T _colorValue) where T : CharacterStyleRelation Parameters Type Name Description T _colorValue Type Parameters Name Description T Overrides CharacterStyleSlot.InitSlot<T>(T) SelectLockedSlot() Declaration public void SelectLockedSlot() SelectSlot() Declaration public void SelectSlot()"
  },
  "api/Global.CharacterDatabase.html": {
    "href": "api/Global.CharacterDatabase.html",
    "title": "Class CharacterDatabase | Example Unity documentation",
    "keywords": "Class CharacterDatabase Inheritance Object CharacterDatabase Namespace : Global Assembly : cs.temp.dll.dll Syntax public class CharacterDatabase : ScriptableObject Properties CaptureImagePath Declaration public string CaptureImagePath { get; } Property Value Type Description String CharacterSlotPrefabsList Declaration public List<CharacterSlot> CharacterSlotPrefabsList { get; } Property Value Type Description List < CharacterSlot > NFTsModels Declaration public NFTsModel[] NFTsModels { get; } Property Value Type Description NFTsModel [] PartEntityModel Declaration public List<PartEntityModel> PartEntityModel { get; } Property Value Type Description List < PartEntityModel > Methods AddCharacterSlotToArray(CharacterSlot) Declaration public void AddCharacterSlotToArray(CharacterSlot _characterSlot) Parameters Type Name Description CharacterSlot _characterSlot AddElement() Declaration public void AddElement() AddPartEntityToArray(PartType, PartEntity) Declaration public void AddPartEntityToArray(PartType _partType, PartEntity _partEntity) Parameters Type Name Description PartType _partType PartEntity _partEntity DetermineEntityRarity(ref PartEntity) Declaration public RarityType DetermineEntityRarity(ref PartEntity _partEntity) Parameters Type Name Description PartEntity _partEntity Returns Type Description RarityType FindPartEntities(GameObject, Action<GameObject>) Declaration public void FindPartEntities(GameObject _referenceGameObject, Action<GameObject> _onGetEntity) Parameters Type Name Description GameObject _referenceGameObject Action < GameObject > _onGetEntity FindPartSlots(GameObject, Action<GameObject>) Declaration public void FindPartSlots(GameObject _referenceGameObject, Action<GameObject> _onGetSlot) Parameters Type Name Description GameObject _referenceGameObject Action < GameObject > _onGetSlot FindPartTypeInName(GameObject) Declaration public PartType FindPartTypeInName(GameObject _referenceGameObject) Parameters Type Name Description GameObject _referenceGameObject Returns Type Description PartType GetNFT(String[]) Declaration public NFTsModel[] GetNFT(string[] _nftsIDs) Parameters Type Name Description String [] _nftsIDs Returns Type Description NFTsModel [] RemoveEmptyCharacterPrefabs() Declaration public void RemoveEmptyCharacterPrefabs()"
  },
  "api/Global.CharacterSelectorController.html": {
    "href": "api/Global.CharacterSelectorController.html",
    "title": "Class CharacterSelectorController | Example Unity documentation",
    "keywords": "Class CharacterSelectorController Inheritance Object CharacterSelectorController Namespace : Global Assembly : cs.temp.dll.dll Syntax public class CharacterSelectorController : MonoBehaviour Fields characterContainer Declaration public Transform characterContainer Field Value Type Description Transform characterSelectorContainer Declaration public Transform characterSelectorContainer Field Value Type Description Transform characterSelectorPrefab Declaration public CharacterSelector characterSelectorPrefab Field Value Type Description CharacterSelector partSelectorContainer Declaration public Transform partSelectorContainer Field Value Type Description Transform partSelectorPrefab Declaration public PartSelector partSelectorPrefab Field Value Type Description PartSelector randomButton Declaration public Button randomButton Field Value Type Description Button Methods GetCharacterUniqueID() Declaration public void GetCharacterUniqueID() OnButtonPress(Boolean, PartSlot, PartSelector) Declaration public void OnButtonPress(bool _isLeftButton, PartSlot _dummyBodyPart, PartSelector _dummyPartSelector) Parameters Type Name Description Boolean _isLeftButton PartSlot _dummyBodyPart PartSelector _dummyPartSelector OnRandomSelect() Declaration public void OnRandomSelect() SelectCharacter(Int32) Declaration public void SelectCharacter(int _characterIndex) Parameters Type Name Description Int32 _characterIndex"
  },
  "api/Global.CharacterStyleInfo.html": {
    "href": "api/Global.CharacterStyleInfo.html",
    "title": "Class CharacterStyleInfo | Example Unity documentation",
    "keywords": "Class CharacterStyleInfo Inheritance Object CharacterStyleInfo Namespace : Global Assembly : cs.temp.dll.dll Syntax public class CharacterStyleInfo Fields colorHex Declaration public string colorHex Field Value Type Description String presetId Declaration public int presetId Field Value Type Description Int32"
  },
  "api/Global.CharacterStyleRelation.html": {
    "href": "api/Global.CharacterStyleRelation.html",
    "title": "Class CharacterStyleRelation | Example Unity documentation",
    "keywords": "Class CharacterStyleRelation Inheritance Object CharacterStyleRelation ColorIdRelation PartIdRelation Namespace : Global Assembly : cs.temp.dll.dll Syntax public class CharacterStyleRelation Fields id Declaration public int id Field Value Type Description Int32"
  },
  "api/Global.CharacterStyleSlot.html": {
    "href": "api/Global.CharacterStyleSlot.html",
    "title": "Class CharacterStyleSlot | Example Unity documentation",
    "keywords": "Class CharacterStyleSlot Inheritance Object CharacterStyleSlot CharacterColorSlot Namespace : Global Assembly : cs.temp.dll.dll Syntax public abstract class CharacterStyleSlot : MonoBehaviour Fields OnColorSelected Declaration public Action<CharacterStyleRelation> OnColorSelected Field Value Type Description Action < CharacterStyleRelation > Methods InitSlot<T>(T) Declaration public abstract void InitSlot<T>(T _colorValue) where T : CharacterStyleRelation Parameters Type Name Description T _colorValue Type Parameters Name Description T"
  },
  "api/Global.ChatBadWordsDB.html": {
    "href": "api/Global.ChatBadWordsDB.html",
    "title": "Struct ChatBadWordsDB | Example Unity documentation",
    "keywords": "Struct ChatBadWordsDB Namespace : Global Assembly : cs.temp.dll.dll Syntax public struct ChatBadWordsDB Fields listOfBadWords Declaration public List<List<string>> listOfBadWords Field Value Type Description List < List < String >>"
  },
  "api/Global.ChatTextBox.html": {
    "href": "api/Global.ChatTextBox.html",
    "title": "Class ChatTextBox | Example Unity documentation",
    "keywords": "Class ChatTextBox Chat behavior, send messages and show in a UI Elements Inheritance Object ChatTextBox Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ChatTextBox : TextboxBase Fields alreadyWriteMessages Declaration public List<string> alreadyWriteMessages Field Value Type Description List < String > badWordsDB Declaration public ChatBadWordsDB badWordsDB Field Value Type Description ChatBadWordsDB filter Declaration public GameObject filter Field Value Type Description GameObject isReady Declaration public bool isReady Field Value Type Description Boolean OnEndEditing Declaration public Action OnEndEditing Field Value Type Description Action OnStartEditing Declaration public Action OnStartEditing Field Value Type Description Action system Declaration public EventSystem system Field Value Type Description EventSystem Methods CallEndEditing() Declaration public void CallEndEditing() CallStartEditing() Declaration public void CallStartEditing() CheckForBadWords(String) Declaration public string CheckForBadWords(string message) Parameters Type Name Description String message Returns Type Description String DisableMovement(Boolean) Declaration public void DisableMovement(bool newState) Parameters Type Name Description Boolean newState SendLocalMessage() Declaration public void SendLocalMessage() SendMessage(ChatMessagePayload, String) Declaration public void SendMessage(ChatMessagePayload chatMessage, string from) Parameters Type Name Description ChatMessagePayload chatMessage String from SendMessage(ChatMessagePayload, String, Boolean) Declaration public void SendMessage(ChatMessagePayload chatMessage, string displayName, bool isAdmin = false) Parameters Type Name Description ChatMessagePayload chatMessage String displayName Boolean isAdmin ShowHide(Boolean) Declaration public void ShowHide(bool state) Parameters Type Name Description Boolean state ToggleShowFilter() Declaration public void ToggleShowFilter() Update() Declaration public void Update()"
  },
  "api/Global.CheckStateOfTournamentDto.html": {
    "href": "api/Global.CheckStateOfTournamentDto.html",
    "title": "Class CheckStateOfTournamentDto | Example Unity documentation",
    "keywords": "Class CheckStateOfTournamentDto Inheritance Object CheckStateOfTournamentDto Namespace : Global Assembly : cs.temp.dll.dll Syntax public class CheckStateOfTournamentDto Fields alredyPlayedPlayers Declaration public List<string> alredyPlayedPlayers Field Value Type Description List < String > currentStage Declaration public int currentStage Field Value Type Description Int32 nextRoundInitTime Declaration public string nextRoundInitTime Field Value Type Description String"
  },
  "api/Global.CheckTournamentInscription.html": {
    "href": "api/Global.CheckTournamentInscription.html",
    "title": "Class CheckTournamentInscription | Example Unity documentation",
    "keywords": "Class CheckTournamentInscription Allow hide all objects innecesary in tournament mode, only visual results Inheritance Object CheckTournamentInscription Namespace : Global Assembly : cs.temp.dll.dll Syntax public class CheckTournamentInscription : MonoBehaviour Fields hasAlreadyRecheckConnection Declaration public bool hasAlreadyRecheckConnection Field Value Type Description Boolean onCheckIfTournamentExist Declaration public Action onCheckIfTournamentExist Field Value Type Description Action Methods DisableObjectsInTournament(Boolean) Declaration public void DisableObjectsInTournament(bool state) Parameters Type Name Description Boolean state EnableNPCs() Declaration public void EnableNPCs()"
  },
  "api/Global.CheckTournamentStateController.html": {
    "href": "api/Global.CheckTournamentStateController.html",
    "title": "Class CheckTournamentStateController | Example Unity documentation",
    "keywords": "Class CheckTournamentStateController Inheritance Object CheckTournamentStateController Namespace : Global Assembly : cs.temp.dll.dll Syntax public class CheckTournamentStateController : MonoBehaviour Fields petitonTimeRate Declaration public float petitonTimeRate Field Value Type Description Single Methods CheckTournamentState(Nullable<Boolean>, Boolean) Declaration public void CheckTournamentState(bool? isLocalPlayerWon = null, bool shouldCheckWinByDefault = false) Parameters Type Name Description Nullable < Boolean > isLocalPlayerWon Boolean shouldCheckWinByDefault WaitForSeconds(Single, Action) Declaration public IEnumerator WaitForSeconds(float seconds, Action callback) Parameters Type Name Description Single seconds Action callback Returns Type Description IEnumerator"
  },
  "api/Global.ColorIdRelation.html": {
    "href": "api/Global.ColorIdRelation.html",
    "title": "Class ColorIdRelation | Example Unity documentation",
    "keywords": "Class ColorIdRelation Inheritance Object CharacterStyleRelation ColorIdRelation Inherited Members CharacterStyleRelation.id Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class ColorIdRelation : CharacterStyleRelation Fields color Declaration public Color color Field Value Type Description Color usableOnParts Declaration public List<PartsOfCharacter> usableOnParts Field Value Type Description List < PartsOfCharacter >"
  },
  "api/Global.ColorSO.html": {
    "href": "api/Global.ColorSO.html",
    "title": "Class ColorSO | Example Unity documentation",
    "keywords": "Class ColorSO Inheritance Object ColorSO Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ColorSO : ScriptableObject Fields _paletteColor Declaration public Color32[] _paletteColor Field Value Type Description Color32 []"
  },
  "api/Global.ColorsSO.html": {
    "href": "api/Global.ColorsSO.html",
    "title": "Class ColorsSO | Example Unity documentation",
    "keywords": "Class ColorsSO Inheritance Object ColorsSO Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ColorsSO : ScriptableObject Fields _palettes Declaration public ColorSO[] _palettes Field Value Type Description ColorSO []"
  },
  "api/Global.ColorSwapper.html": {
    "href": "api/Global.ColorSwapper.html",
    "title": "Class ColorSwapper | Example Unity documentation",
    "keywords": "Class ColorSwapper Inheritance Object Utils.Singleton Utils.Singleton < ColorSwapper > ColorSwapper Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ColorSwapper : Singleton<ColorSwapper> Fields _colorsScriptableObject Declaration public ColorsSO _colorsScriptableObject Field Value Type Description ColorsSO _dontTakePhoto Declaration public bool _dontTakePhoto Field Value Type Description Boolean _partMaterials Declaration public List<Material> _partMaterials Field Value Type Description List < Material > PaletteID Declaration public string PaletteID Field Value Type Description String partVisuals Declaration public List<PartVisual> partVisuals Field Value Type Description List < PartVisual > Methods AddItemToPVL(PartVisual) Declaration public void AddItemToPVL(PartVisual PV) Parameters Type Name Description PartVisual PV ChangeMaterial() Declaration public void ChangeMaterial()"
  },
  "api/Global.Constants.html": {
    "href": "api/Global.Constants.html",
    "title": "Class Constants | Example Unity documentation",
    "keywords": "Class Constants Inheritance Object Constants Namespace : Global Assembly : cs.temp.dll.dll Syntax public static class Constants Fields CARD_STORE Declaration public const string CARD_STORE = \"CardStore\" Field Value Type Description String CHARACTER_STYLE Declaration public const string CHARACTER_STYLE = \"CharacterStyle\" Field Value Type Description String FRIENDLY_LEADERBOARD Declaration public const string FRIENDLY_LEADERBOARD = \"Victories\" Field Value Type Description String FRIENDLY_MATCH Declaration public const string FRIENDLY_MATCH = \"FriendlyMatch\" Field Value Type Description String SHINSEI_COMPANION Declaration public const string SHINSEI_COMPANION = \"ShinseiCompanion\" Field Value Type Description String SHINSEI_SLOT Declaration public const string SHINSEI_SLOT = \"ShinseiSlot\" Field Value Type Description String SHINSEI_VAULT Declaration public const string SHINSEI_VAULT = \"ShinseiVault\" Field Value Type Description String TITLE_ID Declaration public const string TITLE_ID = \"BFDDE\" Field Value Type Description String"
  },
  "api/Global.Cooker.html": {
    "href": "api/Global.Cooker.html",
    "title": "Class Cooker | Example Unity documentation",
    "keywords": "Class Cooker This script controls the behavior of npc cooker in the bar Inheritance Object Cooker Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Cooker : MonoBehaviour Fields layerMaskForCook Declaration public LayerMask layerMaskForCook Field Value Type Description LayerMask Methods GetFood(Int32) Playback the cooking animations Declaration public void GetFood(int type) Parameters Type Name Description Int32 type Hide() Put camera settings to normal values Declaration public void Hide() Show() Set camera setting for cooking event Declaration public void Show()"
  },
  "api/Global.Courtain.html": {
    "href": "api/Global.Courtain.html",
    "title": "Class Courtain | Example Unity documentation",
    "keywords": "Class Courtain A component that make a black transition Inheritance Object Courtain Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Courtain : MonoBehaviour Methods StartFade(Int32) Declaration public void StartFade(int transitionDuration) Parameters Type Name Description Int32 transitionDuration"
  },
  "api/Global.CreateBotsController.html": {
    "href": "api/Global.CreateBotsController.html",
    "title": "Class CreateBotsController | Example Unity documentation",
    "keywords": "Class CreateBotsController Inheritance Object CreateBotsController Namespace : Global Assembly : cs.temp.dll.dll Syntax public class CreateBotsController : MonoBehaviour Fields botPlayfabIdsList Declaration public BotPlayfabIdsList botPlayfabIdsList Field Value Type Description BotPlayfabIdsList lastBotIndex Declaration public int lastBotIndex Field Value Type Description Int32 numberOfBotsToCreate Declaration public int numberOfBotsToCreate Field Value Type Description Int32 Methods CreateBots() Declaration public void CreateBots() SetInitNumber() Declaration public void SetInitNumber() SignUp(String, String, String) Declaration public void SignUp(string userName, string userEmail, string password) Parameters Type Name Description String userName String userEmail String password Start() Declaration public void Start()"
  },
  "api/Global.CriticsCheck.html": {
    "href": "api/Global.CriticsCheck.html",
    "title": "Enum CriticsCheck | Example Unity documentation",
    "keywords": "Enum CriticsCheck Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum CriticsCheck Fields Name Description Is_Sleep"
  },
  "api/Global.csEffect_03_ArrowFunction.html": {
    "href": "api/Global.csEffect_03_ArrowFunction.html",
    "title": "Class csEffect_03_ArrowFunction | Example Unity documentation",
    "keywords": "Class csEffect_03_ArrowFunction Inheritance Object csEffect_03_ArrowFunction Namespace : Global Assembly : cs.temp.dll.dll Syntax public class csEffect_03_ArrowFunction : MonoBehaviour Fields m_durationTime Declaration public float m_durationTime Field Value Type Description Single m_lerpValue Declaration public float m_lerpValue Field Value Type Description Single m_makeObj Declaration public GameObject m_makeObj Field Value Type Description GameObject m_objectDestroyTime Declaration public float m_objectDestroyTime Field Value Type Description Single m_origianlPosSet Declaration public Vector3 m_origianlPosSet Field Value Type Description Vector3"
  },
  "api/Global.csEffect_03_ObjectMake.html": {
    "href": "api/Global.csEffect_03_ObjectMake.html",
    "title": "Class csEffect_03_ObjectMake | Example Unity documentation",
    "keywords": "Class csEffect_03_ObjectMake Inheritance Object csEffect_03_ObjectMake Namespace : Global Assembly : cs.temp.dll.dll Syntax public class csEffect_03_ObjectMake : MonoBehaviour Fields m_destroyTime Declaration public float m_destroyTime Field Value Type Description Single m_makeCount Declaration public int m_makeCount Field Value Type Description Int32 m_makeDelay Declaration public float m_makeDelay Field Value Type Description Single m_makeObjs Declaration public GameObject[] m_makeObjs Field Value Type Description GameObject [] m_makePos Declaration public Transform m_makePos Field Value Type Description Transform m_startDelay Declaration public float m_startDelay Field Value Type Description Single m_vectorRandom Declaration public Vector3 m_vectorRandom Field Value Type Description Vector3"
  },
  "api/Global.csEffect_76_Animation.html": {
    "href": "api/Global.csEffect_76_Animation.html",
    "title": "Class csEffect_76_Animation | Example Unity documentation",
    "keywords": "Class csEffect_76_Animation Inheritance Object csEffect_76_Animation Namespace : Global Assembly : cs.temp.dll.dll Syntax public class csEffect_76_Animation : MonoBehaviour Fields m_downYPos Declaration public float m_downYPos Field Value Type Description Single m_durationTime Declaration public float m_durationTime Field Value Type Description Single m_firstLerpValue Declaration public float m_firstLerpValue Field Value Type Description Single m_lookAtTime Declaration public float m_lookAtTime Field Value Type Description Single m_onlyYValueMove Declaration public bool m_onlyYValueMove Field Value Type Description Boolean m_particleDestroyTime Declaration public float m_particleDestroyTime Field Value Type Description Single m_particleObject Declaration public GameObject m_particleObject Field Value Type Description GameObject m_secondLerpValue Declaration public float m_secondLerpValue Field Value Type Description Single m_secondMovePos Declaration public Vector3 m_secondMovePos Field Value Type Description Vector3 m_secondMoveTime Declaration public float m_secondMoveTime Field Value Type Description Single m_y_randomValue Declaration public float m_y_randomValue Field Value Type Description Single m_y_StopPos Declaration public float m_y_StopPos Field Value Type Description Single"
  },
  "api/Global.csEffect_76_CircleSwordMake.html": {
    "href": "api/Global.csEffect_76_CircleSwordMake.html",
    "title": "Class csEffect_76_CircleSwordMake | Example Unity documentation",
    "keywords": "Class csEffect_76_CircleSwordMake Inheritance Object csEffect_76_CircleSwordMake Namespace : Global Assembly : cs.temp.dll.dll Syntax public class csEffect_76_CircleSwordMake : MonoBehaviour Fields m_DestroyTime Declaration public float m_DestroyTime Field Value Type Description Single m_gameObject Declaration public GameObject m_gameObject Field Value Type Description GameObject m_interval Declaration public float m_interval Field Value Type Description Single m_makePoint Declaration public Transform m_makePoint Field Value Type Description Transform m_object_MakeCount Declaration public int m_object_MakeCount Field Value Type Description Int32 m_object_MakeDelay Declaration public float m_object_MakeDelay Field Value Type Description Single m_startDelay Declaration public float m_startDelay Field Value Type Description Single m_yAddedPos Declaration public float m_yAddedPos Field Value Type Description Single"
  },
  "api/Global.csEffect_76_FloatingSwordMake.html": {
    "href": "api/Global.csEffect_76_FloatingSwordMake.html",
    "title": "Class csEffect_76_FloatingSwordMake | Example Unity documentation",
    "keywords": "Class csEffect_76_FloatingSwordMake Inheritance Object csEffect_76_FloatingSwordMake Namespace : Global Assembly : cs.temp.dll.dll Syntax public class csEffect_76_FloatingSwordMake : MonoBehaviour Fields m_DestroyTime Declaration public float m_DestroyTime Field Value Type Description Single m_gameObject Declaration public GameObject m_gameObject Field Value Type Description GameObject m_makePoint Declaration public Transform m_makePoint Field Value Type Description Transform m_movePoint Declaration public Transform m_movePoint Field Value Type Description Transform m_object_MakeCount Declaration public int m_object_MakeCount Field Value Type Description Int32 m_object_MakeDelay Declaration public float m_object_MakeDelay Field Value Type Description Single m_randomValue Declaration public Vector3 m_randomValue Field Value Type Description Vector3"
  },
  "api/Global.csEffect_77_HandMove.html": {
    "href": "api/Global.csEffect_77_HandMove.html",
    "title": "Class csEffect_77_HandMove | Example Unity documentation",
    "keywords": "Class csEffect_77_HandMove Inheritance Object csEffect_77_HandMove Namespace : Global Assembly : cs.temp.dll.dll Syntax public class csEffect_77_HandMove : MonoBehaviour Fields m_lerpValue Declaration public float m_lerpValue Field Value Type Description Single m_movePos Declaration public Transform m_movePos Field Value Type Description Transform"
  },
  "api/Global.csEffect_77_ObjectMake.html": {
    "href": "api/Global.csEffect_77_ObjectMake.html",
    "title": "Class csEffect_77_ObjectMake | Example Unity documentation",
    "keywords": "Class csEffect_77_ObjectMake Inheritance Object csEffect_77_ObjectMake Namespace : Global Assembly : cs.temp.dll.dll Syntax public class csEffect_77_ObjectMake : MonoBehaviour Fields m_addedPos Declaration public Vector3 m_addedPos Field Value Type Description Vector3 m_destroyTime Declaration public float m_destroyTime Field Value Type Description Single m_makeDelay Declaration public float m_makeDelay Field Value Type Description Single m_makeDuration Declaration public float m_makeDuration Field Value Type Description Single m_makeObj Declaration public GameObject m_makeObj Field Value Type Description GameObject"
  },
  "api/Global.csEffect_77_ObjectMake2.html": {
    "href": "api/Global.csEffect_77_ObjectMake2.html",
    "title": "Class csEffect_77_ObjectMake2 | Example Unity documentation",
    "keywords": "Class csEffect_77_ObjectMake2 Inheritance Object csEffect_77_ObjectMake2 Namespace : Global Assembly : cs.temp.dll.dll Syntax public class csEffect_77_ObjectMake2 : MonoBehaviour Fields m_destroyTime Declaration public float m_destroyTime Field Value Type Description Single m_makeObj Declaration public GameObject m_makeObj Field Value Type Description GameObject m_startDelay Declaration public float m_startDelay Field Value Type Description Single"
  },
  "api/Global.csEffect_79_CircleMake.html": {
    "href": "api/Global.csEffect_79_CircleMake.html",
    "title": "Class csEffect_79_CircleMake | Example Unity documentation",
    "keywords": "Class csEffect_79_CircleMake Inheritance Object csEffect_79_CircleMake Namespace : Global Assembly : cs.temp.dll.dll Syntax public class csEffect_79_CircleMake : MonoBehaviour Fields m_DestroyTime Declaration public float m_DestroyTime Field Value Type Description Single m_gameObject Declaration public GameObject m_gameObject Field Value Type Description GameObject m_interval Declaration public float m_interval Field Value Type Description Single m_makePoint Declaration public Transform m_makePoint Field Value Type Description Transform m_object_MakeCount Declaration public int m_object_MakeCount Field Value Type Description Int32 m_object_MakeDelay Declaration public float m_object_MakeDelay Field Value Type Description Single m_startDelay Declaration public float m_startDelay Field Value Type Description Single m_yAddedPos Declaration public float m_yAddedPos Field Value Type Description Single"
  },
  "api/Global.csEffect_79_WallRiseDown.html": {
    "href": "api/Global.csEffect_79_WallRiseDown.html",
    "title": "Class csEffect_79_WallRiseDown | Example Unity documentation",
    "keywords": "Class csEffect_79_WallRiseDown Inheritance Object csEffect_79_WallRiseDown Namespace : Global Assembly : cs.temp.dll.dll Syntax public class csEffect_79_WallRiseDown : MonoBehaviour Fields m_durationTime Declaration public float m_durationTime Field Value Type Description Single m_lerpTime Declaration public float m_lerpTime Field Value Type Description Single m_y_Pos Declaration public float m_y_Pos Field Value Type Description Single"
  },
  "api/Global.csEffect_80_SunMove.html": {
    "href": "api/Global.csEffect_80_SunMove.html",
    "title": "Class csEffect_80_SunMove | Example Unity documentation",
    "keywords": "Class csEffect_80_SunMove Inheritance Object csEffect_80_SunMove Namespace : Global Assembly : cs.temp.dll.dll Syntax public class csEffect_80_SunMove : MonoBehaviour Fields DestroyTime Declaration public float DestroyTime Field Value Type Description Single m_lerpValue Declaration public float m_lerpValue Field Value Type Description Single m_movePos Declaration public Transform m_movePos Field Value Type Description Transform"
  },
  "api/Global.csEffectScene.html": {
    "href": "api/Global.csEffectScene.html",
    "title": "Class csEffectScene | Example Unity documentation",
    "keywords": "Class csEffectScene Inheritance Object csEffectScene Namespace : Global Assembly : cs.temp.dll.dll Syntax public class csEffectScene : MonoBehaviour Fields inputLocation Declaration public static int inputLocation Field Value Type Description Int32 m_destroyObjects Declaration public static GameObject[] m_destroyObjects Field Value Type Description GameObject [] m_effectName Declaration public Text m_effectName Field Value Type Description Text m_effects Declaration public Transform[] m_effects Field Value Type Description Transform [] m_explain Declaration public Text m_explain Field Value Type Description Text m_packageName Declaration public Text m_packageName Field Value Type Description Text m_version Declaration public Text m_version Field Value Type Description Text"
  },
  "api/Global.csLaser.html": {
    "href": "api/Global.csLaser.html",
    "title": "Class csLaser | Example Unity documentation",
    "keywords": "Class csLaser Inheritance Object csLaser Namespace : Global Assembly : cs.temp.dll.dll Syntax public class csLaser : MonoBehaviour Fields _Material Declaration public Material _Material Field Value Type Description Material LaserHitEffect Declaration public Transform LaserHitEffect Field Value Type Description Transform MaxLength Declaration public float MaxLength Field Value Type Description Single MaxTime Declaration public float MaxTime Field Value Type Description Single Offset Declaration public float Offset Field Value Type Description Single shrinkValue Declaration public float shrinkValue Field Value Type Description Single Width Declaration public float Width Field Value Type Description Single"
  },
  "api/Global.csLookAt.html": {
    "href": "api/Global.csLookAt.html",
    "title": "Class csLookAt | Example Unity documentation",
    "keywords": "Class csLookAt Inheritance Object csLookAt Namespace : Global Assembly : cs.temp.dll.dll Syntax public class csLookAt : MonoBehaviour Fields ts Declaration public Transform ts Field Value Type Description Transform"
  },
  "api/Global.csMaterial_Change.html": {
    "href": "api/Global.csMaterial_Change.html",
    "title": "Class csMaterial_Change | Example Unity documentation",
    "keywords": "Class csMaterial_Change Inheritance Object csMaterial_Change Namespace : Global Assembly : cs.temp.dll.dll Syntax public class csMaterial_Change : MonoBehaviour Fields m_inputMaterial Declaration public Material m_inputMaterial Field Value Type Description Material m_reduceFactor Declaration public float m_reduceFactor Field Value Type Description Single m_startFactor Declaration public float m_startFactor Field Value Type Description Single m_timeToReduce Declaration public float m_timeToReduce Field Value Type Description Single m_timeToStart Declaration public float m_timeToStart Field Value Type Description Single Methods SetTime(Single, Boolean) Declaration public void SetTime(float _Duration, bool _Loop) Parameters Type Name Description Single _Duration Boolean _Loop"
  },
  "api/Global.csMouseOrbit.html": {
    "href": "api/Global.csMouseOrbit.html",
    "title": "Class csMouseOrbit | Example Unity documentation",
    "keywords": "Class csMouseOrbit Inheritance Object csMouseOrbit Namespace : Global Assembly : cs.temp.dll.dll Syntax public class csMouseOrbit : MonoBehaviour Fields CameraDist Declaration public float CameraDist Field Value Type Description Single distance Declaration public float distance Field Value Type Description Single Target Declaration public Transform Target Field Value Type Description Transform xSpeed Declaration public float xSpeed Field Value Type Description Single yMaxLimit Declaration public float yMaxLimit Field Value Type Description Single yMinLimit Declaration public float yMinLimit Field Value Type Description Single ySpeed Declaration public float ySpeed Field Value Type Description Single"
  },
  "api/Global.csMove.html": {
    "href": "api/Global.csMove.html",
    "title": "Class csMove | Example Unity documentation",
    "keywords": "Class csMove Inheritance Object csMove Namespace : Global Assembly : cs.temp.dll.dll Syntax public class csMove : MonoBehaviour Fields MoveSpeed Declaration public float MoveSpeed Field Value Type Description Single"
  },
  "api/Global.csObjectMake.html": {
    "href": "api/Global.csObjectMake.html",
    "title": "Class csObjectMake | Example Unity documentation",
    "keywords": "Class csObjectMake Inheritance Object csObjectMake Namespace : Global Assembly : cs.temp.dll.dll Syntax public class csObjectMake : MonoBehaviour Fields Delay Declaration public float Delay Field Value Type Description Single m_gameObject Declaration public GameObject m_gameObject Field Value Type Description GameObject MaxRage Declaration public float MaxRage Field Value Type Description Single"
  },
  "api/Global.csObjectMake2.html": {
    "href": "api/Global.csObjectMake2.html",
    "title": "Class csObjectMake2 | Example Unity documentation",
    "keywords": "Class csObjectMake2 Inheritance Object csObjectMake2 Namespace : Global Assembly : cs.temp.dll.dll Syntax public class csObjectMake2 : MonoBehaviour Fields isMinusZ Declaration public bool isMinusZ Field Value Type Description Boolean isX Declaration public bool isX Field Value Type Description Boolean isY Declaration public bool isY Field Value Type Description Boolean isZ Declaration public bool isZ Field Value Type Description Boolean m_gameObject Declaration public GameObject m_gameObject Field Value Type Description GameObject m_object_MakeCount Declaration public int m_object_MakeCount Field Value Type Description Int32 m_object_MakeDelay Declaration public float m_object_MakeDelay Field Value Type Description Single m_object_MakeRange Declaration public float m_object_MakeRange Field Value Type Description Single m_startDelay Declaration public float m_startDelay Field Value Type Description Single"
  },
  "api/Global.csObjectMake3.html": {
    "href": "api/Global.csObjectMake3.html",
    "title": "Class csObjectMake3 | Example Unity documentation",
    "keywords": "Class csObjectMake3 Inheritance Object csObjectMake3 Namespace : Global Assembly : cs.temp.dll.dll Syntax public class csObjectMake3 : MonoBehaviour Fields m_destroyTime Declaration public float m_destroyTime Field Value Type Description Single m_durationTime Declaration public float m_durationTime Field Value Type Description Single m_gameObject Declaration public GameObject m_gameObject Field Value Type Description GameObject m_makeDelay Declaration public float m_makeDelay Field Value Type Description Single m_makePositions Declaration public Transform[] m_makePositions Field Value Type Description Transform []"
  },
  "api/Global.csObjectMake4.html": {
    "href": "api/Global.csObjectMake4.html",
    "title": "Class csObjectMake4 | Example Unity documentation",
    "keywords": "Class csObjectMake4 Inheritance Object csObjectMake4 Namespace : Global Assembly : cs.temp.dll.dll Syntax public class csObjectMake4 : MonoBehaviour Fields m_gameObject Declaration public GameObject m_gameObject Field Value Type Description GameObject MakeCount Declaration public int MakeCount Field Value Type Description Int32 MaxCount Declaration public float MaxCount Field Value Type Description Single MaxRage Declaration public float MaxRage Field Value Type Description Single MaxTime Declaration public float MaxTime Field Value Type Description Single"
  },
  "api/Global.csObjectMake5.html": {
    "href": "api/Global.csObjectMake5.html",
    "title": "Class csObjectMake5 | Example Unity documentation",
    "keywords": "Class csObjectMake5 Inheritance Object csObjectMake5 Namespace : Global Assembly : cs.temp.dll.dll Syntax public class csObjectMake5 : MonoBehaviour Fields m_destroyTime Declaration public float m_destroyTime Field Value Type Description Single m_gameObject Declaration public GameObject m_gameObject Field Value Type Description GameObject m_isCrossMake Declaration public bool m_isCrossMake Field Value Type Description Boolean m_object_MakeCount Declaration public float m_object_MakeCount Field Value Type Description Single m_object_MakeDelay Declaration public float m_object_MakeDelay Field Value Type Description Single m_objectSize Declaration public float m_objectSize Field Value Type Description Single m_subtractYValue Declaration public float m_subtractYValue Field Value Type Description Single"
  },
  "api/Global.csObjectMake6.html": {
    "href": "api/Global.csObjectMake6.html",
    "title": "Class csObjectMake6 | Example Unity documentation",
    "keywords": "Class csObjectMake6 Inheritance Object csObjectMake6 Namespace : Global Assembly : cs.temp.dll.dll Syntax public class csObjectMake6 : MonoBehaviour Fields m_DestroyTime Declaration public float m_DestroyTime Field Value Type Description Single m_gameObject Declaration public GameObject m_gameObject Field Value Type Description GameObject m_interval Declaration public float m_interval Field Value Type Description Single m_object_MakeCount Declaration public int m_object_MakeCount Field Value Type Description Int32 m_object_MakeDelay Declaration public float m_object_MakeDelay Field Value Type Description Single m_yPos Declaration public float m_yPos Field Value Type Description Single"
  },
  "api/Global.csObjectMoveDestroy.html": {
    "href": "api/Global.csObjectMoveDestroy.html",
    "title": "Class csObjectMoveDestroy | Example Unity documentation",
    "keywords": "Class csObjectMoveDestroy Inheritance Object csObjectMoveDestroy Namespace : Global Assembly : cs.temp.dll.dll Syntax public class csObjectMoveDestroy : MonoBehaviour Fields DestroyTime Declaration public float DestroyTime Field Value Type Description Single DestroyTime2 Declaration public float DestroyTime2 Field Value Type Description Single m_gameObjectMain Declaration public GameObject m_gameObjectMain Field Value Type Description GameObject m_gameObjectTail Declaration public GameObject m_gameObjectTail Field Value Type Description GameObject m_hitObject Declaration public Transform m_hitObject Field Value Type Description Transform maxLength Declaration public float maxLength Field Value Type Description Single maxTime Declaration public float maxTime Field Value Type Description Single MoveSpeed Declaration public float MoveSpeed Field Value Type Description Single"
  },
  "api/Global.csObjectMoveDestroy2.html": {
    "href": "api/Global.csObjectMoveDestroy2.html",
    "title": "Class csObjectMoveDestroy2 | Example Unity documentation",
    "keywords": "Class csObjectMoveDestroy2 Inheritance Object csObjectMoveDestroy2 Namespace : Global Assembly : cs.temp.dll.dll Syntax public class csObjectMoveDestroy2 : MonoBehaviour Fields DestroyTime Declaration public float DestroyTime Field Value Type Description Single m_gameObjectMain Declaration public GameObject m_gameObjectMain Field Value Type Description GameObject m_gameObjectTail Declaration public GameObject m_gameObjectTail Field Value Type Description GameObject maxTime Declaration public float maxTime Field Value Type Description Single MoveSpeed Declaration public float MoveSpeed Field Value Type Description Single"
  },
  "api/Global.csParticleStop.html": {
    "href": "api/Global.csParticleStop.html",
    "title": "Class csParticleStop | Example Unity documentation",
    "keywords": "Class csParticleStop Inheritance Object csParticleStop Namespace : Global Assembly : cs.temp.dll.dll Syntax public class csParticleStop : MonoBehaviour Fields m_particleMembers Declaration public ParticleSystem[] m_particleMembers Field Value Type Description ParticleSystem [] m_stopTime Declaration public float m_stopTime Field Value Type Description Single"
  },
  "api/Global.csRiseDown.html": {
    "href": "api/Global.csRiseDown.html",
    "title": "Class csRiseDown | Example Unity documentation",
    "keywords": "Class csRiseDown Inheritance Object csRiseDown Namespace : Global Assembly : cs.temp.dll.dll Syntax public class csRiseDown : MonoBehaviour Fields m_durationTime Declaration public float m_durationTime Field Value Type Description Single m_endTime Declaration public float m_endTime Field Value Type Description Single m_lerpTime Declaration public float m_lerpTime Field Value Type Description Single m_startTime Declaration public float m_startTime Field Value Type Description Single m_y_Value Declaration public float m_y_Value Field Value Type Description Single"
  },
  "api/Global.csRotate.html": {
    "href": "api/Global.csRotate.html",
    "title": "Class csRotate | Example Unity documentation",
    "keywords": "Class csRotate Inheritance Object csRotate Namespace : Global Assembly : cs.temp.dll.dll Syntax public class csRotate : MonoBehaviour Fields RotateOffset Declaration public Vector3 RotateOffset Field Value Type Description Vector3"
  },
  "api/Global.csScaleChange.html": {
    "href": "api/Global.csScaleChange.html",
    "title": "Class csScaleChange | Example Unity documentation",
    "keywords": "Class csScaleChange Inheritance Object csScaleChange Namespace : Global Assembly : cs.temp.dll.dll Syntax public class csScaleChange : MonoBehaviour Fields isScaleUp Declaration public bool isScaleUp Field Value Type Description Boolean m_startTime Declaration public float m_startTime Field Value Type Description Single m_Weight Declaration public float m_Weight Field Value Type Description Single"
  },
  "api/Global.CustomRampGeneratorEditor.html": {
    "href": "api/Global.CustomRampGeneratorEditor.html",
    "title": "Class CustomRampGeneratorEditor | Example Unity documentation",
    "keywords": "Class CustomRampGeneratorEditor Inheritance Object CustomRampGeneratorEditor Namespace : Global Assembly : cs.temp.dll.dll Syntax public class CustomRampGeneratorEditor : Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Global.Decolorator.html": {
    "href": "api/Global.Decolorator.html",
    "title": "Class Decolorator | Example Unity documentation",
    "keywords": "Class Decolorator Inheritance Object Decolorator Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Decolorator : MonoBehaviour Fields computeShader Declaration public ComputeShader computeShader Field Value Type Description ComputeShader imageList Declaration public List<Image> imageList Field Value Type Description List < Image > textures Declaration public List<Texture> textures Field Value Type Description List < Texture > Methods BlackAndWhite() Declaration public void BlackAndWhite() Color() Declaration public void Color() Init(List<Image>) Declaration public void Init(List<Image> targetImages) Parameters Type Name Description List < Image > targetImages"
  },
  "api/Global.DelayObjectMake.html": {
    "href": "api/Global.DelayObjectMake.html",
    "title": "Class DelayObjectMake | Example Unity documentation",
    "keywords": "Class DelayObjectMake Inheritance Object _ObjectMakeBase DelayObjectMake Inherited Members _ObjectMakeBase.m_makeObjs _ObjectMakeBase.m_movePos _ObjectMakeBase.GetRandomValue(Single) _ObjectMakeBase.GetRandomVector(Vector3) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class DelayObjectMake : _ObjectMakeBase Fields m_startDelay Declaration public float m_startDelay Field Value Type Description Single"
  },
  "api/Global.DemoScenesNavigation.html": {
    "href": "api/Global.DemoScenesNavigation.html",
    "title": "Class DemoScenesNavigation | Example Unity documentation",
    "keywords": "Class DemoScenesNavigation Inheritance Object DemoScenesNavigation Namespace : Global Assembly : cs.temp.dll.dll Syntax public class DemoScenesNavigation : MonoBehaviour"
  },
  "api/Global.DemoToonVFX.html": {
    "href": "api/Global.DemoToonVFX.html",
    "title": "Class DemoToonVFX | Example Unity documentation",
    "keywords": "Class DemoToonVFX Inheritance Object DemoToonVFX Namespace : Global Assembly : cs.temp.dll.dll Syntax public class DemoToonVFX : MonoBehaviour Fields activationTime Declaration public float[] activationTime Field Value Type Description Single [] animObject Declaration public Animator animObject Field Value Type Description Animator cameraPos Declaration public Vector3 cameraPos Field Value Type Description Vector3 currDistance Declaration public float currDistance Field Value Type Description Single Holder Declaration public Transform Holder Field Value Type Description Transform HueTexture Declaration public Texture HueTexture Field Value Type Description Texture Prefabs Declaration public GameObject[] Prefabs Field Value Type Description GameObject [] prevDistance Declaration public float prevDistance Field Value Type Description Single useAnimation Declaration public bool useAnimation Field Value Type Description Boolean xRotate Declaration public float xRotate Field Value Type Description Single yMaxLimit Declaration public float yMaxLimit Field Value Type Description Single yMinLimit Declaration public float yMinLimit Field Value Type Description Single yRotate Declaration public float yRotate Field Value Type Description Single"
  },
  "api/Global.DemoToonVFX.SVA.html": {
    "href": "api/Global.DemoToonVFX.SVA.html",
    "title": "Struct DemoToonVFX.SVA | Example Unity documentation",
    "keywords": "Struct DemoToonVFX.SVA Namespace : Global Assembly : cs.temp.dll.dll Syntax public struct SVA Fields A Declaration public float A Field Value Type Description Single S Declaration public float S Field Value Type Description Single V Declaration public float V Field Value Type Description Single"
  },
  "api/Global.DisableOtherShinsei.html": {
    "href": "api/Global.DisableOtherShinsei.html",
    "title": "Class DisableOtherShinsei | Example Unity documentation",
    "keywords": "Class DisableOtherShinsei Inheritance Object DisableOtherShinsei Namespace : Global Assembly : cs.temp.dll.dll Syntax public class DisableOtherShinsei : MonoBehaviour"
  },
  "api/Global.DragonPartType.html": {
    "href": "api/Global.DragonPartType.html",
    "title": "Enum DragonPartType | Example Unity documentation",
    "keywords": "Enum DragonPartType Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum DragonPartType Fields Name Description cabeza"
  },
  "api/Global.DtoBugData.html": {
    "href": "api/Global.DtoBugData.html",
    "title": "Struct DtoBugData | Example Unity documentation",
    "keywords": "Struct DtoBugData Namespace : Global Assembly : cs.temp.dll.dll Syntax public struct DtoBugData Fields data Declaration public DtoDetailBugData data Field Value Type Description DtoDetailBugData status Declaration public int status Field Value Type Description Int32 success Declaration public bool success Field Value Type Description Boolean"
  },
  "api/Global.DtoDetailBugData.html": {
    "href": "api/Global.DtoDetailBugData.html",
    "title": "Struct DtoDetailBugData | Example Unity documentation",
    "keywords": "Struct DtoDetailBugData Namespace : Global Assembly : cs.temp.dll.dll Syntax public struct DtoDetailBugData Fields link Declaration public string link Field Value Type Description String"
  },
  "api/Global.DummyMainMenuNavigation.html": {
    "href": "api/Global.DummyMainMenuNavigation.html",
    "title": "Class DummyMainMenuNavigation | Example Unity documentation",
    "keywords": "Class DummyMainMenuNavigation Inheritance Object DummyMainMenuNavigation Namespace : Global Assembly : cs.temp.dll.dll Syntax public class DummyMainMenuNavigation : MonoBehaviour"
  },
  "api/Global.EffectsScene.html": {
    "href": "api/Global.EffectsScene.html",
    "title": "Class EffectsScene | Example Unity documentation",
    "keywords": "Class EffectsScene Inheritance Object EffectsScene Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EffectsScene : MonoBehaviour Fields inputLocation Declaration public static int inputLocation Field Value Type Description Int32 m_destroyObjects Declaration public static GameObject[] m_destroyObjects Field Value Type Description GameObject [] m_effectName Declaration public Text m_effectName Field Value Type Description Text m_effects Declaration public Transform[] m_effects Field Value Type Description Transform []"
  },
  "api/Global.EGA_EffectSound.html": {
    "href": "api/Global.EGA_EffectSound.html",
    "title": "Class EGA_EffectSound | Example Unity documentation",
    "keywords": "Class EGA_EffectSound Inheritance Object EGA_EffectSound Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EGA_EffectSound : MonoBehaviour Fields maxVolume Declaration public float maxVolume Field Value Type Description Single minVolume Declaration public float minVolume Field Value Type Description Single RandomVolume Declaration public bool RandomVolume Field Value Type Description Boolean Repeating Declaration public bool Repeating Field Value Type Description Boolean RepeatTime Declaration public float RepeatTime Field Value Type Description Single StartTime Declaration public float StartTime Field Value Type Description Single"
  },
  "api/Global.EnableDrink.html": {
    "href": "api/Global.EnableDrink.html",
    "title": "Class EnableDrink | Example Unity documentation",
    "keywords": "Class EnableDrink Inheritance Object EnableDrink Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EnableDrink : MonoBehaviour Methods Drink() Declaration public void Drink() DrinkOff() Declaration public void DrinkOff()"
  },
  "api/Global.EnableWhenEnable.html": {
    "href": "api/Global.EnableWhenEnable.html",
    "title": "Class EnableWhenEnable | Example Unity documentation",
    "keywords": "Class EnableWhenEnable Inheritance Object EnableWhenEnable Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EnableWhenEnable : MonoBehaviour"
  },
  "api/Global.EndpointsForBots.html": {
    "href": "api/Global.EndpointsForBots.html",
    "title": "Class EndpointsForBots | Example Unity documentation",
    "keywords": "Class EndpointsForBots Inheritance Object EndpointsForBots Namespace : Global Assembly : cs.temp.dll.dll Syntax public static class EndpointsForBots Fields CREATE_MATCH Declaration public static string CREATE_MATCH Field Value Type Description String DELETE_MATCH Declaration public static string DELETE_MATCH Field Value Type Description String SELECT_SHINSEIS Declaration public static string SELECT_SHINSEIS Field Value Type Description String"
  },
  "api/Global.Extensions.html": {
    "href": "api/Global.Extensions.html",
    "title": "Class Extensions | Example Unity documentation",
    "keywords": "Class Extensions Inheritance Object Extensions Namespace : Global Assembly : cs.temp.dll.dll Syntax public static class Extensions Methods SetActiveToggle(GameObject) Declaration public static void SetActiveToggle(this GameObject target) Parameters Type Name Description GameObject target"
  },
  "api/Global.Followpoints.html": {
    "href": "api/Global.Followpoints.html",
    "title": "Class Followpoints | Example Unity documentation",
    "keywords": "Class Followpoints Inheritance Object Followpoints Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Followpoints : MonoBehaviour"
  },
  "api/Global.Footsteps.html": {
    "href": "api/Global.Footsteps.html",
    "title": "Class Footsteps | Example Unity documentation",
    "keywords": "Class Footsteps Simple behavior that play music acording to the animation Inheritance Object Footsteps Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Footsteps : MonoBehaviour Fields CurrentTerrain Declaration public string CurrentTerrain Field Value Type Description String MyBank Declaration public AK.Wwise.Bank MyBank Field Value Type Description AK.Wwise.Bank MyEvent Declaration public AK.Wwise.Event MyEvent Field Value Type Description AK.Wwise.Event Methods DetectSurface() Declaration public void DetectSurface() PlayFootSound() Declaration public void PlayFootSound() SetSwitchUsingNames(String) Declaration public void SetSwitchUsingNames(string name) Parameters Type Name Description String name Start() Declaration public void Start()"
  },
  "api/Global.ForwardMovement.html": {
    "href": "api/Global.ForwardMovement.html",
    "title": "Class ForwardMovement | Example Unity documentation",
    "keywords": "Class ForwardMovement Inheritance Object ForwardMovement Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ForwardMovement : MonoBehaviour"
  },
  "api/Global.FowardObjectMake.html": {
    "href": "api/Global.FowardObjectMake.html",
    "title": "Class FowardObjectMake | Example Unity documentation",
    "keywords": "Class FowardObjectMake Inheritance Object _ObjectMakeBase FowardObjectMake Inherited Members _ObjectMakeBase.m_makeObjs _ObjectMakeBase.m_movePos _ObjectMakeBase.GetRandomValue(Single) _ObjectMakeBase.GetRandomVector(Vector3) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class FowardObjectMake : _ObjectMakeBase Fields m_isCrossMake Declaration public bool m_isCrossMake Field Value Type Description Boolean m_makeCount Declaration public float m_makeCount Field Value Type Description Single m_makeDelay Declaration public float m_makeDelay Field Value Type Description Single m_objectSize Declaration public float m_objectSize Field Value Type Description Single m_subtractYValue Declaration public float m_subtractYValue Field Value Type Description Single"
  },
  "api/Global.FreeCam.html": {
    "href": "api/Global.FreeCam.html",
    "title": "Class FreeCam | Example Unity documentation",
    "keywords": "Class FreeCam A simple free camera to be added to a Unity game object. Keys: wasd / arrows - movement q/e - up/down (local space) r/f - up/down (world space) pageup/pagedown - up/down (world space) hold shift - enable fast movement mode right mouse - enable free look mouse - free look / rotation Inheritance Object FreeCam Namespace : Global Assembly : cs.temp.dll.dll Syntax public class FreeCam : MonoBehaviour Fields fastMovementSpeed Speed of camera movement when shift is held down, Declaration public float fastMovementSpeed Field Value Type Description Single fastZoomSensitivity Amount to zoom the camera when using the mouse wheel (fast mode). Declaration public float fastZoomSensitivity Field Value Type Description Single freeLookSensitivity Sensitivity for free look. Declaration public float freeLookSensitivity Field Value Type Description Single movementSpeed Normal speed of camera movement. Declaration public float movementSpeed Field Value Type Description Single zoomSensitivity Amount to zoom the camera when using the mouse wheel. Declaration public float zoomSensitivity Field Value Type Description Single Methods StartLooking() Enable free looking. Declaration public void StartLooking() StopLooking() Disable free looking. Declaration public void StopLooking()"
  },
  "api/Global.FreeFlyCamera.html": {
    "href": "api/Global.FreeFlyCamera.html",
    "title": "Class FreeFlyCamera | Example Unity documentation",
    "keywords": "Class FreeFlyCamera Inheritance Object FreeFlyCamera Namespace : Global Assembly : cs.temp.dll.dll Syntax public class FreeFlyCamera : MonoBehaviour"
  },
  "api/Global.FreeLookCam.html": {
    "href": "api/Global.FreeLookCam.html",
    "title": "Class FreeLookCam | Example Unity documentation",
    "keywords": "Class FreeLookCam Inheritance Object FreeLookCam Namespace : Global Assembly : cs.temp.dll.dll Syntax public class FreeLookCam : MonoBehaviour Fields freeLookCamera Declaration public GameObject freeLookCamera Field Value Type Description GameObject mainCamera Declaration public GameObject mainCamera Field Value Type Description GameObject Methods ActivateCamera(Boolean) Declaration public void ActivateCamera(bool activateFreelook) Parameters Type Name Description Boolean activateFreelook Update() Declaration public void Update()"
  },
  "api/Global.FrontAttack.html": {
    "href": "api/Global.FrontAttack.html",
    "title": "Class FrontAttack | Example Unity documentation",
    "keywords": "Class FrontAttack Inheritance Object FrontAttack Namespace : Global Assembly : cs.temp.dll.dll Syntax public class FrontAttack : MonoBehaviour Fields anim Declaration public Animator[] anim Field Value Type Description Animator [] changeScale Declaration public bool changeScale Field Value Type Description Boolean craterPrefab Declaration public GameObject craterPrefab Field Value Type Description GameObject delay Declaration public float delay Field Value Type Description Single drug Declaration public float drug Field Value Type Description Single effectWithAnimation Declaration public bool effectWithAnimation Field Value Type Description Boolean pivot Declaration public Transform pivot Field Value Type Description Transform playMeshEffect Declaration public bool playMeshEffect Field Value Type Description Boolean playPS Declaration public bool playPS Field Value Type Description Boolean positionOffset Declaration public float positionOffset Field Value Type Description Single ps Declaration public ParticleSystem ps Field Value Type Description ParticleSystem spawnDuration Declaration public float spawnDuration Field Value Type Description Single spawnRate Declaration public float spawnRate Field Value Type Description Single speed Declaration public float speed Field Value Type Description Single startRotation Declaration public Vector3 startRotation Field Value Type Description Vector3 Methods MeshEffect() Declaration public IEnumerator MeshEffect() Returns Type Description IEnumerator PrepeareAttack(Vector3) Declaration public void PrepeareAttack(Vector3 targetPoint) Parameters Type Name Description Vector3 targetPoint StartMove() Declaration public IEnumerator StartMove() Returns Type Description IEnumerator"
  },
  "api/Global.FrontMover.html": {
    "href": "api/Global.FrontMover.html",
    "title": "Class FrontMover | Example Unity documentation",
    "keywords": "Class FrontMover Inheritance Object FrontMover Namespace : Global Assembly : cs.temp.dll.dll Syntax public class FrontMover : MonoBehaviour Fields drug Declaration public float drug Field Value Type Description Single effect Declaration public ParticleSystem effect Field Value Type Description ParticleSystem pivot Declaration public Transform pivot Field Value Type Description Transform repeatingTime Declaration public float repeatingTime Field Value Type Description Single speed Declaration public float speed Field Value Type Description Single"
  },
  "api/Global.GameController.html": {
    "href": "api/Global.GameController.html",
    "title": "Class GameController | Example Unity documentation",
    "keywords": "Class GameController Inheritance Object GameController Namespace : Global Assembly : cs.temp.dll.dll Syntax public class GameController : MonoBehaviour"
  },
  "api/Global.HeadMessages.html": {
    "href": "api/Global.HeadMessages.html",
    "title": "Class HeadMessages | Example Unity documentation",
    "keywords": "Class HeadMessages Inheritance Object HeadMessages Namespace : Global Assembly : cs.temp.dll.dll Syntax public class HeadMessages : MonoBehaviour Methods ShowMessage(String) Declaration public void ShowMessage(string msg) Parameters Type Name Description String msg"
  },
  "api/Global.HideAfterSeconds.html": {
    "href": "api/Global.HideAfterSeconds.html",
    "title": "Class HideAfterSeconds | Example Unity documentation",
    "keywords": "Class HideAfterSeconds Inheritance Object HideAfterSeconds Namespace : Global Assembly : cs.temp.dll.dll Syntax public class HideAfterSeconds : MonoBehaviour Fields fade Declaration public bool fade Field Value Type Description Boolean seconds Declaration public float seconds Field Value Type Description Single Methods StartHideCountdown() Declaration public void StartHideCountdown()"
  },
  "api/Global.HS_CameraController.html": {
    "href": "api/Global.HS_CameraController.html",
    "title": "Class HS_CameraController | Example Unity documentation",
    "keywords": "Class HS_CameraController Inheritance Object HS_CameraController Namespace : Global Assembly : cs.temp.dll.dll Syntax public class HS_CameraController : MonoBehaviour Fields cameraPos Declaration public Vector3 cameraPos Field Value Type Description Vector3 collidingLayers Declaration public LayerMask collidingLayers Field Value Type Description LayerMask currDistance Declaration public float currDistance Field Value Type Description Single Holder Declaration public Transform Holder Field Value Type Description Transform prevDistance Declaration public float prevDistance Field Value Type Description Single xRotate Declaration public float xRotate Field Value Type Description Single yMaxLimit Declaration public float yMaxLimit Field Value Type Description Single yMinLimit Declaration public float yMinLimit Field Value Type Description Single yRotate Declaration public float yRotate Field Value Type Description Single"
  },
  "api/Global.HS_CameraShaker.html": {
    "href": "api/Global.HS_CameraShaker.html",
    "title": "Class HS_CameraShaker | Example Unity documentation",
    "keywords": "Class HS_CameraShaker Inheritance Object HS_CameraShaker Namespace : Global Assembly : cs.temp.dll.dll Syntax public class HS_CameraShaker : MonoBehaviour Fields amplitude Declaration public float amplitude Field Value Type Description Single cameraObject Declaration public Transform cameraObject Field Value Type Description Transform duration Declaration public float duration Field Value Type Description Single frequency Declaration public float frequency Field Value Type Description Single timeRemaining Declaration public float timeRemaining Field Value Type Description Single Methods Shake(Single, Single, Single, Single) Declaration public IEnumerator Shake(float amp, float freq, float dur, float wait) Parameters Type Name Description Single amp Single freq Single dur Single wait Returns Type Description IEnumerator"
  },
  "api/Global.html": {
    "href": "api/Global.html",
    "title": "Namespace Global | Example Unity documentation",
    "keywords": "Namespace Global Classes _ObjectMakeBase ActionCardDto ActionDataList AESEncryption AlteredStateController AlteredStateData AlteredStatesDataSO AlteredView AlteredView.AlteredByTurns Analytics AnimatorListener AtlasTextures AuthPanel AutoDestroyPS BackpackController BaseMultipliers BattleActionBlockCard BattleActionBuffDebuff Logic that allow change value of stats in combat BattleActionChangeShinsei Logic of action that allow you change shinsei in combat BattleActionChangeTerrain BattleActionDamage Actions that make damage BattleActionData BattleActionHeal This class allow grown up the life values BattleActionPutAlteredState This class control the behavior of Altered States BattleActionReflect This class controls a special attack case when shinsei reflect damage BattleActionsBase BattleActionsBaseTemplate BattleActionSkipTurn This class allow user send a turn withouth data BattleActionStatSwap This class allow swap between two stats BattleAlteredStateBase BattleAlteredStateBleeding BattleAlteredStateDataSO BattleAlteredStateEvasionChange BattleAlteredStateIgnited Specific case of Altered State Ignite BattleAlteredStateRoot The specific case of altered state Root BattleNotificationSystem BattleTerrainBehavioursBase BattleTerrainBehaviourSnow BattleTerrainDataSO BodyStyle BodyStyle.BodyPartDressable BoneAnimationTracker BotPlayfabIdsList BracketsData BracketsTournamentManager CameraSpawner ChallengePlayerController ChangeColor ChangeGender Change between male and female character and update in playfab data ChangeIconLeague CharacterAnimBehaviour CharacterAPI CharacterColorSlot UI Element that represents a color for character CharacterDatabase CharacterSelectorController CharacterStyleInfo CharacterStyleRelation CharacterStyleSlot ChatTextBox Chat behavior, send messages and show in a UI Elements CheckStateOfTournamentDto CheckTournamentInscription Allow hide all objects innecesary in tournament mode, only visual results CheckTournamentStateController ColorIdRelation ColorSO ColorsSO ColorSwapper Constants Cooker This script controls the behavior of npc cooker in the bar Courtain A component that make a black transition CreateBotsController csEffect_03_ArrowFunction csEffect_03_ObjectMake csEffect_76_Animation csEffect_76_CircleSwordMake csEffect_76_FloatingSwordMake csEffect_77_HandMove csEffect_77_ObjectMake csEffect_77_ObjectMake2 csEffect_79_CircleMake csEffect_79_WallRiseDown csEffect_80_SunMove csEffectScene csLaser csLookAt csMaterial_Change csMouseOrbit csMove csObjectMake csObjectMake2 csObjectMake3 csObjectMake4 csObjectMake5 csObjectMake6 csObjectMoveDestroy csObjectMoveDestroy2 csParticleStop csRiseDown csRotate csScaleChange CustomRampGeneratorEditor Decolorator DelayObjectMake DemoScenesNavigation DemoToonVFX DisableOtherShinsei DummyMainMenuNavigation EffectsScene EGA_EffectSound EnableDrink EnableWhenEnable EndpointsForBots Extensions Followpoints Footsteps Simple behavior that play music acording to the animation ForwardMovement FowardObjectMake FreeCam A simple free camera to be added to a Unity game object. Keys: wasd / arrows - movement q/e - up/down (local space) r/f - up/down (world space) pageup/pagedown - up/down (world space) hold shift - enable fast movement mode right mouse - enable free look mouse - free look / rotation FreeFlyCamera FreeLookCam FrontAttack FrontMover GameController HeadMessages HideAfterSeconds HS_CameraController HS_CameraShaker InteractWithPlayerController InteractWithShinsei IUiTrigger JPGGenerator LightFlickerEffect Component which will flicker a linked light while active by changing its intensity between the min and max values given. The flickering can be sharp or smoothed depending on the value of the smoothing parameter. Just activate / deactivate this component as usual to pause / resume flicker LobbyChatView LocalPlayerData Logout LookAtAxis LookPlayer MatchConfirmedDto MatchmakingTrigger MatchState Material_Change MaterialOffset MaterialReskin MessageView MessageView.Message MMConditionAttribute MMEnumConditionAttribute MMReadOnlyAttribute MouseOrbit MoveToObject MoveToTag MultiCircleObjectMake MultiObjectMake NewLeaderBoard NFTGenerator NFTsModel NodeEnumAttribute Draw enums correctly within nodes. Without it, enums show up at the wrong positions. OpenUrl OwnBattleTracker OwnBattleTracker.PromediumObject PalleteColors PartEntity PartEntityModel ParticleCollisionInstance PartIdRelation PartIndex Index of all the current parts of the character PartMultipliers PartRarityModel PartSelector PartSlot PartStat PendingVariableNPC Call all necesary actions to leave the tournament PetInteraction PlayerDataManager PlayerIconController PlayerUI PlayfabManager This works as bridge with playfab, all client petitions pass first here PrefabSpawner PutBackgroundMusic PutNightModeForVfx RampGeneratorTDE RankRewardDto RankRewardEntry RareThing This script solves a problem with WWise when you put the game in second plane at return all songs in queque play at time, and control the bird sounds RecolorBehavior ReportBug RewardEntry RewardsRankingSystemController RotateObject RotateWithDrag RotatorPillow SacredTailsLog ScaleChange ScrollArrows SelectableUi SelectableUiButton SerializableVector3 SettingsController Shinsei ShinseiAnimBehaviour ShinseiVault ShouldSerializeContractResolver ShowHideDebug ShowPreviewOfSlot SimpleObjectMake SimpleVideoPlayer SineCameraControllerTopDownEffects SineUIControllerTopDownEffects SkyChanger StageBracketData StopMovementWhenEnable SwapColorPropertyNameSO TargetProjectile TerrainChangesDataSO TestBotController ThirdPersonController Controll the behavior of the main character TimerService TMPChangeColor TournamentBracketsData TournamentCamera TranslateMove TransparentBackgroundScreenshotRecorder TriggerNotificator TypesActions TypeStatsAndMultipliers UIColorSwapper UIDisolver UiEmoji UiTrigger UIViewerTrigger UnityNewtonsoftJsonSerializer UnlockedCharacterStyleInfo Vector3Extensions VendorHeadTracking VendorSeeArea VersusPanelController VFXPositionData VFXtester VFXTypeData WhiteMageController WorldPositionateElement ZoneTrigger Structs ChatBadWordsDB DemoToonVFX.SVA DtoBugData DtoDetailBugData MatAnimation MatchData Interfaces IBracketsTournament ITimer Enums ActionTypeEnum AlteredStateEnum AuthPanelType CameraPhasesEnum CameraPointOfInteresEnum CamerasAvailableEnum CriticsCheck DragonPartType MatAnimation.AttachedEdge NewLeaderBoard.Division PartType RampGeneratorTDE.Mode RarityType ShinseiStatsEnum StatValueType Stat value categiories, used of stat calculation TypesOfTerrainEnum VFXPositionEnum"
  },
  "api/Global.IBracketsTournament.html": {
    "href": "api/Global.IBracketsTournament.html",
    "title": "Interface IBracketsTournament | Example Unity documentation",
    "keywords": "Interface IBracketsTournament Namespace : Global Assembly : cs.temp.dll.dll Syntax public interface IBracketsTournament Properties CheckTournamentInscription Declaration CheckTournamentInscription CheckTournamentInscription { get; } Property Value Type Description CheckTournamentInscription CheckTournamentStateController Declaration CheckTournamentStateController CheckTournamentStateController { get; } Property Value Type Description CheckTournamentStateController OnTournamentEnded Declaration Action OnTournamentEnded { get; set; } Property Value Type Description Action Methods SetAlreadyConnection(Boolean) Declaration void SetAlreadyConnection(bool state) Parameters Type Name Description Boolean state ShowPanelBracketsView(Boolean) Declaration void ShowPanelBracketsView(bool active) Parameters Type Name Description Boolean active"
  },
  "api/Global.InteractWithPlayerController.html": {
    "href": "api/Global.InteractWithPlayerController.html",
    "title": "Class InteractWithPlayerController | Example Unity documentation",
    "keywords": "Class InteractWithPlayerController Inheritance Object InteractWithPlayerController Namespace : Global Assembly : cs.temp.dll.dll Syntax public class InteractWithPlayerController : MonoBehaviour Fields interactionsPanel Declaration public GameObject interactionsPanel Field Value Type Description GameObject Methods ActivatePieMenu() Declaration public void ActivatePieMenu()"
  },
  "api/Global.InteractWithShinsei.html": {
    "href": "api/Global.InteractWithShinsei.html",
    "title": "Class InteractWithShinsei | Example Unity documentation",
    "keywords": "Class InteractWithShinsei Inheritance Object InteractWithShinsei Implements IPointerClickHandler Namespace : Global Assembly : cs.temp.dll.dll Syntax public class InteractWithShinsei : MonoBehaviour Methods OnPointerClick(PointerEventData) Declaration public void OnPointerClick(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IPointerClickHandler"
  },
  "api/Global.ITimer.html": {
    "href": "api/Global.ITimer.html",
    "title": "Interface ITimer | Example Unity documentation",
    "keywords": "Interface ITimer Namespace : Global Assembly : cs.temp.dll.dll Syntax public interface ITimer Methods UpdateTimer(Single, String, Boolean) Declaration string UpdateTimer(float timeInSeconds, string colorText = null, bool showHour = false) Parameters Type Name Description Single timeInSeconds String colorText Boolean showHour Returns Type Description String"
  },
  "api/Global.IUiTrigger.html": {
    "href": "api/Global.IUiTrigger.html",
    "title": "Class IUiTrigger | Example Unity documentation",
    "keywords": "Class IUiTrigger Inheritance Object IUiTrigger UiTrigger UIViewerTrigger Namespace : Global Assembly : cs.temp.dll.dll Syntax public abstract class IUiTrigger : MonoBehaviour Fields OnTriggerEnterEvent Declaration protected Action<Collider> OnTriggerEnterEvent Field Value Type Description Action < Collider > OnTriggerExitEvent Declaration protected Action<Collider> OnTriggerExitEvent Field Value Type Description Action < Collider > Methods Update() Declaration public void Update()"
  },
  "api/Global.JPGGenerator.html": {
    "href": "api/Global.JPGGenerator.html",
    "title": "Class JPGGenerator | Example Unity documentation",
    "keywords": "Class JPGGenerator Inheritance Object JPGGenerator Namespace : Global Assembly : cs.temp.dll.dll Syntax public class JPGGenerator : MonoBehaviour Fields _camera Declaration public Camera _camera Field Value Type Description Camera characterDatabase Declaration public CharacterDatabase characterDatabase Field Value Type Description CharacterDatabase generator Declaration public Button generator Field Value Type Description Button loadingPanel Declaration public GameObject loadingPanel Field Value Type Description GameObject Methods Capture() Declaration public void Capture() GenerateRandomJPG() Declaration public void GenerateRandomJPG() GenerateRandomPNG() Declaration public void GenerateRandomPNG()"
  },
  "api/Global.LightFlickerEffect.html": {
    "href": "api/Global.LightFlickerEffect.html",
    "title": "Class LightFlickerEffect | Example Unity documentation",
    "keywords": "Class LightFlickerEffect Component which will flicker a linked light while active by changing its intensity between the min and max values given. The flickering can be sharp or smoothed depending on the value of the smoothing parameter. Just activate / deactivate this component as usual to pause / resume flicker Inheritance Object LightFlickerEffect Namespace : Global Assembly : cs.temp.dll.dll Syntax public class LightFlickerEffect : MonoBehaviour Fields light Declaration public Light light Field Value Type Description Light maxIntensity Declaration public float maxIntensity Field Value Type Description Single minIntensity Declaration public float minIntensity Field Value Type Description Single smoothing Declaration public int smoothing Field Value Type Description Int32 Methods Reset() Reset the randomness and start again. You usually don't need to call this, deactivating/reactivating is usually fine but if you want a strict restart you can do. Declaration public void Reset()"
  },
  "api/Global.LobbyChatView.html": {
    "href": "api/Global.LobbyChatView.html",
    "title": "Class LobbyChatView | Example Unity documentation",
    "keywords": "Class LobbyChatView Inheritance Object LobbyChatView Implements ILobbyChatViewable Namespace : Global Assembly : cs.temp.dll.dll Syntax public class LobbyChatView : MonoBehaviour Properties OnSendMessage Declaration public Action<string> OnSendMessage { get; set; } Property Value Type Description Action < String > Methods Init() Declaration public void Init() ShowMessage(MessageDto) Declaration public void ShowMessage(MessageDto messageDto) Parameters Type Name Description MessageDto messageDto Implements ILobbyChatViewable"
  },
  "api/Global.LocalPlayerData.html": {
    "href": "api/Global.LocalPlayerData.html",
    "title": "Class LocalPlayerData | Example Unity documentation",
    "keywords": "Class LocalPlayerData Inheritance Object LocalPlayerData Namespace : Global Assembly : cs.temp.dll.dll Syntax public class LocalPlayerData Fields challengedPlayer Declaration public string challengedPlayer Field Value Type Description String characterState Declaration public CharacterStateEnum characterState Field Value Type Description CharacterStateEnum currentCharacterStyle Declaration public Dictionary<PartsOfCharacter, CharacterStyleInfo> currentCharacterStyle Field Value Type Description Dictionary < PartsOfCharacter , CharacterStyleInfo > currentChatMessages Declaration public List<ChatMessagePayload> currentChatMessages Field Value Type Description List < ChatMessagePayload > currentMatchId Declaration public string currentMatchId Field Value Type Description String Deck Declaration public Deck Deck Field Value Type Description Deck entityId Declaration public string entityId Field Value Type Description String entityType Declaration public string entityType Field Value Type Description String localPlayerNetId Declaration public ulong localPlayerNetId Field Value Type Description UInt64 onPartyChange Declaration public Action onPartyChange Field Value Type Description Action playerName Declaration public string playerName Field Value Type Description String playfabId Declaration public string playfabId Field Value Type Description String ShinseiCompanion Declaration public Shinsei ShinseiCompanion Field Value Type Description Shinsei ShinseiParty Declaration public List<Shinsei> ShinseiParty Field Value Type Description List < Shinsei > ShinseiVault Declaration public ShinseiVault ShinseiVault Field Value Type Description ShinseiVault unlockedStyles Declaration public Dictionary<PartsOfCharacter, UnlockedCharacterStyleInfo> unlockedStyles Field Value Type Description Dictionary < PartsOfCharacter , UnlockedCharacterStyleInfo > Methods CastCompressedStyleToDictionary(String) Declaration public Dictionary<PartsOfCharacter, CharacterStyleInfo> CastCompressedStyleToDictionary(string compressedStyle) Parameters Type Name Description String compressedStyle Returns Type Description Dictionary < PartsOfCharacter , CharacterStyleInfo > CastDictionaryToCompressedStyle() Declaration public string CastDictionaryToCompressedStyle() Returns Type Description String"
  },
  "api/Global.Logout.html": {
    "href": "api/Global.Logout.html",
    "title": "Class Logout | Example Unity documentation",
    "keywords": "Class Logout Inheritance Object Logout Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Logout : NetworkBehaviour Methods CallLogout() Declaration public void CallLogout()"
  },
  "api/Global.LookAtAxis.html": {
    "href": "api/Global.LookAtAxis.html",
    "title": "Class LookAtAxis | Example Unity documentation",
    "keywords": "Class LookAtAxis Inheritance Object LookAtAxis Namespace : Global Assembly : cs.temp.dll.dll Syntax public class LookAtAxis : MonoBehaviour"
  },
  "api/Global.LookPlayer.html": {
    "href": "api/Global.LookPlayer.html",
    "title": "Class LookPlayer | Example Unity documentation",
    "keywords": "Class LookPlayer Inheritance Object LookPlayer Namespace : Global Assembly : cs.temp.dll.dll Syntax public class LookPlayer : MonoBehaviour"
  },
  "api/Global.MatAnimation.AttachedEdge.html": {
    "href": "api/Global.MatAnimation.AttachedEdge.html",
    "title": "Enum MatAnimation.AttachedEdge | Example Unity documentation",
    "keywords": "Enum MatAnimation.AttachedEdge Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum AttachedEdge Fields Name Description x y z"
  },
  "api/Global.MatAnimation.html": {
    "href": "api/Global.MatAnimation.html",
    "title": "Struct MatAnimation | Example Unity documentation",
    "keywords": "Struct MatAnimation Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public struct MatAnimation Fields attachedEdge Declaration public MatAnimation.AttachedEdge attachedEdge Field Value Type Description MatAnimation.AttachedEdge image Declaration public Texture2D image Field Value Type Description Texture2D matIndex Declaration public int matIndex Field Value Type Description Int32 targetValue Declaration public float targetValue Field Value Type Description Single"
  },
  "api/Global.MatchConfirmedDto.html": {
    "href": "api/Global.MatchConfirmedDto.html",
    "title": "Class MatchConfirmedDto | Example Unity documentation",
    "keywords": "Class MatchConfirmedDto Inheritance Object MatchConfirmedDto Namespace : Global Assembly : cs.temp.dll.dll Syntax public class MatchConfirmedDto Fields matchSpawnPoint Declaration public int matchSpawnPoint Field Value Type Description Int32"
  },
  "api/Global.MatchData.html": {
    "href": "api/Global.MatchData.html",
    "title": "Struct MatchData | Example Unity documentation",
    "keywords": "Struct MatchData Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public struct MatchData Fields MatchId Declaration public string MatchId Field Value Type Description String MatchPlayers Declaration public List<CombatPlayer> MatchPlayers Field Value Type Description List < CombatPlayer >"
  },
  "api/Global.MatchmakingTrigger.html": {
    "href": "api/Global.MatchmakingTrigger.html",
    "title": "Class MatchmakingTrigger | Example Unity documentation",
    "keywords": "Class MatchmakingTrigger Inheritance Object MatchmakingTrigger Namespace : Global Assembly : cs.temp.dll.dll Syntax public class MatchmakingTrigger : NetworkBehaviour"
  },
  "api/Global.MatchState.html": {
    "href": "api/Global.MatchState.html",
    "title": "Class MatchState | Example Unity documentation",
    "keywords": "Class MatchState Inheritance Object MatchState Namespace : Global Assembly : cs.temp.dll.dll Syntax public class MatchState Fields currentTurn Declaration public int currentTurn Field Value Type Description Int32 isOwnerLocal Declaration public bool isOwnerLocal Field Value Type Description Boolean playersServerData Declaration public Dictionary<string, string> playersServerData Field Value Type Description Dictionary < String , String > playersTurn Declaration public List<ActionCardDto> playersTurn Field Value Type Description List < ActionCardDto > playerWritedLastTurn Declaration public bool playerWritedLastTurn Field Value Type Description Boolean skipTurnIndex Declaration public bool skipTurnIndex Field Value Type Description Boolean winnerId Declaration public string winnerId Field Value Type Description String"
  },
  "api/Global.Material_Change.html": {
    "href": "api/Global.Material_Change.html",
    "title": "Class Material_Change | Example Unity documentation",
    "keywords": "Class Material_Change Inheritance Object Material_Change Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Material_Change : MonoBehaviour Fields m_inputMaterial Declaration public Material m_inputMaterial Field Value Type Description Material m_reduceFactor Declaration public float m_reduceFactor Field Value Type Description Single m_timeToReduce Declaration public float m_timeToReduce Field Value Type Description Single"
  },
  "api/Global.MaterialOffset.html": {
    "href": "api/Global.MaterialOffset.html",
    "title": "Class MaterialOffset | Example Unity documentation",
    "keywords": "Class MaterialOffset Inheritance Object MaterialOffset Namespace : Global Assembly : cs.temp.dll.dll Syntax public class MaterialOffset : MonoBehaviour"
  },
  "api/Global.MaterialReskin.html": {
    "href": "api/Global.MaterialReskin.html",
    "title": "Class MaterialReskin | Example Unity documentation",
    "keywords": "Class MaterialReskin Inheritance Object MaterialReskin Namespace : Global Assembly : cs.temp.dll.dll Syntax public class MaterialReskin : MonoBehaviour Fields skinList Declaration public List<AtlasTextures> skinList Field Value Type Description List < AtlasTextures > Methods ChangePart() Declaration public void ChangePart() ChangePart(Int32, Int32) Declaration public void ChangePart(int targetSkin, int targetPosition) Parameters Type Name Description Int32 targetSkin Int32 targetPosition Init() Declaration public void Init() InitReskin() Declaration public void InitReskin() NormalMapToUnityFormat(Texture2D) Declaration public static Texture2D NormalMapToUnityFormat(Texture2D normalMap) Parameters Type Name Description Texture2D normalMap Returns Type Description Texture2D"
  },
  "api/Global.MessageView.html": {
    "href": "api/Global.MessageView.html",
    "title": "Class MessageView | Example Unity documentation",
    "keywords": "Class MessageView Inheritance Object MessageView Namespace : Global Assembly : cs.temp.dll.dll Syntax public class MessageView : MonoBehaviour Fields possibleIcons Declaration public List<Sprite> possibleIcons Field Value Type Description List < Sprite > Methods ShowMessage(String, Int32, Single) Declaration public void ShowMessage(string message, int icon = -1, float duration = 2F) Parameters Type Name Description String message Int32 icon Single duration"
  },
  "api/Global.MessageView.Message.html": {
    "href": "api/Global.MessageView.Message.html",
    "title": "Class MessageView.Message | Example Unity documentation",
    "keywords": "Class MessageView.Message Inheritance Object MessageView.Message Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class Message Fields icon Declaration public int icon Field Value Type Description Int32 text Declaration public string text Field Value Type Description String time Declaration public float time Field Value Type Description Single"
  },
  "api/Global.MMConditionAttribute.html": {
    "href": "api/Global.MMConditionAttribute.html",
    "title": "Class MMConditionAttribute | Example Unity documentation",
    "keywords": "Class MMConditionAttribute Inheritance Object MMConditionAttribute Namespace : Global Assembly : cs.temp.dll.dll Syntax public class MMConditionAttribute : PropertyAttribute Constructors MMConditionAttribute(String) Declaration public MMConditionAttribute(string conditionBoolean) Parameters Type Name Description String conditionBoolean MMConditionAttribute(String, Boolean) Declaration public MMConditionAttribute(string conditionBoolean, bool hideInInspector) Parameters Type Name Description String conditionBoolean Boolean hideInInspector Fields ConditionBoolean Declaration public string ConditionBoolean Field Value Type Description String Hidden Declaration public bool Hidden Field Value Type Description Boolean"
  },
  "api/Global.MMEnumConditionAttribute.html": {
    "href": "api/Global.MMEnumConditionAttribute.html",
    "title": "Class MMEnumConditionAttribute | Example Unity documentation",
    "keywords": "Class MMEnumConditionAttribute Inheritance Object MMEnumConditionAttribute Namespace : Global Assembly : cs.temp.dll.dll Syntax public class MMEnumConditionAttribute : PropertyAttribute Constructors MMEnumConditionAttribute(String, Int32[]) Declaration public MMEnumConditionAttribute(string conditionBoolean, params int[] enumValues) Parameters Type Name Description String conditionBoolean Int32 [] enumValues Fields ConditionEnum Declaration public string ConditionEnum Field Value Type Description String Hidden Declaration public bool Hidden Field Value Type Description Boolean Methods ContainsBitFlag(Int32) Declaration public bool ContainsBitFlag(int enumValue) Parameters Type Name Description Int32 enumValue Returns Type Description Boolean"
  },
  "api/Global.MMReadOnlyAttribute.html": {
    "href": "api/Global.MMReadOnlyAttribute.html",
    "title": "Class MMReadOnlyAttribute | Example Unity documentation",
    "keywords": "Class MMReadOnlyAttribute Inheritance Object MMReadOnlyAttribute Namespace : Global Assembly : cs.temp.dll.dll Syntax public class MMReadOnlyAttribute : PropertyAttribute"
  },
  "api/Global.MouseOrbit.html": {
    "href": "api/Global.MouseOrbit.html",
    "title": "Class MouseOrbit | Example Unity documentation",
    "keywords": "Class MouseOrbit Inheritance Object MouseOrbit Namespace : Global Assembly : cs.temp.dll.dll Syntax public class MouseOrbit : MonoBehaviour Fields CameraDist Declaration public float CameraDist Field Value Type Description Single distance Declaration public float distance Field Value Type Description Single Target Declaration public Transform Target Field Value Type Description Transform xSpeed Declaration public float xSpeed Field Value Type Description Single yMaxLimit Declaration public float yMaxLimit Field Value Type Description Single yMinLimit Declaration public float yMinLimit Field Value Type Description Single ySpeed Declaration public float ySpeed Field Value Type Description Single"
  },
  "api/Global.MoveToObject.html": {
    "href": "api/Global.MoveToObject.html",
    "title": "Class MoveToObject | Example Unity documentation",
    "keywords": "Class MoveToObject Inheritance Object MoveToObject Namespace : Global Assembly : cs.temp.dll.dll Syntax public class MoveToObject : MonoBehaviour Fields m_durationTime Declaration public float m_durationTime Field Value Type Description Single m_lerpValue Declaration public float m_lerpValue Field Value Type Description Single m_lookValue Declaration public float m_lookValue Field Value Type Description Single m_movePos Declaration public Transform m_movePos Field Value Type Description Transform m_startDelay Declaration public float m_startDelay Field Value Type Description Single"
  },
  "api/Global.MoveToTag.html": {
    "href": "api/Global.MoveToTag.html",
    "title": "Class MoveToTag | Example Unity documentation",
    "keywords": "Class MoveToTag Inheritance Object MoveToTag Namespace : Global Assembly : cs.temp.dll.dll Syntax public class MoveToTag : MonoBehaviour Fields m_durationTime Declaration public float m_durationTime Field Value Type Description Single m_lerpValue Declaration public float m_lerpValue Field Value Type Description Single m_lookValue Declaration public float m_lookValue Field Value Type Description Single m_startDelay Declaration public float m_startDelay Field Value Type Description Single m_tag Declaration public string m_tag Field Value Type Description String"
  },
  "api/Global.MultiCircleObjectMake.html": {
    "href": "api/Global.MultiCircleObjectMake.html",
    "title": "Class MultiCircleObjectMake | Example Unity documentation",
    "keywords": "Class MultiCircleObjectMake Inheritance Object _ObjectMakeBase MultiCircleObjectMake Inherited Members _ObjectMakeBase.m_makeObjs _ObjectMakeBase.m_movePos _ObjectMakeBase.GetRandomValue(Single) _ObjectMakeBase.GetRandomVector(Vector3) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class MultiCircleObjectMake : _ObjectMakeBase Fields m_interval Declaration public float m_interval Field Value Type Description Single m_makeCount Declaration public int m_makeCount Field Value Type Description Int32 m_makeDelay Declaration public float m_makeDelay Field Value Type Description Single m_startDelay Declaration public float m_startDelay Field Value Type Description Single"
  },
  "api/Global.MultiObjectMake.html": {
    "href": "api/Global.MultiObjectMake.html",
    "title": "Class MultiObjectMake | Example Unity documentation",
    "keywords": "Class MultiObjectMake Inheritance Object _ObjectMakeBase MultiObjectMake Inherited Members _ObjectMakeBase.m_makeObjs _ObjectMakeBase.m_movePos _ObjectMakeBase.GetRandomValue(Single) _ObjectMakeBase.GetRandomVector(Vector3) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class MultiObjectMake : _ObjectMakeBase Fields m_makeCount Declaration public int m_makeCount Field Value Type Description Int32 m_makeDelay Declaration public float m_makeDelay Field Value Type Description Single m_randomPos Declaration public Vector3 m_randomPos Field Value Type Description Vector3 m_randomRot Declaration public Vector3 m_randomRot Field Value Type Description Vector3 m_startDelay Declaration public float m_startDelay Field Value Type Description Single"
  },
  "api/Global.NewLeaderBoard.Division.html": {
    "href": "api/Global.NewLeaderBoard.Division.html",
    "title": "Enum NewLeaderBoard.Division | Example Unity documentation",
    "keywords": "Enum NewLeaderBoard.Division Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum Division Fields Name Description Bronze Champion Gold Silver"
  },
  "api/Global.NewLeaderBoard.html": {
    "href": "api/Global.NewLeaderBoard.html",
    "title": "Class NewLeaderBoard | Example Unity documentation",
    "keywords": "Class NewLeaderBoard Inheritance Object NewLeaderBoard Namespace : Global Assembly : cs.temp.dll.dll Syntax public class NewLeaderBoard : MonoBehaviour Methods ChangeIsRewardWindow(Boolean) Declaration public void ChangeIsRewardWindow(bool _isRewardWindows) Parameters Type Name Description Boolean _isRewardWindows DrawList(List<LeaderboardElement.ElementData>) Declaration public void DrawList(List<LeaderboardElement.ElementData> elements) Parameters Type Name Description List < LeaderboardElement.ElementData > elements GetListOfDivision(Int32) Declaration public void GetListOfDivision(int divisionIndex) Parameters Type Name Description Int32 divisionIndex ProcessDivisionList(PlayFab.ClientModels.GetLeaderboardResult) Declaration public void ProcessDivisionList(PlayFab.ClientModels.GetLeaderboardResult result) Parameters Type Name Description PlayFab.ClientModels.GetLeaderboardResult result ProcessVictorieList(PlayFab.ClientModels.GetLeaderboardResult) Declaration public void ProcessVictorieList(PlayFab.ClientModels.GetLeaderboardResult result) Parameters Type Name Description PlayFab.ClientModels.GetLeaderboardResult result StatisticRecursiveSearch(PlayFab.ClientModels.GetLeaderboardResult, String, Int32, Action<PlayFab.ClientModels.GetLeaderboardResult>, Action) Declaration public void StatisticRecursiveSearch(PlayFab.ClientModels.GetLeaderboardResult result, string division, int iterationNumber, Action<PlayFab.ClientModels.GetLeaderboardResult> Callback, Action OnLastIteration = null) Parameters Type Name Description PlayFab.ClientModels.GetLeaderboardResult result String division Int32 iterationNumber Action < PlayFab.ClientModels.GetLeaderboardResult > Callback Action OnLastIteration"
  },
  "api/Global.NFTGenerator.html": {
    "href": "api/Global.NFTGenerator.html",
    "title": "Class NFTGenerator | Example Unity documentation",
    "keywords": "Class NFTGenerator Inheritance Object NFTGenerator Namespace : Global Assembly : cs.temp.dll.dll Syntax public class NFTGenerator : MonoBehaviour Fields characterDatabase Declaration public CharacterDatabase characterDatabase Field Value Type Description CharacterDatabase nftsToCreate Declaration public int nftsToCreate Field Value Type Description Int32 Methods CreateNFTs() Declaration public void CreateNFTs()"
  },
  "api/Global.NFTsModel.html": {
    "href": "api/Global.NFTsModel.html",
    "title": "Class NFTsModel | Example Unity documentation",
    "keywords": "Class NFTsModel Inheritance Object NFTsModel Namespace : Global Assembly : cs.temp.dll.dll Syntax public class NFTsModel Properties NFTsID Declaration public string NFTsID { get; } Property Value Type Description String"
  },
  "api/Global.NodeEnumAttribute.html": {
    "href": "api/Global.NodeEnumAttribute.html",
    "title": "Class NodeEnumAttribute | Example Unity documentation",
    "keywords": "Class NodeEnumAttribute Draw enums correctly within nodes. Without it, enums show up at the wrong positions. Inheritance Object NodeEnumAttribute Namespace : Global Assembly : cs.temp.dll.dll Syntax public class NodeEnumAttribute : PropertyAttribute Remarks Enums with this attribute are not detected by EditorGui.ChangeCheck due to waiting before executing"
  },
  "api/Global.OpenUrl.html": {
    "href": "api/Global.OpenUrl.html",
    "title": "Class OpenUrl | Example Unity documentation",
    "keywords": "Class OpenUrl Inheritance Object OpenUrl Namespace : Global Assembly : cs.temp.dll.dll Syntax public class OpenUrl : MonoBehaviour Fields url Declaration public string url Field Value Type Description String Methods OpenUrlMethod() Declaration public void OpenUrlMethod()"
  },
  "api/Global.OwnBattleTracker.html": {
    "href": "api/Global.OwnBattleTracker.html",
    "title": "Class OwnBattleTracker | Example Unity documentation",
    "keywords": "Class OwnBattleTracker Inheritance Object OwnBattleTracker Namespace : Global Assembly : cs.temp.dll.dll Syntax public class OwnBattleTracker : MonoBehaviour Methods NotifyAttack(Int32) Declaration public void NotifyAttack(int index) Parameters Type Name Description Int32 index TotalTurns(Int32) Declaration public void TotalTurns(int value) Parameters Type Name Description Int32 value"
  },
  "api/Global.OwnBattleTracker.PromediumObject.html": {
    "href": "api/Global.OwnBattleTracker.PromediumObject.html",
    "title": "Class OwnBattleTracker.PromediumObject | Example Unity documentation",
    "keywords": "Class OwnBattleTracker.PromediumObject Inheritance Object OwnBattleTracker.PromediumObject Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class PromediumObject Fields TotalDuration Declaration public List<int> TotalDuration Field Value Type Description List < Int32 > Methods AddAtLast(Int32) Declaration public void AddAtLast(int index) Parameters Type Name Description Int32 index"
  },
  "api/Global.PalleteColors.html": {
    "href": "api/Global.PalleteColors.html",
    "title": "Class PalleteColors | Example Unity documentation",
    "keywords": "Class PalleteColors Inheritance Object PalleteColors Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class PalleteColors Fields _paletteColor Declaration public Color32[] _paletteColor Field Value Type Description Color32 [] _partID Declaration public string _partID Field Value Type Description String"
  },
  "api/Global.PartEntity.html": {
    "href": "api/Global.PartEntity.html",
    "title": "Class PartEntity | Example Unity documentation",
    "keywords": "Class PartEntity Inheritance Object PartEntity Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PartEntity : MonoBehaviour Fields FOLDER_NAME Declaration public static string FOLDER_NAME Field Value Type Description String Properties BodyPartID Declaration public string BodyPartID { get; set; } Property Value Type Description String Methods PutEvolution(Boolean) Declaration public void PutEvolution(bool isOn) Parameters Type Name Description Boolean isOn"
  },
  "api/Global.PartEntityModel.html": {
    "href": "api/Global.PartEntityModel.html",
    "title": "Class PartEntityModel | Example Unity documentation",
    "keywords": "Class PartEntityModel Inheritance Object PartEntityModel Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PartEntityModel Properties PartRarityModels Declaration public List<PartRarityModel> PartRarityModels { get; } Property Value Type Description List < PartRarityModel > PartType Declaration public PartType PartType { get; } Property Value Type Description PartType Methods AddEntity(RarityType, PartEntity) Declaration public void AddEntity(RarityType _rarityType, PartEntity _partEntity) Parameters Type Name Description RarityType _rarityType PartEntity _partEntity"
  },
  "api/Global.ParticleCollisionInstance.html": {
    "href": "api/Global.ParticleCollisionInstance.html",
    "title": "Class ParticleCollisionInstance | Example Unity documentation",
    "keywords": "Class ParticleCollisionInstance Inheritance Object ParticleCollisionInstance Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ParticleCollisionInstance : MonoBehaviour Fields DestoyMainEffect Declaration public bool DestoyMainEffect Field Value Type Description Boolean DestroyTimeDelay Declaration public float DestroyTimeDelay Field Value Type Description Single EffectsOnCollision Declaration public GameObject[] EffectsOnCollision Field Value Type Description GameObject [] Offset Declaration public float Offset Field Value Type Description Single rotationOffset Declaration public Vector3 rotationOffset Field Value Type Description Vector3 UseFirePointRotation Declaration public bool UseFirePointRotation Field Value Type Description Boolean useOnlyRotationOffset Declaration public bool useOnlyRotationOffset Field Value Type Description Boolean UseWorldSpacePosition Declaration public bool UseWorldSpacePosition Field Value Type Description Boolean"
  },
  "api/Global.PartIdRelation.html": {
    "href": "api/Global.PartIdRelation.html",
    "title": "Class PartIdRelation | Example Unity documentation",
    "keywords": "Class PartIdRelation Inheritance Object CharacterStyleRelation PartIdRelation Inherited Members CharacterStyleRelation.id Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class PartIdRelation : CharacterStyleRelation Fields name Declaration public string name Field Value Type Description String slotType Declaration public PartsOfCharacter slotType Field Value Type Description PartsOfCharacter sprite Declaration public Sprite sprite Field Value Type Description Sprite"
  },
  "api/Global.PartIndex.html": {
    "href": "api/Global.PartIndex.html",
    "title": "Class PartIndex | Example Unity documentation",
    "keywords": "Class PartIndex Index of all the current parts of the character Inheritance Object PartIndex Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PartIndex : SerializedScriptableObject Fields accessoriesPartNames Declaration public List<string> accessoriesPartNames Field Value Type Description List < String > bodyPartNames Declaration public List<string> bodyPartNames Field Value Type Description List < String > earsPartNames Declaration public List<string> earsPartNames Field Value Type Description List < String > headPartNames Declaration public List<string> headPartNames Field Value Type Description List < String > SetNames Declaration public Dictionary<string, string> SetNames Field Value Type Description Dictionary < String , String > tailPartNames Declaration public List<string> tailPartNames Field Value Type Description List < String > Methods ClearAllLists() Declaration public void ClearAllLists() GenerateRandomShinsei() Declaration public string GenerateRandomShinsei() Returns Type Description String GetPartsDna(String, Int32) Declaration public Dictionary<string, long> GetPartsDna(string shinseiDna, int partDigits) Parameters Type Name Description String shinseiDna Int32 partDigits Returns Type Description Dictionary < String , Int64 > GetShinseiPartTypes(String, Enum) Declaration public Dictionary<string, string> GetShinseiPartTypes(string shinseiDna, Enum genEnum) Parameters Type Name Description String shinseiDna Enum genEnum Returns Type Description Dictionary < String , String > GetShinseiRarity(String) Declaration public RarityType GetShinseiRarity(string shinseiDna) Parameters Type Name Description String shinseiDna Returns Type Description RarityType GetShinseiType(String) Declaration public CharacterType GetShinseiType(string shinseiDna) Parameters Type Name Description String shinseiDna Returns Type Description CharacterType ParsePartDNA(Int64) Declaration public string ParsePartDNA(long dna) Parameters Type Name Description Int64 dna Returns Type Description String ParseShinseiDNA(String, Int32, Int32) Declaration public string ParseShinseiDNA(string shinseiDna, int colorDigits, int partDigits) Parameters Type Name Description String shinseiDna Int32 colorDigits Int32 partDigits Returns Type Description String PopulateLists(String) Declaration public void PopulateLists(string entity) Parameters Type Name Description String entity SeparateShinseiParts(String, Int32) Declaration public Dictionary<string, string> SeparateShinseiParts(string shinseiDna, int partDigits) Parameters Type Name Description String shinseiDna Int32 partDigits Returns Type Description Dictionary < String , String > SetShinseiColor(String) Declaration public int SetShinseiColor(string dna) Parameters Type Name Description String dna Returns Type Description Int32"
  },
  "api/Global.PartMultipliers.html": {
    "href": "api/Global.PartMultipliers.html",
    "title": "Class PartMultipliers | Example Unity documentation",
    "keywords": "Class PartMultipliers Inheritance Object PartMultipliers Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PartMultipliers Fields commonPartMultiplier Declaration public float commonPartMultiplier Field Value Type Description Single epicPartMultiplier Declaration public float epicPartMultiplier Field Value Type Description Single legendaryPartMultiplier Declaration public float legendaryPartMultiplier Field Value Type Description Single rarePartMultiplier Declaration public float rarePartMultiplier Field Value Type Description Single uncommonPartMultiplier Declaration public float uncommonPartMultiplier Field Value Type Description Single"
  },
  "api/Global.PartRarityModel.html": {
    "href": "api/Global.PartRarityModel.html",
    "title": "Class PartRarityModel | Example Unity documentation",
    "keywords": "Class PartRarityModel Inheritance Object PartRarityModel Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PartRarityModel Constructors PartRarityModel(RarityType, List<PartEntity>) Declaration public PartRarityModel(RarityType _partRarityType, List<PartEntity> _partEntity) Parameters Type Name Description RarityType _partRarityType List < PartEntity > _partEntity Properties PartEntities Declaration public List<PartEntity> PartEntities { get; } Property Value Type Description List < PartEntity > PartRarityType Declaration public RarityType PartRarityType { get; } Property Value Type Description RarityType Methods AddEntity(PartEntity) Declaration public void AddEntity(PartEntity _partEntity) Parameters Type Name Description PartEntity _partEntity RemoveEntity(PartEntity) Declaration public void RemoveEntity(PartEntity _partEntity) Parameters Type Name Description PartEntity _partEntity"
  },
  "api/Global.PartSelector.html": {
    "href": "api/Global.PartSelector.html",
    "title": "Class PartSelector | Example Unity documentation",
    "keywords": "Class PartSelector Inheritance Object PartSelector Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PartSelector : MonoBehaviour Fields currentSelectorPart Declaration public TMP_Text currentSelectorPart Field Value Type Description TMP_Text leftButton Declaration public Button leftButton Field Value Type Description Button rigthButton Declaration public Button rigthButton Field Value Type Description Button selectorName Declaration public TMP_Text selectorName Field Value Type Description TMP_Text Properties BodyPart Declaration public PartType BodyPart { get; } Property Value Type Description PartType Methods SetBodyPart(PartType) Declaration public void SetBodyPart(PartType _bodyPart) Parameters Type Name Description PartType _bodyPart"
  },
  "api/Global.PartSlot.html": {
    "href": "api/Global.PartSlot.html",
    "title": "Class PartSlot | Example Unity documentation",
    "keywords": "Class PartSlot Inheritance Object PartSlot Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PartSlot : MonoBehaviour Fields bodyPart Declaration public PartType bodyPart Field Value Type Description PartType FOLDER_NAME Declaration public static string FOLDER_NAME Field Value Type Description String m_selectedChild Declaration public PartEntity m_selectedChild Field Value Type Description PartEntity Properties ChildrenLength Declaration public int ChildrenLength { get; } Property Value Type Description Int32 Childrens Declaration public PartEntity[] Childrens { get; } Property Value Type Description PartEntity [] SelectedChildName Declaration public string SelectedChildName { get; } Property Value Type Description String Methods ActiveBodyPart(Int32) Declaration public void ActiveBodyPart(int _index) Parameters Type Name Description Int32 _index ActiveBodyPartByName(String) Declaration public void ActiveBodyPartByName(string name) Parameters Type Name Description String name GetIndex() Declaration public int GetIndex() Returns Type Description Int32 Initialize() Declaration public void Initialize()"
  },
  "api/Global.PartStat.html": {
    "href": "api/Global.PartStat.html",
    "title": "Class PartStat | Example Unity documentation",
    "keywords": "Class PartStat Inheritance Object PartStat Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PartStat Fields baseMultipliers Declaration public BaseMultipliers baseMultipliers Field Value Type Description BaseMultipliers partMultipliers Declaration public PartMultipliers partMultipliers Field Value Type Description PartMultipliers partType Declaration public CharacterType partType Field Value Type Description CharacterType typeStatsAndMultipliers Declaration public TypeStatsAndMultipliers typeStatsAndMultipliers Field Value Type Description TypeStatsAndMultipliers"
  },
  "api/Global.PartType.html": {
    "href": "api/Global.PartType.html",
    "title": "Enum PartType | Example Unity documentation",
    "keywords": "Enum PartType Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum PartType Fields Name Description Accessory Body Ears Head Tail"
  },
  "api/Global.PendingVariableNPC.html": {
    "href": "api/Global.PendingVariableNPC.html",
    "title": "Class PendingVariableNPC | Example Unity documentation",
    "keywords": "Class PendingVariableNPC Call all necesary actions to leave the tournament Inheritance Object PendingVariableNPC Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PendingVariableNPC : MonoBehaviour Fields CheckTournamentInscription Declaration public CheckTournamentInscription CheckTournamentInscription Field Value Type Description CheckTournamentInscription Methods LeaveTournament() Declaration public void LeaveTournament() ShowVendor(Int32) Change between two npc with different dialogs in the same place Declaration public void ShowVendor(int value) Parameters Type Name Description Int32 value Index of npc"
  },
  "api/Global.PetInteraction.html": {
    "href": "api/Global.PetInteraction.html",
    "title": "Class PetInteraction | Example Unity documentation",
    "keywords": "Class PetInteraction Inheritance Object PetInteraction Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PetInteraction : MonoBehaviour Fields layerMaskForStyle Declaration public LayerMask layerMaskForStyle Field Value Type Description LayerMask Methods Hide() Declaration public void Hide() Init() Declaration public void Init() PetRotation() Declaration public void PetRotation() PlayAnimation(Single) Declaration public void PlayAnimation(float index) Parameters Type Name Description Single index Show() Declaration public void Show()"
  },
  "api/Global.PlayerDataManager.html": {
    "href": "api/Global.PlayerDataManager.html",
    "title": "Class PlayerDataManager | Example Unity documentation",
    "keywords": "Class PlayerDataManager Inheritance Object PlayerDataManager Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PlayerDataManager : MonoBehaviour Fields botChallengeId Declaration public string botChallengeId Field Value Type Description String cardToTest Declaration public List<int> cardToTest Field Value Type Description List < Int32 > characterStyleController Declaration public CharacterStyleController characterStyleController Field Value Type Description CharacterStyleController currentTournamentId Declaration public string currentTournamentId Field Value Type Description String currentTournamentStage Declaration public int currentTournamentStage Field Value Type Description Int32 endGamePoint Declaration public Transform endGamePoint Field Value Type Description Transform isBot Declaration public bool isBot Field Value Type Description Boolean isBotCreatorOfTournaments Declaration public bool isBotCreatorOfTournaments Field Value Type Description Boolean isFrenchKeyboardLayout Declaration public bool isFrenchKeyboardLayout Field Value Type Description Boolean isOnTheTournament Declaration public bool isOnTheTournament Field Value Type Description Boolean localPlayerData Declaration public LocalPlayerData localPlayerData Field Value Type Description LocalPlayerData localPlayerGameObject Declaration public GameObject localPlayerGameObject Field Value Type Description GameObject numberOfBots Declaration public int numberOfBots Field Value Type Description Int32 playerDataReady Declaration public Action playerDataReady Field Value Type Description Action Singleton Declaration public static PlayerDataManager Singleton Field Value Type Description PlayerDataManager Methods ButtonChangeShinseis() Declaration public void ButtonChangeShinseis() CardManagerFill(Dictionary<String, String>) Declaration public void CardManagerFill(Dictionary<string, string> data) Parameters Type Name Description Dictionary < String , String > data CharacterStyleFill(Dictionary<String, String>) Declaration public void CharacterStyleFill(Dictionary<string, string> data = null) Parameters Type Name Description Dictionary < String , String > data FillPlayerData() Declaration public Dictionary<string, string> FillPlayerData() Returns Type Description Dictionary < String , String > FillShinseiData() Declaration public Dictionary<string, string> FillShinseiData() Returns Type Description Dictionary < String , String > GetShinseis(GetUserDataResult) Declaration public void GetShinseis(GetUserDataResult getUserDataResult) Parameters Type Name Description GetUserDataResult getUserDataResult InitPlayerData(LoginResult) Create NewlyPlayerData Declaration public void InitPlayerData(LoginResult loginResult) Parameters Type Name Description LoginResult loginResult PlayerShinseisFill(Dictionary<String, String>) Declaration public void PlayerShinseisFill(Dictionary<string, string> data) Parameters Type Name Description Dictionary < String , String > data SetLocalPlayerId(UInt64) Declaration public void SetLocalPlayerId(ulong data) Parameters Type Name Description UInt64 data UpdateCharacterStyleForAnyReason() Declaration public void UpdateCharacterStyleForAnyReason() UpdatePlayerData() Declaration public void UpdatePlayerData() UpdatePlayerName(UpdateUserTitleDisplayNameResult) Declaration public void UpdatePlayerName(UpdateUserTitleDisplayNameResult displayNameResult) Parameters Type Name Description UpdateUserTitleDisplayNameResult displayNameResult Events OnDataObtained Declaration public event Action OnDataObtained Event Type Type Description Action"
  },
  "api/Global.PlayerIconController.html": {
    "href": "api/Global.PlayerIconController.html",
    "title": "Class PlayerIconController | Example Unity documentation",
    "keywords": "Class PlayerIconController Inheritance Object PlayerIconController Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PlayerIconController : MonoBehaviour Fields backpackIcon Declaration public GameObject backpackIcon Field Value Type Description GameObject combatIcon Declaration public GameObject combatIcon Field Value Type Description GameObject Methods ChangeIcon(CharacterStateEnum) Declaration public void ChangeIcon(CharacterStateEnum characterState) Parameters Type Name Description CharacterStateEnum characterState"
  },
  "api/Global.PlayerUI.html": {
    "href": "api/Global.PlayerUI.html",
    "title": "Class PlayerUI | Example Unity documentation",
    "keywords": "Class PlayerUI Inheritance Object PlayerUI Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PlayerUI : MonoBehaviour Fields accepted Declaration public bool accepted Field Value Type Description Boolean matchId Declaration public string matchId Field Value Type Description String Methods CancelMatch(Boolean) Declaration public void CancelMatch(bool hideSearch = true) Parameters Type Name Description Boolean hideSearch CleanPreviousMatch(String, Action) Declaration public void CleanPreviousMatch(string matchId, Action callback) Parameters Type Name Description String matchId Action callback DisplayMatchmakingOptions() Declaration public void DisplayMatchmakingOptions() HideNameTag(Boolean) Declaration public void HideNameTag(bool reset = false) Parameters Type Name Description Boolean reset OnOffDisplayName(Boolean) Declaration public void OnOffDisplayName(bool toggleState) Parameters Type Name Description Boolean toggleState OnSpawn(String) Declaration public void OnSpawn(string _displayName) Parameters Type Name Description String _displayName SearchMatch(Boolean) Declaration public void SearchMatch(bool initTimer = true) Parameters Type Name Description Boolean initTimer SearchMatchInitTimer() Declaration public void SearchMatchInitTimer() SetPlayerNameLabel(String) Declaration public void SetPlayerNameLabel(string newValue) Parameters Type Name Description String newValue TestMatchInit() Declaration public void TestMatchInit() ViewMatch() Declaration public void ViewMatch() WaitforOpponentToConfirm(GetMatchResult) Declaration public IEnumerator WaitforOpponentToConfirm(GetMatchResult matchResult) Parameters Type Name Description GetMatchResult matchResult Returns Type Description IEnumerator"
  },
  "api/Global.PlayfabManager.html": {
    "href": "api/Global.PlayfabManager.html",
    "title": "Class PlayfabManager | Example Unity documentation",
    "keywords": "Class PlayfabManager This works as bridge with playfab, all client petitions pass first here Inheritance Object PlayfabManager Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PlayfabManager : MonoBehaviour Fields debugDataOnServerRequest Declaration public bool debugDataOnServerRequest Field Value Type Description Boolean debugMessagePrefix Declaration public const string debugMessagePrefix = \"<color=orange>PlayfabManager battleServer message: </color>\" Field Value Type Description String OnCreateTicketFailed Declaration public UnityEvent OnCreateTicketFailed Field Value Type Description UnityEvent OnCreateTicketSuccess Declaration public UnityEvent<MultiplayerModels.CreateMatchmakingTicketResult> OnCreateTicketSuccess Field Value Type Description UnityEvent < MultiplayerModels.CreateMatchmakingTicketResult > OnGetCardsStoreFailed Declaration public UnityEvent OnGetCardsStoreFailed Field Value Type Description UnityEvent OnGetCardsStoreSuccess Declaration public UnityEvent<PlayFab.ClientModels.GetCatalogItemsResult> OnGetCardsStoreSuccess Field Value Type Description UnityEvent < PlayFab.ClientModels.GetCatalogItemsResult > OnLoginFailed Declaration public UnityEvent OnLoginFailed Field Value Type Description UnityEvent OnLoginSucces Declaration public UnityEvent<LoginResult> OnLoginSucces Field Value Type Description UnityEvent < LoginResult > OnMatchResultFailed Declaration public UnityEvent OnMatchResultFailed Field Value Type Description UnityEvent OnMatchResultSuccess Declaration public UnityEvent<MultiplayerModels.GetMatchResult> OnMatchResultSuccess Field Value Type Description UnityEvent < MultiplayerModels.GetMatchResult > OnPurchaseCardsFailed Declaration public UnityEvent<PlayFabError> OnPurchaseCardsFailed Field Value Type Description UnityEvent < PlayFabError > OnPurchaseCardsSuccess Declaration public UnityEvent<PurchaseItemResult> OnPurchaseCardsSuccess Field Value Type Description UnityEvent < PurchaseItemResult > OnSignupSuccess Declaration public UnityEvent<RegisterPlayFabUserResult> OnSignupSuccess Field Value Type Description UnityEvent < RegisterPlayFabUserResult > OnTicketResultFailed Declaration public UnityEvent OnTicketResultFailed Field Value Type Description UnityEvent OnTicketResultSuccess Declaration public UnityEvent<MultiplayerModels.GetMatchmakingTicketResult> OnTicketResultSuccess Field Value Type Description UnityEvent < MultiplayerModels.GetMatchmakingTicketResult > OnUpdateNameSuccess Declaration public UnityEvent<UpdateUserTitleDisplayNameResult> OnUpdateNameSuccess Field Value Type Description UnityEvent < UpdateUserTitleDisplayNameResult > OnUserCurrencyGetFailed Declaration public UnityEvent OnUserCurrencyGetFailed Field Value Type Description UnityEvent OnUserCurrencyGetSuccess Declaration public UnityEvent<PlayFab.ClientModels.GetUserInventoryResult> OnUserCurrencyGetSuccess Field Value Type Description UnityEvent < PlayFab.ClientModels.GetUserInventoryResult > Singleton Declaration public static PlayfabManager Singleton Field Value Type Description PlayfabManager Methods AddPlayerCurrency(Int32) Declaration public void AddPlayerCurrency(int amountToModify) Parameters Type Name Description Int32 amountToModify BattleServerCheckMatchConfirm(String, Int32, Action<ExecuteFunctionResult>, Action<PlayFabError>) Declaration public void BattleServerCheckMatchConfirm(string matchId, int spawnPoint, Action<ExecuteFunctionResult> resultCallback, Action<PlayFabError> errorCallback = null) Parameters Type Name Description String matchId Int32 spawnPoint Action < ExecuteFunctionResult > resultCallback Action < PlayFabError > errorCallback BattleServerCheckShinseisChoosed(String, Action<ExecuteFunctionResult>) Declaration public void BattleServerCheckShinseisChoosed(string matchId, Action<ExecuteFunctionResult> resultCallback) Parameters Type Name Description String matchId Action < ExecuteFunctionResult > resultCallback BattleServerCreateMatch(String, Action<ExecuteFunctionResult>) Declaration public void BattleServerCreateMatch(string matchId, Action<ExecuteFunctionResult> resultCallback) Parameters Type Name Description String matchId Action < ExecuteFunctionResult > resultCallback BattleServerGetMatchState(String, Boolean, Action<ExecuteFunctionResult>, Boolean, Boolean) Declaration public void BattleServerGetMatchState(string matchId, bool isViewer = false, Action<ExecuteFunctionResult> resultCallback = null, bool retryEndMatch = false, bool enemyDisconnected = false) Parameters Type Name Description String matchId Boolean isViewer Action < ExecuteFunctionResult > resultCallback Boolean retryEndMatch Boolean enemyDisconnected BattleServerSelectShinseis(String, CombatPlayer, List<Int32>, Action<ExecuteFunctionResult>, Action<PlayFabError>) Declaration public void BattleServerSelectShinseis(string matchId, CombatPlayer playerData, List<int> shinseisPlayer, Action<ExecuteFunctionResult> resultCallback, Action<PlayFabError> errorCallback) Parameters Type Name Description String matchId CombatPlayer playerData List < Int32 > shinseisPlayer Action < ExecuteFunctionResult > resultCallback Action < PlayFabError > errorCallback BattleServerSendTurn(String, Int32, Action<ExecuteFunctionResult>, Int32, Int32) Declaration public void BattleServerSendTurn(string matchId, int indexOfCard, Action<ExecuteFunctionResult> resultCallback, int counter = 0, int currentShinsei = 0) Parameters Type Name Description String matchId Int32 indexOfCard Action < ExecuteFunctionResult > resultCallback Int32 counter Int32 currentShinsei CancelMatchmaking(String, String) Declaration public void CancelMatchmaking(string queueName, string ticketId) Parameters Type Name Description String queueName String ticketId CreateMatchTicket(String, String, Int32, String) Create a matchmaking ticket to the specified Queue Declaration public void CreateMatchTicket(string uniqueId, string playerType, int skillLevel, string queueName) Parameters Type Name Description String uniqueId String playerType Int32 skillLevel String queueName GetLeaderboardAroundPlayer(String, Int32, String) Declaration public void GetLeaderboardAroundPlayer(string playerId, int maxResultCount, string leaderboardName) Parameters Type Name Description String playerId Int32 maxResultCount String leaderboardName GetLeaderboardEntries(Int32, Int32, String) Declaration public void GetLeaderboardEntries(int startPosition, int maxResultCount, string leaderboardName) Parameters Type Name Description Int32 startPosition Int32 maxResultCount String leaderboardName GetLeaderboardEntries(Int32, Int32, String, Action<GetLeaderboardResult>) Declaration public void GetLeaderboardEntries(int startPosition, int maxResultCount, string leaderboardName, Action<GetLeaderboardResult> Callback) Parameters Type Name Description Int32 startPosition Int32 maxResultCount String leaderboardName Action < GetLeaderboardResult > Callback GetMatch(String, String) Gets the created match under the specified ticket id Declaration public void GetMatch(string matchId, string queueName) Parameters Type Name Description String matchId String queueName GetPlayerCurrency() Declaration public void GetPlayerCurrency() GetStatistics(Action<List<StatisticValue>>) Declaration public void GetStatistics(Action<List<StatisticValue>> actionCallback) Parameters Type Name Description Action < List < StatisticValue >> actionCallback GetStoreCards() Declaration public void GetStoreCards() GetTicketState(String, String, Action<MultiplayerModels.GetMatchmakingTicketResult>) call this method every 6 to 10 seconds to query the specified ticket state Declaration public void GetTicketState(string ticketId, string queueName, Action<MultiplayerModels.GetMatchmakingTicketResult> result) Parameters Type Name Description String ticketId String queueName Action < MultiplayerModels.GetMatchmakingTicketResult > result GetUserData(String, List<String>, Action<PlayFab.ClientModels.GetUserDataResult>) Declaration public void GetUserData(string playfabId, List<string> targetKeys = null, Action<PlayFab.ClientModels.GetUserDataResult> OnResult = null) Parameters Type Name Description String playfabId List < String > targetKeys Action < PlayFab.ClientModels.GetUserDataResult > OnResult Login(String, String, Action<PlayFabError>, Boolean) Declaration public void Login(string email, string password, Action<PlayFabError> errorCallback = null, bool isTournamentCreationLogin = false) Parameters Type Name Description String email String password Action < PlayFabError > errorCallback Boolean isTournamentCreationLogin PurchaseCard(Int32, UInt32) Declaration public void PurchaseCard(int itemId, uint itemPrice) Parameters Type Name Description Int32 itemId UInt32 itemPrice RemoveUserData(List<String>, Action<UpdateUserDataResult>, Int32, PlayFab.ClientModels.UserDataPermission) Remove keys of user data Declaration public void RemoveUserData(List<string> keysToRemove, Action<UpdateUserDataResult> onResult = null, int timesTrying = 0, PlayFab.ClientModels.UserDataPermission permission = null) Parameters Type Name Description List < String > keysToRemove Action < UpdateUserDataResult > onResult Int32 timesTrying PlayFab.ClientModels.UserDataPermission permission RequestPasswordRecovery(String, Action<String>, Action<PlayFabError>) Declaration public void RequestPasswordRecovery(string email, Action<string> successCallback = null, Action<PlayFabError> errorCallback = null) Parameters Type Name Description String email Action < String > successCallback Action < PlayFabError > errorCallback SetUserData(Dictionary<String, String>, PlayFab.ClientModels.UserDataPermission) Declaration public void SetUserData(Dictionary<string, string> newData, PlayFab.ClientModels.UserDataPermission permission = null) Parameters Type Name Description Dictionary < String , String > newData PlayFab.ClientModels.UserDataPermission permission SignUp(String, String, String, Action<PlayFabError>) Register with user email and password Declaration public void SignUp(string userName, string userEmail, string password, Action<PlayFabError> errorCallback = null) Parameters Type Name Description String userName String userEmail String password Action < PlayFabError > errorCallback SubtractPlayerCurrency(Int32) Declaration public void SubtractPlayerCurrency(int amountToModify) Parameters Type Name Description Int32 amountToModify UpdateDisplayName(String) Declaration public void UpdateDisplayName(string newName) Parameters Type Name Description String newName UpdatePlayerStatistics(String, Int32) Declaration public void UpdatePlayerStatistics(string leaderboardName, int score) Parameters Type Name Description String leaderboardName Int32 score UpdateStatistic(String, Int32) Declaration public void UpdateStatistic(string statisticName, int value) Parameters Type Name Description String statisticName Int32 value Events OnGetLeaderboardsArroundPlayerSuccess Declaration public event Action<string> OnGetLeaderboardsArroundPlayerSuccess Event Type Type Description Action < String > OnGetLeaderboardsSuccess Declaration public event Action<string> OnGetLeaderboardsSuccess Event Type Type Description Action < String > OnSuccess Declaration public event Action<string> OnSuccess Event Type Type Description Action < String >"
  },
  "api/Global.PrefabSpawner.html": {
    "href": "api/Global.PrefabSpawner.html",
    "title": "Class PrefabSpawner | Example Unity documentation",
    "keywords": "Class PrefabSpawner Inheritance Object PrefabSpawner Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PrefabSpawner : MonoBehaviour Fields nameOfThePrefab Declaration public string nameOfThePrefab Field Value Type Description String prefabs Declaration public GameObject[] prefabs Field Value Type Description GameObject [] sceneCamera Declaration public Camera sceneCamera Field Value Type Description Camera Methods ChangePrefabIntex(Boolean) Declaration public void ChangePrefabIntex(bool bo) Parameters Type Name Description Boolean bo SpawnPrefab() Declaration public void SpawnPrefab()"
  },
  "api/Global.PutBackgroundMusic.html": {
    "href": "api/Global.PutBackgroundMusic.html",
    "title": "Class PutBackgroundMusic | Example Unity documentation",
    "keywords": "Class PutBackgroundMusic Inheritance Object PutBackgroundMusic Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PutBackgroundMusic : MonoBehaviour"
  },
  "api/Global.PutNightModeForVfx.html": {
    "href": "api/Global.PutNightModeForVfx.html",
    "title": "Class PutNightModeForVfx | Example Unity documentation",
    "keywords": "Class PutNightModeForVfx Inheritance Object PutNightModeForVfx Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PutNightModeForVfx : MonoBehaviour Fields targetHour Declaration public float targetHour Field Value Type Description Single"
  },
  "api/Global.RampGeneratorTDE.html": {
    "href": "api/Global.RampGeneratorTDE.html",
    "title": "Class RampGeneratorTDE | Example Unity documentation",
    "keywords": "Class RampGeneratorTDE Inheritance Object RampGeneratorTDE Namespace : Global Assembly : cs.temp.dll.dll Syntax public class RampGeneratorTDE : MonoBehaviour Fields mode Declaration public RampGeneratorTDE.Mode mode Field Value Type Description RampGeneratorTDE.Mode pathForPNG Declaration public string pathForPNG Field Value Type Description String procedrualGradientRamp Declaration public Gradient procedrualGradientRamp Field Value Type Description Gradient renderers Declaration public Renderer[] renderers Field Value Type Description Renderer [] Methods BakeGradient() Declaration public void BakeGradient() UpdateRampTexture() Declaration public void UpdateRampTexture()"
  },
  "api/Global.RampGeneratorTDE.Mode.html": {
    "href": "api/Global.RampGeneratorTDE.Mode.html",
    "title": "Enum RampGeneratorTDE.Mode | Example Unity documentation",
    "keywords": "Enum RampGeneratorTDE.Mode Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum Mode Fields Name Description BakeAndSaveAsTexture CreateAtStart UpdateEveryFrame"
  },
  "api/Global.RankRewardDto.html": {
    "href": "api/Global.RankRewardDto.html",
    "title": "Class RankRewardDto | Example Unity documentation",
    "keywords": "Class RankRewardDto Inheritance Object RankRewardDto Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class RankRewardDto Fields Bronze Declaration public List<RankRewardEntry> Bronze Field Value Type Description List < RankRewardEntry > Champion Declaration public List<RankRewardEntry> Champion Field Value Type Description List < RankRewardEntry > Gold Declaration public List<RankRewardEntry> Gold Field Value Type Description List < RankRewardEntry > Silver Declaration public List<RankRewardEntry> Silver Field Value Type Description List < RankRewardEntry >"
  },
  "api/Global.RankRewardEntry.html": {
    "href": "api/Global.RankRewardEntry.html",
    "title": "Class RankRewardEntry | Example Unity documentation",
    "keywords": "Class RankRewardEntry Inheritance Object RankRewardEntry Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class RankRewardEntry Fields position Declaration public int? position Field Value Type Description Nullable < Int32 > rewards Declaration public List<RewardEntry> rewards Field Value Type Description List < RewardEntry > thresholdDown Declaration public float thresholdDown Field Value Type Description Single thresholdUp Declaration public float thresholdUp Field Value Type Description Single"
  },
  "api/Global.RareThing.html": {
    "href": "api/Global.RareThing.html",
    "title": "Class RareThing | Example Unity documentation",
    "keywords": "Class RareThing This script solves a problem with WWise when you put the game in second plane at return all songs in queque play at time, and control the bird sounds Inheritance Object RareThing Namespace : Global Assembly : cs.temp.dll.dll Syntax public class RareThing : MonoBehaviour Fields Birds Declaration public AK.Wwise.Event Birds Field Value Type Description AK.Wwise.Event MyEvent Declaration public AK.Wwise.Event MyEvent Field Value Type Description AK.Wwise.Event Methods PlaySound(String) Declaration public void PlaySound(string state) Parameters Type Name Description String state"
  },
  "api/Global.RarityType.html": {
    "href": "api/Global.RarityType.html",
    "title": "Enum RarityType | Example Unity documentation",
    "keywords": "Enum RarityType Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum RarityType Fields Name Description Common Epic Legendary Legendary1 Legendary2 Legendary3 Legendary4 Legendary5 Rare Uncommon"
  },
  "api/Global.RecolorBehavior.html": {
    "href": "api/Global.RecolorBehavior.html",
    "title": "Class RecolorBehavior | Example Unity documentation",
    "keywords": "Class RecolorBehavior Inheritance Object RecolorBehavior Namespace : Global Assembly : cs.temp.dll.dll Syntax public class RecolorBehavior : MonoBehaviour Fields possibleColors Declaration public List<Color> possibleColors Field Value Type Description List < Color > Methods Init() Declaration public void Init()"
  },
  "api/Global.ReportBug.html": {
    "href": "api/Global.ReportBug.html",
    "title": "Class ReportBug | Example Unity documentation",
    "keywords": "Class ReportBug Inheritance Object ReportBug Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ReportBug : MonoBehaviour Methods SendBug() Declaration public void SendBug() TournamentRequest() Declaration public IEnumerator TournamentRequest() Returns Type Description IEnumerator"
  },
  "api/Global.RewardEntry.html": {
    "href": "api/Global.RewardEntry.html",
    "title": "Class RewardEntry | Example Unity documentation",
    "keywords": "Class RewardEntry Inheritance Object RewardEntry Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class RewardEntry Fields amount Declaration public int amount Field Value Type Description Int32 type Declaration public string type Field Value Type Description String"
  },
  "api/Global.RewardsRankingSystemController.html": {
    "href": "api/Global.RewardsRankingSystemController.html",
    "title": "Class RewardsRankingSystemController | Example Unity documentation",
    "keywords": "Class RewardsRankingSystemController Inheritance Object RewardsRankingSystemController Namespace : Global Assembly : cs.temp.dll.dll Syntax public class RewardsRankingSystemController : MonoBehaviour Fields container Declaration public Transform container Field Value Type Description Transform prefabEntry Declaration public EntryController prefabEntry Field Value Type Description EntryController rowPrefab Declaration public GameObject rowPrefab Field Value Type Description GameObject Methods InitRewardSystem(Division) Declaration public void InitRewardSystem(Division rewardSystem) Parameters Type Name Description Division rewardSystem"
  },
  "api/Global.RotateObject.html": {
    "href": "api/Global.RotateObject.html",
    "title": "Class RotateObject | Example Unity documentation",
    "keywords": "Class RotateObject Inheritance Object RotateObject Namespace : Global Assembly : cs.temp.dll.dll Syntax public class RotateObject : MonoBehaviour Fields m_delay Declaration public float m_delay Field Value Type Description Single RotateOffset Declaration public Vector3 RotateOffset Field Value Type Description Vector3"
  },
  "api/Global.RotateWithDrag.html": {
    "href": "api/Global.RotateWithDrag.html",
    "title": "Class RotateWithDrag | Example Unity documentation",
    "keywords": "Class RotateWithDrag Inheritance Object RotateWithDrag Namespace : Global Assembly : cs.temp.dll.dll Syntax public class RotateWithDrag : MonoBehaviour"
  },
  "api/Global.RotatorPillow.html": {
    "href": "api/Global.RotatorPillow.html",
    "title": "Class RotatorPillow | Example Unity documentation",
    "keywords": "Class RotatorPillow Inheritance Object RotatorPillow Namespace : Global Assembly : cs.temp.dll.dll Syntax public class RotatorPillow : MonoBehaviour"
  },
  "api/Global.SacredTailsLog.html": {
    "href": "api/Global.SacredTailsLog.html",
    "title": "Class SacredTailsLog | Example Unity documentation",
    "keywords": "Class SacredTailsLog Inheritance Object SacredTailsLog Namespace : Global Assembly : cs.temp.dll.dll Syntax public static class SacredTailsLog Fields isBot Declaration public static bool isBot Field Value Type Description Boolean messagesLogged Declaration public static List<string> messagesLogged Field Value Type Description List < String > Methods Init() Declaration public static void Init() LogErrorMessage(String, Boolean) Declaration public static void LogErrorMessage(string message, bool botDebug = false) Parameters Type Name Description String message Boolean botDebug LogErrorMessageForBot(String) Declaration public static void LogErrorMessageForBot(string message) Parameters Type Name Description String message LogMessage(String, Boolean) Declaration public static void LogMessage(string message, bool botDebug = false) Parameters Type Name Description String message Boolean botDebug LogMessageForBot(String) Declaration public static void LogMessageForBot(string message) Parameters Type Name Description String message OnEnd(Int32) Declaration public static void OnEnd(int numberOfBot) Parameters Type Name Description Int32 numberOfBot"
  },
  "api/Global.ScaleChange.html": {
    "href": "api/Global.ScaleChange.html",
    "title": "Class ScaleChange | Example Unity documentation",
    "keywords": "Class ScaleChange Inheritance Object ScaleChange Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ScaleChange : MonoBehaviour Fields m_startTime Declaration public float m_startTime Field Value Type Description Single m_Weight Declaration public float m_Weight Field Value Type Description Single"
  },
  "api/Global.ScrollArrows.html": {
    "href": "api/Global.ScrollArrows.html",
    "title": "Class ScrollArrows | Example Unity documentation",
    "keywords": "Class ScrollArrows Inheritance Object ScrollArrows Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ScrollArrows : MonoBehaviour"
  },
  "api/Global.SelectableUi.html": {
    "href": "api/Global.SelectableUi.html",
    "title": "Class SelectableUi | Example Unity documentation",
    "keywords": "Class SelectableUi Inheritance Object SelectableUi Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SelectableUi : MonoBehaviour Fields dontAddOnClickToButtons Declaration public bool dontAddOnClickToButtons Field Value Type Description Boolean selectable Declaration public int selectable Field Value Type Description Int32 selectableButtons Declaration public List<SelectableUiButton> selectableButtons Field Value Type Description List < SelectableUiButton > Methods Awake() Declaration public void Awake() InitButtons() Declaration public void InitButtons() OnClick(SelectableUiButton, Boolean) Declaration public void OnClick(SelectableUiButton selectableUiButton, bool selected = false) Parameters Type Name Description SelectableUiButton selectableUiButton Boolean selected TryChangeStateToSelectable() Declaration public void TryChangeStateToSelectable()"
  },
  "api/Global.SelectableUiButton.html": {
    "href": "api/Global.SelectableUiButton.html",
    "title": "Class SelectableUiButton | Example Unity documentation",
    "keywords": "Class SelectableUiButton Inheritance Object SelectableUiButton Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SelectableUiButton : MonoBehaviour Fields button Declaration public Button button Field Value Type Description Button Methods SetDisable() Declaration public void SetDisable() SetEnable() Declaration public void SetEnable() SetSelected() Declaration public void SetSelected() SetUnselected() Declaration public void SetUnselected()"
  },
  "api/Global.SerializableVector3.html": {
    "href": "api/Global.SerializableVector3.html",
    "title": "Class SerializableVector3 | Example Unity documentation",
    "keywords": "Class SerializableVector3 Inheritance Object SerializableVector3 Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SerializableVector3 Constructors SerializableVector3(Single, Single, Single) Declaration public SerializableVector3(float x, float y, float z) Parameters Type Name Description Single x Single y Single z SerializableVector3(Vector3) Declaration public SerializableVector3(Vector3 vector3) Parameters Type Name Description Vector3 vector3 Fields x Declaration public float x Field Value Type Description Single y Declaration public float y Field Value Type Description Single z Declaration public float z Field Value Type Description Single"
  },
  "api/Global.SettingsController.html": {
    "href": "api/Global.SettingsController.html",
    "title": "Class SettingsController | Example Unity documentation",
    "keywords": "Class SettingsController Inheritance Object SettingsController Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SettingsController : MonoBehaviour Methods ToggleSettingsPopUp() Declaration public void ToggleSettingsPopUp()"
  },
  "api/Global.Shinsei.html": {
    "href": "api/Global.Shinsei.html",
    "title": "Class Shinsei | Example Unity documentation",
    "keywords": "Class Shinsei Inheritance Object Shinsei Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class Shinsei Fields alteredStates Declaration public Dictionary<AlteredStateEnum, AlteredStateData> alteredStates Field Value Type Description Dictionary < AlteredStateEnum , AlteredStateData > didAlteredStateKillShinsei Declaration public bool didAlteredStateKillShinsei Field Value Type Description Boolean evadeChance Declaration public int evadeChance Field Value Type Description Int32 generation Declaration public string generation Field Value Type Description String healthAfterAlteredState Declaration public int healthAfterAlteredState Field Value Type Description Int32 reflectDamage Declaration public int reflectDamage Field Value Type Description Int32 ShinseiActionsIndex Declaration public List<int> ShinseiActionsIndex Field Value Type Description List < Int32 > ShinseiDna Declaration public string ShinseiDna Field Value Type Description String shinseiEnergy Declaration public int shinseiEnergy Field Value Type Description Int32 shinseiHealth Declaration public int shinseiHealth Field Value Type Description Int32 shinseiIcon Declaration public Sprite shinseiIcon Field Value Type Description Sprite shinseiName Declaration public string shinseiName Field Value Type Description String ShinseiOriginalStats Declaration public ShinseiStats ShinseiOriginalStats Field Value Type Description ShinseiStats shinseiRarity Declaration public RarityType shinseiRarity Field Value Type Description RarityType shinseiType Declaration public CharacterType shinseiType Field Value Type Description CharacterType"
  },
  "api/Global.ShinseiAnimBehaviour.html": {
    "href": "api/Global.ShinseiAnimBehaviour.html",
    "title": "Class ShinseiAnimBehaviour | Example Unity documentation",
    "keywords": "Class ShinseiAnimBehaviour Inheritance Object ShinseiAnimBehaviour Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ShinseiAnimBehaviour : StateMachineBehaviour Methods OnStateExit(Animator, AnimatorStateInfo, Int32) Declaration public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description Animator animator AnimatorStateInfo stateInfo Int32 layerIndex"
  },
  "api/Global.ShinseiStatsEnum.html": {
    "href": "api/Global.ShinseiStatsEnum.html",
    "title": "Enum ShinseiStatsEnum | Example Unity documentation",
    "keywords": "Enum ShinseiStatsEnum Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum ShinseiStatsEnum Fields Name Description Attack Defence Speed Stamina Vigor"
  },
  "api/Global.ShinseiVault.html": {
    "href": "api/Global.ShinseiVault.html",
    "title": "Class ShinseiVault | Example Unity documentation",
    "keywords": "Class ShinseiVault Inheritance Object ShinseiVault Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class ShinseiVault Fields ShinseiVaultList Declaration public List<Shinsei> ShinseiVaultList Field Value Type Description List < Shinsei >"
  },
  "api/Global.ShouldSerializeContractResolver.html": {
    "href": "api/Global.ShouldSerializeContractResolver.html",
    "title": "Class ShouldSerializeContractResolver | Example Unity documentation",
    "keywords": "Class ShouldSerializeContractResolver Inheritance Object ShouldSerializeContractResolver Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ShouldSerializeContractResolver : DefaultContractResolver Fields Instance Declaration public static readonly ShouldSerializeContractResolver Instance Field Value Type Description ShouldSerializeContractResolver Methods CreateProperty(MemberInfo, MemberSerialization) Declaration protected override JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization) Parameters Type Name Description MemberInfo member MemberSerialization memberSerialization Returns Type Description JsonProperty"
  },
  "api/Global.ShowHideDebug.html": {
    "href": "api/Global.ShowHideDebug.html",
    "title": "Class ShowHideDebug | Example Unity documentation",
    "keywords": "Class ShowHideDebug Inheritance Object ShowHideDebug Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ShowHideDebug : MonoBehaviour"
  },
  "api/Global.ShowPreviewOfSlot.html": {
    "href": "api/Global.ShowPreviewOfSlot.html",
    "title": "Class ShowPreviewOfSlot | Example Unity documentation",
    "keywords": "Class ShowPreviewOfSlot Inheritance Object ShowPreviewOfSlot Implements IPointerEnterHandler IPointerExitHandler Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ShowPreviewOfSlot : MonoBehaviour Fields shinseiPreviewPanel Declaration public ShinseiPreviewPanelManager shinseiPreviewPanel Field Value Type Description ShinseiPreviewPanelManager Methods OnPointerEnter(PointerEventData) Declaration public void OnPointerEnter(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData OnPointerExit(PointerEventData) Declaration public void OnPointerExit(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IPointerEnterHandler IPointerExitHandler"
  },
  "api/Global.SimpleObjectMake.html": {
    "href": "api/Global.SimpleObjectMake.html",
    "title": "Class SimpleObjectMake | Example Unity documentation",
    "keywords": "Class SimpleObjectMake Inheritance Object _ObjectMakeBase SimpleObjectMake Inherited Members _ObjectMakeBase.m_makeObjs _ObjectMakeBase.m_movePos _ObjectMakeBase.GetRandomValue(Single) _ObjectMakeBase.GetRandomVector(Vector3) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SimpleObjectMake : _ObjectMakeBase Fields m_randomRotationValue Declaration public Vector3 m_randomRotationValue Field Value Type Description Vector3"
  },
  "api/Global.SimpleVideoPlayer.html": {
    "href": "api/Global.SimpleVideoPlayer.html",
    "title": "Class SimpleVideoPlayer | Example Unity documentation",
    "keywords": "Class SimpleVideoPlayer Inheritance Object SimpleVideoPlayer Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SimpleVideoPlayer : MonoBehaviour"
  },
  "api/Global.SineCameraControllerTopDownEffects.html": {
    "href": "api/Global.SineCameraControllerTopDownEffects.html",
    "title": "Class SineCameraControllerTopDownEffects | Example Unity documentation",
    "keywords": "Class SineCameraControllerTopDownEffects Inheritance Object SineCameraControllerTopDownEffects Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SineCameraControllerTopDownEffects : MonoBehaviour Fields basePivot Declaration public Transform basePivot Field Value Type Description Transform camera Declaration public Camera camera Field Value Type Description Camera farPivot Declaration public Transform farPivot Field Value Type Description Transform maximumAngle Declaration public float maximumAngle Field Value Type Description Single rotationAmount Declaration public float rotationAmount Field Value Type Description Single rotationSpeed Declaration public float rotationSpeed Field Value Type Description Single scrollSpeed Declaration public float scrollSpeed Field Value Type Description Single"
  },
  "api/Global.SineUIControllerTopDownEffects.html": {
    "href": "api/Global.SineUIControllerTopDownEffects.html",
    "title": "Class SineUIControllerTopDownEffects | Example Unity documentation",
    "keywords": "Class SineUIControllerTopDownEffects Inheritance Object SineUIControllerTopDownEffects Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SineUIControllerTopDownEffects : MonoBehaviour Fields canvasGroup Declaration public CanvasGroup canvasGroup Field Value Type Description CanvasGroup nameInUI Declaration public Text nameInUI Field Value Type Description Text prefabSpawnerObject Declaration public PrefabSpawner prefabSpawnerObject Field Value Type Description PrefabSpawner Methods ChangeEffect(Boolean) Declaration public void ChangeEffect(bool bo) Parameters Type Name Description Boolean bo"
  },
  "api/Global.SkyChanger.html": {
    "href": "api/Global.SkyChanger.html",
    "title": "Class SkyChanger | Example Unity documentation",
    "keywords": "Class SkyChanger Inheritance Object SkyChanger Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SkyChanger : MonoBehaviour Methods ChangeSky(Single) Declaration public void ChangeSky(float currentTime) Parameters Type Name Description Single currentTime TestChangeSky() Declaration public void TestChangeSky()"
  },
  "api/Global.StageBracketData.html": {
    "href": "api/Global.StageBracketData.html",
    "title": "Class StageBracketData | Example Unity documentation",
    "keywords": "Class StageBracketData Inheritance Object StageBracketData Namespace : Global Assembly : cs.temp.dll.dll Syntax public class StageBracketData Fields brackets Declaration public Dictionary<string, BracketsData> brackets Field Value Type Description Dictionary < String , BracketsData >"
  },
  "api/Global.StatValueType.html": {
    "href": "api/Global.StatValueType.html",
    "title": "Enum StatValueType | Example Unity documentation",
    "keywords": "Enum StatValueType Stat value categiories, used of stat calculation Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum StatValueType Fields Name Description Balance Base Part"
  },
  "api/Global.StopMovementWhenEnable.html": {
    "href": "api/Global.StopMovementWhenEnable.html",
    "title": "Class StopMovementWhenEnable | Example Unity documentation",
    "keywords": "Class StopMovementWhenEnable Inheritance Object StopMovementWhenEnable Namespace : Global Assembly : cs.temp.dll.dll Syntax public class StopMovementWhenEnable : MonoBehaviour Methods DisableMovement(Boolean) Declaration public void DisableMovement(bool newState) Parameters Type Name Description Boolean newState"
  },
  "api/Global.SwapColorPropertyNameSO.html": {
    "href": "api/Global.SwapColorPropertyNameSO.html",
    "title": "Class SwapColorPropertyNameSO | Example Unity documentation",
    "keywords": "Class SwapColorPropertyNameSO Inheritance Object SwapColorPropertyNameSO Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SwapColorPropertyNameSO : ScriptableObject Fields _materialPropertyNames Declaration public string[] _materialPropertyNames Field Value Type Description String []"
  },
  "api/Global.TargetProjectile.html": {
    "href": "api/Global.TargetProjectile.html",
    "title": "Class TargetProjectile | Example Unity documentation",
    "keywords": "Class TargetProjectile Inheritance Object TargetProjectile Namespace : Global Assembly : cs.temp.dll.dll Syntax public class TargetProjectile : MonoBehaviour Fields Detached Declaration public GameObject[] Detached Field Value Type Description GameObject [] flash Declaration public GameObject flash Field Value Type Description GameObject hit Declaration public GameObject hit Field Value Type Description GameObject sideAngle Declaration public float sideAngle Field Value Type Description Single speed Declaration public float speed Field Value Type Description Single upAngle Declaration public float upAngle Field Value Type Description Single Methods UpdateTarget(Transform, Vector3) Declaration public void UpdateTarget(Transform targetPosition, Vector3 Offset) Parameters Type Name Description Transform targetPosition Vector3 Offset"
  },
  "api/Global.TerrainChangesDataSO.html": {
    "href": "api/Global.TerrainChangesDataSO.html",
    "title": "Class TerrainChangesDataSO | Example Unity documentation",
    "keywords": "Class TerrainChangesDataSO Inheritance Object TerrainChangesDataSO Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class TerrainChangesDataSO : SerializedScriptableObject Fields terrainChanges Declaration public List<BattleTerrainDataSO> terrainChanges Field Value Type Description List < BattleTerrainDataSO > Methods GetJsonAlteredStates() Declaration public void GetJsonAlteredStates()"
  },
  "api/Global.TestBotController.html": {
    "href": "api/Global.TestBotController.html",
    "title": "Class TestBotController | Example Unity documentation",
    "keywords": "Class TestBotController Inheritance Object TestBotController Namespace : Global Assembly : cs.temp.dll.dll Syntax public class TestBotController : MonoBehaviour Fields authController Declaration public AuthController authController Field Value Type Description AuthController botPlayfabIdsList Declaration public BotPlayfabIdsList botPlayfabIdsList Field Value Type Description BotPlayfabIdsList challengePlayerController Declaration public ChallengePlayerController challengePlayerController Field Value Type Description ChallengePlayerController localBotIndex Declaration public int localBotIndex Field Value Type Description Int32 MAX_NUMBER_OF_BOT Declaration public const int MAX_NUMBER_OF_BOT = 64 Field Value Type Description Int32 numberOfBots Declaration public int numberOfBots Field Value Type Description Int32 searchTournament Declaration public SearchAndShow searchTournament Field Value Type Description SearchAndShow timeToWaitForTournamentCreation Declaration public float timeToWaitForTournamentCreation Field Value Type Description Single tournamentCreationController Declaration public TournamentCreationController tournamentCreationController Field Value Type Description TournamentCreationController Methods CreateNewTournament(Action) Declaration public void CreateNewTournament(Action callback = null) Parameters Type Name Description Action callback Start() Declaration public void Start() StartNewMatch() Declaration public void StartNewMatch()"
  },
  "api/Global.ThirdPersonController.html": {
    "href": "api/Global.ThirdPersonController.html",
    "title": "Class ThirdPersonController | Example Unity documentation",
    "keywords": "Class ThirdPersonController Controll the behavior of the main character Inheritance Object ThirdPersonController Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ThirdPersonController : ThirdPersonCoreController Fields animator Declaration public List<Animator> animator Field Value Type Description List < Animator > CanBeBlocked Declaration public bool CanBeBlocked Field Value Type Description Boolean challengePlayerController Declaration public ChallengePlayerController challengePlayerController Field Value Type Description ChallengePlayerController currentMatchId Declaration public string currentMatchId Field Value Type Description String displayName Declaration public string displayName Field Value Type Description String distance Declaration public float distance Field Value Type Description Single EnableMovement Declaration public bool EnableMovement Field Value Type Description Boolean IsChatMode Declaration public bool IsChatMode Field Value Type Description Boolean IsLocalPlayer Declaration public bool IsLocalPlayer Field Value Type Description Boolean MaxDistanceToTeleport Declaration public float MaxDistanceToTeleport Field Value Type Description Single navmeshAgent Declaration public NavMeshAgent navmeshAgent Field Value Type Description NavMeshAgent OnDisablePLayer Declaration public Action OnDisablePLayer Field Value Type Description Action openTournamentButton Declaration public Button openTournamentButton Field Value Type Description Button playerIconController Declaration public PlayerIconController playerIconController Field Value Type Description PlayerIconController playerPersonalUI Declaration public GameObject playerPersonalUI Field Value Type Description GameObject playfabId Declaration public string playfabId Field Value Type Description String tournamentReadyController Declaration public TournamentReadyController tournamentReadyController Field Value Type Description TournamentReadyController Properties IsMovementBloqued Declaration public bool IsMovementBloqued { get; set; } Property Value Type Description Boolean Methods Init<T>(T) Declaration public override void Init<T>(T data) Parameters Type Name Description T data Type Parameters Name Description T MoveObject(Nullable<Vector3>) Declaration public void MoveObject(Vector3? replacePosition = null) Parameters Type Name Description Nullable < Vector3 > replacePosition PutPlayerInFacingCamera() Declaration public void PutPlayerInFacingCamera() SetStateIcon(CharacterStateEnum) Declaration public void SetStateIcon(CharacterStateEnum characterState) Parameters Type Name Description CharacterStateEnum characterState"
  },
  "api/Global.TimerService.html": {
    "href": "api/Global.TimerService.html",
    "title": "Class TimerService | Example Unity documentation",
    "keywords": "Class TimerService Inheritance Object TimerService Implements ITimer IService Namespace : Global Assembly : cs.temp.dll.dll Syntax public class TimerService : MonoBehaviour, ITimer Methods IsReady() Declaration public bool IsReady() Returns Type Description Boolean UpdateTimer(Single, String, Boolean) Declaration public string UpdateTimer(float timeInSeconds, string colorText = null, bool showHour = false) Parameters Type Name Description Single timeInSeconds String colorText Boolean showHour Returns Type Description String Implements ITimer IService"
  },
  "api/Global.TMPChangeColor.html": {
    "href": "api/Global.TMPChangeColor.html",
    "title": "Class TMPChangeColor | Example Unity documentation",
    "keywords": "Class TMPChangeColor Inheritance Object TMPChangeColor Namespace : Global Assembly : cs.temp.dll.dll Syntax public class TMPChangeColor : MonoBehaviour Fields currentHighlight Declaration public Color currentHighlight Field Value Type Description Color currentNormal Declaration public Color currentNormal Field Value Type Description Color highlight Declaration public Color highlight Field Value Type Description Color normal Declaration public Color normal Field Value Type Description Color Methods ChangeColor(Boolean) Declaration public void ChangeColor(bool black) Parameters Type Name Description Boolean black"
  },
  "api/Global.TournamentBracketsData.html": {
    "href": "api/Global.TournamentBracketsData.html",
    "title": "Class TournamentBracketsData | Example Unity documentation",
    "keywords": "Class TournamentBracketsData Inheritance Object TournamentBracketsData Namespace : Global Assembly : cs.temp.dll.dll Syntax public class TournamentBracketsData Fields maxPlayers Declaration public int maxPlayers Field Value Type Description Int32 stages Declaration public Dictionary<string, StageBracketData> stages Field Value Type Description Dictionary < String , StageBracketData >"
  },
  "api/Global.TournamentCamera.html": {
    "href": "api/Global.TournamentCamera.html",
    "title": "Class TournamentCamera | Example Unity documentation",
    "keywords": "Class TournamentCamera Inheritance Object TournamentCamera Namespace : Global Assembly : cs.temp.dll.dll Syntax public class TournamentCamera : MonoBehaviour Methods Hide() Declaration public void Hide() Show() Declaration public void Show()"
  },
  "api/Global.TranslateMove.html": {
    "href": "api/Global.TranslateMove.html",
    "title": "Class TranslateMove | Example Unity documentation",
    "keywords": "Class TranslateMove Inheritance Object TranslateMove Namespace : Global Assembly : cs.temp.dll.dll Syntax public class TranslateMove : MonoBehaviour Fields m_fowardMove Declaration public bool m_fowardMove Field Value Type Description Boolean m_power Declaration public float m_power Field Value Type Description Single m_reduceTime Declaration public float m_reduceTime Field Value Type Description Single m_rightMove Declaration public bool m_rightMove Field Value Type Description Boolean m_upMove Declaration public bool m_upMove Field Value Type Description Boolean"
  },
  "api/Global.TransparentBackgroundScreenshotRecorder.html": {
    "href": "api/Global.TransparentBackgroundScreenshotRecorder.html",
    "title": "Class TransparentBackgroundScreenshotRecorder | Example Unity documentation",
    "keywords": "Class TransparentBackgroundScreenshotRecorder Inheritance Object TransparentBackgroundScreenshotRecorder Namespace : Global Assembly : cs.temp.dll.dll Syntax public class TransparentBackgroundScreenshotRecorder : MonoBehaviour Fields folderBaseName Declaration public string folderBaseName Field Value Type Description String frameRate Declaration public int frameRate Field Value Type Description Int32 framesToCapture Declaration public int framesToCapture Field Value Type Description Int32 OnTakePhoto Declaration public static Action OnTakePhoto Field Value Type Description Action"
  },
  "api/Global.TriggerNotificator.html": {
    "href": "api/Global.TriggerNotificator.html",
    "title": "Class TriggerNotificator | Example Unity documentation",
    "keywords": "Class TriggerNotificator Inheritance Object TriggerNotificator Namespace : Global Assembly : cs.temp.dll.dll Syntax public class TriggerNotificator : MonoBehaviour Methods Notify() Declaration public void Notify()"
  },
  "api/Global.TypesActions.html": {
    "href": "api/Global.TypesActions.html",
    "title": "Class TypesActions | Example Unity documentation",
    "keywords": "Class TypesActions Inheritance Object TypesActions Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class TypesActions Fields actionsData Declaration public ActionDataList actionsData Field Value Type Description ActionDataList typeOfShinsei Declaration public CharacterType typeOfShinsei Field Value Type Description CharacterType"
  },
  "api/Global.TypesOfTerrainEnum.html": {
    "href": "api/Global.TypesOfTerrainEnum.html",
    "title": "Enum TypesOfTerrainEnum | Example Unity documentation",
    "keywords": "Enum TypesOfTerrainEnum Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum TypesOfTerrainEnum Fields Name Description Eclipse Flames Light Snow"
  },
  "api/Global.TypeStatsAndMultipliers.html": {
    "href": "api/Global.TypeStatsAndMultipliers.html",
    "title": "Class TypeStatsAndMultipliers | Example Unity documentation",
    "keywords": "Class TypeStatsAndMultipliers Inheritance Object TypeStatsAndMultipliers Namespace : Global Assembly : cs.temp.dll.dll Syntax public class TypeStatsAndMultipliers Fields elementBonusMultiplier1 Declaration public float elementBonusMultiplier1 Field Value Type Description Single elementPenaltyMultiplier Declaration public float elementPenaltyMultiplier Field Value Type Description Single globalPartStat Declaration public int globalPartStat Field Value Type Description Int32"
  },
  "api/Global.UIColorSwapper.html": {
    "href": "api/Global.UIColorSwapper.html",
    "title": "Class UIColorSwapper | Example Unity documentation",
    "keywords": "Class UIColorSwapper Inheritance Object UIColorSwapper Namespace : Global Assembly : cs.temp.dll.dll Syntax public class UIColorSwapper : MonoBehaviour"
  },
  "api/Global.UIDisolver.html": {
    "href": "api/Global.UIDisolver.html",
    "title": "Class UIDisolver | Example Unity documentation",
    "keywords": "Class UIDisolver Inheritance Object UIDisolver Namespace : Global Assembly : cs.temp.dll.dll Syntax public class UIDisolver : MonoBehaviour Methods SetTargetValue(Single) Declaration public void SetTargetValue(float value) Parameters Type Name Description Single value ToggleMaximumValius() Declaration public void ToggleMaximumValius()"
  },
  "api/Global.UiEmoji.html": {
    "href": "api/Global.UiEmoji.html",
    "title": "Class UiEmoji | Example Unity documentation",
    "keywords": "Class UiEmoji Inheritance Object UiEmoji Namespace : Global Assembly : cs.temp.dll.dll Syntax public class UiEmoji : MonoBehaviour Methods Init() Declaration public void Init() ResetLastEmoji() Declaration public void ResetLastEmoji() Show(Boolean) Declaration public void Show(bool state) Parameters Type Name Description Boolean state Start() Declaration public void Start() ToggleShow() Declaration public void ToggleShow()"
  },
  "api/Global.UiTrigger.html": {
    "href": "api/Global.UiTrigger.html",
    "title": "Class UiTrigger | Example Unity documentation",
    "keywords": "Class UiTrigger Inheritance Object IUiTrigger UiTrigger Inherited Members IUiTrigger.OnTriggerEnterEvent IUiTrigger.OnTriggerExitEvent IUiTrigger.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class UiTrigger : IUiTrigger Methods HideVendor() Declaration public void HideVendor() ShowVendorUi() Declaration public void ShowVendorUi()"
  },
  "api/Global.UIViewerTrigger.html": {
    "href": "api/Global.UIViewerTrigger.html",
    "title": "Class UIViewerTrigger | Example Unity documentation",
    "keywords": "Class UIViewerTrigger Inheritance Object IUiTrigger UIViewerTrigger Inherited Members IUiTrigger.OnTriggerEnterEvent IUiTrigger.OnTriggerExitEvent IUiTrigger.Update() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class UIViewerTrigger : IUiTrigger Fields lobbyCamera Declaration public CinemachineVirtualCamera lobbyCamera Field Value Type Description CinemachineVirtualCamera viewerCamera Declaration public CinemachineVirtualCamera viewerCamera Field Value Type Description CinemachineVirtualCamera Methods ChangeCamera() Declaration public void ChangeCamera()"
  },
  "api/Global.UnityNewtonsoftJsonSerializer.html": {
    "href": "api/Global.UnityNewtonsoftJsonSerializer.html",
    "title": "Class UnityNewtonsoftJsonSerializer | Example Unity documentation",
    "keywords": "Class UnityNewtonsoftJsonSerializer Inheritance Object UnityNewtonsoftJsonSerializer Namespace : Global Assembly : cs.temp.dll.dll Syntax public class UnityNewtonsoftJsonSerializer Methods Deserialize<T>(String) Declaration public static T Deserialize<T>(string text) Parameters Type Name Description String text Returns Type Description T Type Parameters Name Description T Serialize(Object) Declaration public static string Serialize(object obj) Parameters Type Name Description Object obj Returns Type Description String"
  },
  "api/Global.UnlockedCharacterStyleInfo.html": {
    "href": "api/Global.UnlockedCharacterStyleInfo.html",
    "title": "Class UnlockedCharacterStyleInfo | Example Unity documentation",
    "keywords": "Class UnlockedCharacterStyleInfo Inheritance Object UnlockedCharacterStyleInfo Namespace : Global Assembly : cs.temp.dll.dll Syntax public class UnlockedCharacterStyleInfo Fields unlockedColors Declaration public List<int> unlockedColors Field Value Type Description List < Int32 > unlockedParts Declaration public List<int> unlockedParts Field Value Type Description List < Int32 >"
  },
  "api/Global.Vector3Extensions.html": {
    "href": "api/Global.Vector3Extensions.html",
    "title": "Class Vector3Extensions | Example Unity documentation",
    "keywords": "Class Vector3Extensions Inheritance Object Vector3Extensions Namespace : Global Assembly : cs.temp.dll.dll Syntax public static class Vector3Extensions Methods FromVector3(Vector3) Declaration public static SerializableVector3 FromVector3(this Vector3 vector3) Parameters Type Name Description Vector3 vector3 Returns Type Description SerializableVector3 ToVector3(SerializableVector3) Declaration public static Vector3 ToVector3(this SerializableVector3 serializedVector3) Parameters Type Name Description SerializableVector3 serializedVector3 Returns Type Description Vector3"
  },
  "api/Global.VendorHeadTracking.html": {
    "href": "api/Global.VendorHeadTracking.html",
    "title": "Class VendorHeadTracking | Example Unity documentation",
    "keywords": "Class VendorHeadTracking Inheritance Object VendorHeadTracking Namespace : Global Assembly : cs.temp.dll.dll Syntax public class VendorHeadTracking : MonoBehaviour Methods SetOriginal() Declaration public void SetOriginal() SetSeeTarget(Transform) Declaration public void SetSeeTarget(Transform colisionTarget) Parameters Type Name Description Transform colisionTarget"
  },
  "api/Global.VendorSeeArea.html": {
    "href": "api/Global.VendorSeeArea.html",
    "title": "Class VendorSeeArea | Example Unity documentation",
    "keywords": "Class VendorSeeArea Inheritance Object VendorSeeArea Namespace : Global Assembly : cs.temp.dll.dll Syntax public class VendorSeeArea : NetworkBehaviour"
  },
  "api/Global.VersusPanelController.html": {
    "href": "api/Global.VersusPanelController.html",
    "title": "Class VersusPanelController | Example Unity documentation",
    "keywords": "Class VersusPanelController Inheritance Object VersusPanelController Namespace : Global Assembly : cs.temp.dll.dll Syntax public class VersusPanelController : MonoBehaviour Methods Hide() Declaration public void Hide() Init(List<Sprite>, List<CharacterType>, String, String) Declaration public void Init(List<Sprite> sprites, List<CharacterType> types, string playerName, string enemyName) Parameters Type Name Description List < Sprite > sprites List < CharacterType > types String playerName String enemyName Show() Declaration public void Show()"
  },
  "api/Global.VFXPositionData.html": {
    "href": "api/Global.VFXPositionData.html",
    "title": "Class VFXPositionData | Example Unity documentation",
    "keywords": "Class VFXPositionData Inheritance Object VFXPositionData Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class VFXPositionData Fields positions Declaration public Transform positions Field Value Type Description Transform vfxPosEnum Declaration public VFXPositionEnum vfxPosEnum Field Value Type Description VFXPositionEnum"
  },
  "api/Global.VFXPositionEnum.html": {
    "href": "api/Global.VFXPositionEnum.html",
    "title": "Enum VFXPositionEnum | Example Unity documentation",
    "keywords": "Enum VFXPositionEnum Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum VFXPositionEnum Fields Name Description ARENA_CENTER SHINSEI_ENEMY SHINSEI_PLAYER"
  },
  "api/Global.VFXtester.html": {
    "href": "api/Global.VFXtester.html",
    "title": "Class VFXtester | Example Unity documentation",
    "keywords": "Class VFXtester Inheritance Object VFXtester Namespace : Global Assembly : cs.temp.dll.dll Syntax public class VFXtester : MonoBehaviour Fields isLocalPlayer Declaration public bool isLocalPlayer Field Value Type Description Boolean targetIndex Declaration public VFXPositionEnum targetIndex Field Value Type Description VFXPositionEnum turnsController Declaration public TurnsController turnsController Field Value Type Description TurnsController vfxIndex Declaration public int vfxIndex Field Value Type Description Int32 vFXInstancer Declaration public VFXInstancer vFXInstancer Field Value Type Description VFXInstancer Methods CallVFX() Declaration public void CallVFX()"
  },
  "api/Global.VFXTypeData.html": {
    "href": "api/Global.VFXTypeData.html",
    "title": "Class VFXTypeData | Example Unity documentation",
    "keywords": "Class VFXTypeData Inheritance Object VFXTypeData Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class VFXTypeData Fields type Declaration public CharacterType type Field Value Type Description CharacterType vfxPrefab Declaration public GameObject vfxPrefab Field Value Type Description GameObject"
  },
  "api/Global.WhiteMageController.html": {
    "href": "api/Global.WhiteMageController.html",
    "title": "Class WhiteMageController | Example Unity documentation",
    "keywords": "Class WhiteMageController Inheritance Object WhiteMageController Namespace : Global Assembly : cs.temp.dll.dll Syntax public class WhiteMageController : MonoBehaviour Fields aim Declaration public Image aim Field Value Type Description Image allowPlayerRotation Declaration public float allowPlayerRotation Field Value Type Description Single anim Declaration public Animator anim Field Value Type Description Animator blockRotationPlayer Declaration public bool blockRotationPlayer Field Value Type Description Boolean cam Declaration public Camera cam Field Value Type Description Camera cameraShaker Declaration public HS_CameraShaker cameraShaker Field Value Type Description HS_CameraShaker canMove Declaration public bool canMove Field Value Type Description Boolean castingTime Declaration public float[] castingTime Field Value Type Description Single [] collidingLayer Declaration public LayerMask collidingLayer Field Value Type Description LayerMask controller Declaration public CharacterController controller Field Value Type Description CharacterController desiredMoveDirection Declaration public Vector3 desiredMoveDirection Field Value Type Description Vector3 desiredRotationSpeed Declaration public float desiredRotationSpeed Field Value Type Description Single FirePoint Declaration public Transform FirePoint Field Value Type Description Transform fireRate Declaration public float fireRate Field Value Type Description Single HorizontalAnimSmoothTime Declaration public float HorizontalAnimSmoothTime Field Value Type Description Single InputX Declaration public float InputX Field Value Type Description Single InputZ Declaration public float InputZ Field Value Type Description Single isGrounded Declaration public bool isGrounded Field Value Type Description Boolean parentPlace Declaration public Transform parentPlace Field Value Type Description Transform Prefabs Declaration public GameObject[] Prefabs Field Value Type Description GameObject [] PrefabsCast Declaration public GameObject[] PrefabsCast Field Value Type Description GameObject [] screenTargets Declaration public List<Transform> screenTargets Field Value Type Description List < Transform > skillsRange Declaration public float skillsRange Field Value Type Description Single Speed Declaration public float Speed Field Value Type Description Single StartAnimTime Declaration public float StartAnimTime Field Value Type Description Single StopAnimTime Declaration public float StopAnimTime Field Value Type Description Single TargetMarker Declaration public GameObject TargetMarker Field Value Type Description GameObject TargetMarker2 Declaration public GameObject TargetMarker2 Field Value Type Description GameObject uiOffset Declaration public Vector2 uiOffset Field Value Type Description Vector2 ultIcons Declaration public GameObject[] ultIcons Field Value Type Description GameObject [] UltimatePrefab Declaration public GameObject[] UltimatePrefab Field Value Type Description GameObject [] velocity Declaration public float velocity Field Value Type Description Single VerticalAnimTime Declaration public float VerticalAnimTime Field Value Type Description Single Methods Attack(Int32) Declaration public IEnumerator Attack(int EffectNumber) Parameters Type Name Description Int32 EffectNumber Returns Type Description IEnumerator CastSoundPlay() Declaration public void CastSoundPlay() FastPlay(Int32, Single, Single) Declaration public IEnumerator FastPlay(int EffectNumber, float castDelay, float endDelay) Parameters Type Name Description Int32 EffectNumber Single castDelay Single endDelay Returns Type Description IEnumerator FastPlayTimer(Int32) Declaration public IEnumerator FastPlayTimer(int EffectNumber) Parameters Type Name Description Int32 EffectNumber Returns Type Description IEnumerator FrontAttack(Int32) Declaration public IEnumerator FrontAttack(int EffectNumber) Parameters Type Name Description Int32 EffectNumber Returns Type Description IEnumerator MainSoundPlay() Declaration public void MainSoundPlay() PreCast(Int32) Declaration public IEnumerator PreCast(int EffectNumber) Parameters Type Name Description Int32 EffectNumber Returns Type Description IEnumerator RotateToTarget(Single, Vector3) Declaration public IEnumerator RotateToTarget(float rotatingTime, Vector3 targetPoint) Parameters Type Name Description Single rotatingTime Vector3 targetPoint Returns Type Description IEnumerator StopCasting(Int32) Declaration public void StopCasting(int EffectNumber) Parameters Type Name Description Int32 EffectNumber targetIndex() Declaration public int targetIndex() Returns Type Description Int32 Ult(Int32, Single, Single, Vector3, Quaternion, Boolean) Declaration public IEnumerator Ult(int EffectNumber, float enableTime, float dissableTime, Vector3 pivotPosition, Quaternion pivotRotation, bool ChangePos) Parameters Type Name Description Int32 EffectNumber Single enableTime Single dissableTime Vector3 pivotPosition Quaternion pivotRotation Boolean ChangePos Returns Type Description IEnumerator"
  },
  "api/Global.WorldPositionateElement.html": {
    "href": "api/Global.WorldPositionateElement.html",
    "title": "Class WorldPositionateElement | Example Unity documentation",
    "keywords": "Class WorldPositionateElement Inheritance Object WorldPositionateElement Namespace : Global Assembly : cs.temp.dll.dll Syntax public class WorldPositionateElement : MonoBehaviour Fields offset Declaration public Vector3 offset Field Value Type Description Vector3 target Declaration public Transform target Field Value Type Description Transform"
  },
  "api/Global.ZoneTrigger.html": {
    "href": "api/Global.ZoneTrigger.html",
    "title": "Class ZoneTrigger | Example Unity documentation",
    "keywords": "Class ZoneTrigger Inheritance Object ZoneTrigger Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ZoneTrigger : MonoBehaviour Fields repeatTime Declaration public float repeatTime Field Value Type Description Single stableEffect Declaration public ParticleSystem stableEffect Field Value Type Description ParticleSystem triggerEffect Declaration public ParticleSystem triggerEffect Field Value Type Description ParticleSystem"
  },
  "api/Timba.Characters.html": {
    "href": "api/Timba.Characters.html",
    "title": "Namespace Timba.Characters | Example Unity documentation",
    "keywords": "Namespace Timba.Characters Classes PartVisual"
  },
  "api/Timba.Characters.PartVisual.html": {
    "href": "api/Timba.Characters.PartVisual.html",
    "title": "Class PartVisual | Example Unity documentation",
    "keywords": "Class PartVisual Inheritance Object PartVisual Namespace : Timba.Characters Assembly : cs.temp.dll.dll Syntax public class PartVisual : MonoBehaviour Methods ChangeSpritePalette(Color32[]) Declaration public void ChangeSpritePalette(Color32[] _colors) Parameters Type Name Description Color32 [] _colors RecolorPartImages(Action<Material>) Declaration public void RecolorPartImages(Action<Material> _recolorAction) Parameters Type Name Description Action < Material > _recolorAction RecolorPartSprites(Action<MaterialPropertyBlock>) Declaration public void RecolorPartSprites(Action<MaterialPropertyBlock> _recolorAction) Parameters Type Name Description Action < MaterialPropertyBlock > _recolorAction SetPowered(Boolean) Turns on/off a part. Parts are turned off for building and other no-gameplay situations. Current implementation tries to be generic. Might need to change in the future Declaration public void SetPowered(bool isPowered) Parameters Type Name Description Boolean isPowered Events OnPowered Declaration public event Action<bool> OnPowered Event Type Type Description Action < Boolean >"
  },
  "api/Timba.Games.CharacterFactory.CharacterBuilder.html": {
    "href": "api/Timba.Games.CharacterFactory.CharacterBuilder.html",
    "title": "Class CharacterBuilder | Example Unity documentation",
    "keywords": "Class CharacterBuilder Recives a string with the character's structure and Instantiates the respective mesh Inheritance Object Utils.Singleton Utils.Singleton < CharacterBuilder > CharacterBuilder Namespace : Timba.Games.CharacterFactory Assembly : cs.temp.dll.dll Syntax public class CharacterBuilder : Singleton<CharacterBuilder> Methods InstantiateCharacter(Int32, Transform, Vector3) Declaration public GameObject InstantiateCharacter(int index, Transform parent, Vector3 position) Parameters Type Name Description Int32 index Transform parent Vector3 position Returns Type Description GameObject UpdateVisual(String, CharacterSlot) Declaration public void UpdateVisual(string characterStructure, CharacterSlot targetCharacter) Parameters Type Name Description String characterStructure CharacterSlot targetCharacter"
  },
  "api/Timba.Games.CharacterFactory.CharacterSelector.html": {
    "href": "api/Timba.Games.CharacterFactory.CharacterSelector.html",
    "title": "Class CharacterSelector | Example Unity documentation",
    "keywords": "Class CharacterSelector Inheritance Object CharacterSelector Namespace : Timba.Games.CharacterFactory Assembly : cs.temp.dll.dll Syntax public class CharacterSelector : MonoBehaviour Fields button Declaration public Button button Field Value Type Description Button characterName Declaration public TMP_Text characterName Field Value Type Description TMP_Text Methods SetButtonAction(Action, Boolean) Declaration public void SetButtonAction(Action _action, bool _isClearActionsSubscribed = true) Parameters Type Name Description Action _action Boolean _isClearActionsSubscribed"
  },
  "api/Timba.Games.CharacterFactory.CharacterSlot.html": {
    "href": "api/Timba.Games.CharacterFactory.CharacterSlot.html",
    "title": "Class CharacterSlot | Example Unity documentation",
    "keywords": "Class CharacterSlot Inheritance Object CharacterSlot Namespace : Timba.Games.CharacterFactory Assembly : cs.temp.dll.dll Syntax public class CharacterSlot : MonoBehaviour Fields animator Declaration public Animator animator Field Value Type Description Animator characterCode Declaration public string characterCode Field Value Type Description String characterID Declaration public string characterID Field Value Type Description String FOLDER_NAME Declaration public static string FOLDER_NAME Field Value Type Description String shinsei Declaration public Shinsei shinsei Field Value Type Description Shinsei Properties PartSlots Declaration public PartSlot[] PartSlots { get; } Property Value Type Description PartSlot [] Methods Initialize() Declaration public void Initialize() SetCharacterCode(String, Boolean) Declaration public void SetCharacterCode(string code, bool isGenerator = false) Parameters Type Name Description String code Boolean isGenerator SetShinseiEvolution(Boolean) Declaration public void SetShinseiEvolution(bool isOn) Parameters Type Name Description Boolean isOn UpdateVisual() Declaration public void UpdateVisual()"
  },
  "api/Timba.Games.CharacterFactory.CharacterType.html": {
    "href": "api/Timba.Games.CharacterFactory.CharacterType.html",
    "title": "Enum CharacterType | Example Unity documentation",
    "keywords": "Enum CharacterType here should be listed all the possible character families or types to match the assets naming conventions Namespace : Timba.Games.CharacterFactory Assembly : cs.temp.dll.dll Syntax public enum CharacterType Fields Name Description Celestial Cursed Dark Dreamer Earth Light Mecha Nature Ocean Sky Snow Sun Volt"
  },
  "api/Timba.Games.CharacterFactory.CharacterUtils.html": {
    "href": "api/Timba.Games.CharacterFactory.CharacterUtils.html",
    "title": "Class CharacterUtils | Example Unity documentation",
    "keywords": "Class CharacterUtils Inheritance Object CharacterUtils Namespace : Timba.Games.CharacterFactory Assembly : cs.temp.dll.dll Syntax public class CharacterUtils : MonoBehaviour Methods GeneratePartDNA(String) Declaration public static string GeneratePartDNA(string partEntityName) Parameters Type Name Description String partEntityName Returns Type Description String GetRarityStat(String) Declaration public static int GetRarityStat(string raritydna) Parameters Type Name Description String raritydna Returns Type Description Int32 GetTypeValues(Enum, String) Declaration public static string GetTypeValues(Enum genericEnum, string partName) Parameters Type Name Description Enum genericEnum String partName Returns Type Description String ParsePartDNA(Int64) Declaration public static string ParsePartDNA(long dna) Parameters Type Name Description Int64 dna Returns Type Description String ParseRarityDNA(Int64) Declaration public static string ParseRarityDNA(long dna) Parameters Type Name Description Int64 dna Returns Type Description String"
  },
  "api/Timba.Games.CharacterFactory.ColorSwapper3D.html": {
    "href": "api/Timba.Games.CharacterFactory.ColorSwapper3D.html",
    "title": "Class ColorSwapper3D | Example Unity documentation",
    "keywords": "Class ColorSwapper3D Inheritance Object Utils.Singleton Utils.Singleton < ColorSwapper3D > ColorSwapper3D Namespace : Timba.Games.CharacterFactory Assembly : cs.temp.dll.dll Syntax public class ColorSwapper3D : Singleton<ColorSwapper3D> Fields _colorsScriptableObject Declaration public ColorsSO _colorsScriptableObject Field Value Type Description ColorsSO _materialColorPropertyName Declaration public SwapColorPropertyNameSO _materialColorPropertyName Field Value Type Description SwapColorPropertyNameSO isCharacterViewScene Declaration public bool isCharacterViewScene Field Value Type Description Boolean PaletteID Declaration public string PaletteID Field Value Type Description String Methods AddTo3DPartList(RecolorablePart3D) Declaration public void AddTo3DPartList(RecolorablePart3D part) Parameters Type Name Description RecolorablePart3D part AssignPallet(Int32) Declaration public void AssignPallet(int index) Parameters Type Name Description Int32 index RemovePart(RecolorablePart3D) Declaration public void RemovePart(RecolorablePart3D part) Parameters Type Name Description RecolorablePart3D part SwapPallette() Declaration public void SwapPallette() UpdatePartPallette() Declaration public void UpdatePartPallette()"
  },
  "api/Timba.Games.CharacterFactory.html": {
    "href": "api/Timba.Games.CharacterFactory.html",
    "title": "Namespace Timba.Games.CharacterFactory | Example Unity documentation",
    "keywords": "Namespace Timba.Games.CharacterFactory Classes CharacterBuilder Recives a string with the character's structure and Instantiates the respective mesh CharacterSelector CharacterSlot CharacterUtils ColorSwapper3D PartsStatDatabaseSO ShinseiGenerator Enums CharacterType here should be listed all the possible character families or types to match the assets naming conventions"
  },
  "api/Timba.Games.CharacterFactory.PartsStatDatabaseSO.html": {
    "href": "api/Timba.Games.CharacterFactory.PartsStatDatabaseSO.html",
    "title": "Class PartsStatDatabaseSO | Example Unity documentation",
    "keywords": "Class PartsStatDatabaseSO Inheritance Object PartsStatDatabaseSO Namespace : Timba.Games.CharacterFactory Assembly : cs.temp.dll.dll Syntax public class PartsStatDatabaseSO : ScriptableObject Fields partsStats Declaration public List<PartStat> partsStats Field Value Type Description List < PartStat > Methods CalculateStat(PartStat, ShinseiStatsEnum, RarityType, Boolean) Declaration public int CalculateStat(PartStat partStat, ShinseiStatsEnum bonus, RarityType tier, bool isMainElementStat = false) Parameters Type Name Description PartStat partStat ShinseiStatsEnum bonus RarityType tier Boolean isMainElementStat Returns Type Description Int32 GetStat(PartType, String, String, CharacterType, StatValueType) Declaration public int GetStat(PartType part, string sTier, string sType, CharacterType cType, StatValueType statValueType) Parameters Type Name Description PartType part String sTier String sType CharacterType cType StatValueType statValueType Returns Type Description Int32 GetStatBalanceValue(ShinseiStatsEnum, CharacterType, RarityType, Int32) Declaration public int GetStatBalanceValue(ShinseiStatsEnum protectedStat, CharacterType shinseiType, RarityType shinseiTier, int partStatValuesSummatory) Parameters Type Name Description ShinseiStatsEnum protectedStat CharacterType shinseiType RarityType shinseiTier Int32 partStatValuesSummatory Returns Type Description Int32"
  },
  "api/Timba.Games.CharacterFactory.ShinseiGenerator.html": {
    "href": "api/Timba.Games.CharacterFactory.ShinseiGenerator.html",
    "title": "Class ShinseiGenerator | Example Unity documentation",
    "keywords": "Class ShinseiGenerator Inheritance Object ShinseiGenerator Namespace : Timba.Games.CharacterFactory Assembly : cs.temp.dll.dll Syntax public class ShinseiGenerator : MonoBehaviour Fields generatedShinseis Declaration public List<Shinsei> generatedShinseis Field Value Type Description List < Shinsei > iconBackground Declaration public SpriteRenderer iconBackground Field Value Type Description SpriteRenderer lastIndex Declaration public int lastIndex Field Value Type Description Int32 photobooth Declaration public ShinseiWardrobe photobooth Field Value Type Description ShinseiWardrobe posedShinsei Declaration public Animator posedShinsei Field Value Type Description Animator shinseiIcons Declaration public List<Sprite> shinseiIcons Field Value Type Description List < Sprite > shinseiJsons Declaration public List<string> shinseiJsons Field Value Type Description List < String > shinseisToGenerate Declaration public int shinseisToGenerate Field Value Type Description Int32 Methods GenerateShinseis(RarityType, CharacterType) Declaration public void GenerateShinseis(RarityType desiredTier = RarityType.Common, CharacterType desiredType = CharacterType.Sky) Parameters Type Name Description RarityType desiredTier CharacterType desiredType GetShinseiNFTData(String, Int32) Declaration public void GetShinseiNFTData(string shinseiDNA, int shinseiIndex) Parameters Type Name Description String shinseiDNA Int32 shinseiIndex"
  },
  "api/Timba.Games.DynamicCamera.CameraPlaneController.html": {
    "href": "api/Timba.Games.DynamicCamera.CameraPlaneController.html",
    "title": "Class CameraPlaneController | Example Unity documentation",
    "keywords": "Class CameraPlaneController Switch between diferent cameras by index Inheritance Object CameraPlaneController Namespace : Timba.Games.DynamicCamera Assembly : cs.temp.dll.dll Syntax public class CameraPlaneController : MonoBehaviour Fields testStaticCam Declaration public bool testStaticCam Field Value Type Description Boolean Methods CenitalFrame(Boolean, Action) Declaration public void CenitalFrame(bool focusPlayer, Action _callback) Parameters Type Name Description Boolean focusPlayer Action _callback ClearPointOfInterest() Declaration public void ClearPointOfInterest() GeneralFrame(Action) Declaration public void GeneralFrame(Action _callback) Parameters Type Name Description Action _callback InitCameras() Declaration public void InitCameras() InitWaitTurnCameras() Declaration public void InitWaitTurnCameras() OrbitalCamera(Action) Declaration public void OrbitalCamera(Action _callback) Parameters Type Name Description Action _callback StaticCamera(Boolean, Action) Declaration public void StaticCamera(bool _playerFocus, Action _callback) Parameters Type Name Description Boolean _playerFocus Action _callback StopWaitTurnCameras() Declaration public void StopWaitTurnCameras() SwitchPointOfInterest(CameraPointOfInteresEnum, Boolean, Boolean) Declaration public void SwitchPointOfInterest(CameraPointOfInteresEnum pointIndex, bool doFocusOffset = false, bool focusOffsetRight = false) Parameters Type Name Description CameraPointOfInteresEnum pointIndex Boolean doFocusOffset Boolean focusOffsetRight SwitchToCam(CamerasAvailableEnum, Single, Single, Action) Declaration public void SwitchToCam(CamerasAvailableEnum camIndex, float time = 5F, float pathPosition = 0F, Action callback = null) Parameters Type Name Description CamerasAvailableEnum camIndex Single time Single pathPosition Action callback WaitForSecondsToCallback(Single, Action) Declaration public IEnumerator WaitForSecondsToCallback(float seconds, Action callback) Parameters Type Name Description Single seconds Action callback Returns Type Description IEnumerator"
  },
  "api/Timba.Games.DynamicCamera.html": {
    "href": "api/Timba.Games.DynamicCamera.html",
    "title": "Namespace Timba.Games.DynamicCamera | Example Unity documentation",
    "keywords": "Namespace Timba.Games.DynamicCamera Classes CameraPlaneController Switch between diferent cameras by index"
  },
  "api/Timba.Games.Recolor.html": {
    "href": "api/Timba.Games.Recolor.html",
    "title": "Namespace Timba.Games.Recolor | Example Unity documentation",
    "keywords": "Namespace Timba.Games.Recolor Classes Recolorable"
  },
  "api/Timba.Games.Recolor.Recolorable.html": {
    "href": "api/Timba.Games.Recolor.Recolorable.html",
    "title": "Class Recolorable | Example Unity documentation",
    "keywords": "Class Recolorable Inheritance Object Recolorable Namespace : Timba.Games.Recolor Assembly : cs.temp.dll.dll Syntax public class Recolorable : MonoBehaviour Methods SetColors(Color32[]) Declaration public void SetColors(Color32[] newColors) Parameters Type Name Description Color32 [] newColors SetColors(Color32[], Material) Declaration public void SetColors(Color32[] newColors, Material _materialProperty) Parameters Type Name Description Color32 [] newColors Material _materialProperty SetColors(Color32[], MaterialPropertyBlock) Declaration public void SetColors(Color32[] newColors, MaterialPropertyBlock _materialProperty) Parameters Type Name Description Color32 [] newColors MaterialPropertyBlock _materialProperty"
  },
  "api/Timba.Games.SacredTails.BattleModule.html": {
    "href": "api/Timba.Games.SacredTails.BattleModule.html",
    "title": "Namespace Timba.Games.SacredTails.BattleModule | Example Unity documentation",
    "keywords": "Namespace Timba.Games.SacredTails.BattleModule Classes UIHelper"
  },
  "api/Timba.Games.SacredTails.BattleModule.UIHelper.html": {
    "href": "api/Timba.Games.SacredTails.BattleModule.UIHelper.html",
    "title": "Class UIHelper | Example Unity documentation",
    "keywords": "Class UIHelper Inheritance Object UIHelper Namespace : Timba.Games.SacredTails.BattleModule Assembly : cs.temp.dll.dll Syntax public class UIHelper : MonoBehaviour Fields battleGameMode Declaration public BattleGameMode battleGameMode Field Value Type Description BattleGameMode turnsController Declaration public TurnsController turnsController Field Value Type Description TurnsController Methods OpenSkipTurnPopup() Declaration public void OpenSkipTurnPopup() OpenSurrenderPopup() Declaration public void OpenSurrenderPopup()"
  },
  "api/Timba.Games.SacredTails.DisconnectManager.html": {
    "href": "api/Timba.Games.SacredTails.DisconnectManager.html",
    "title": "Class DisconnectManager | Example Unity documentation",
    "keywords": "Class DisconnectManager Inheritance Object DisconnectManager Namespace : Timba.Games.SacredTails Assembly : cs.temp.dll.dll Syntax public class DisconnectManager : MonoBehaviour Fields logout Declaration public Logout logout Field Value Type Description Logout Methods LogIn() Declaration public void LogIn() Update() Declaration public void Update()"
  },
  "api/Timba.Games.SacredTails.html": {
    "href": "api/Timba.Games.SacredTails.html",
    "title": "Namespace Timba.Games.SacredTails | Example Unity documentation",
    "keywords": "Namespace Timba.Games.SacredTails Classes DisconnectManager WalletController Interfaces IWallet"
  },
  "api/Timba.Games.SacredTails.IWallet.html": {
    "href": "api/Timba.Games.SacredTails.IWallet.html",
    "title": "Interface IWallet | Example Unity documentation",
    "keywords": "Interface IWallet Namespace : Timba.Games.SacredTails Assembly : cs.temp.dll.dll Syntax public interface IWallet Methods GetUserCurrentCoins() Declaration int GetUserCurrentCoins() Returns Type Description Int32 HideUserWallet() Declaration void HideUserWallet() ShowUserWallet() Declaration void ShowUserWallet() UpdateUserWallet() Declaration void UpdateUserWallet()"
  },
  "api/Timba.Games.SacredTails.Lobby.Chat.ChatModule.html": {
    "href": "api/Timba.Games.SacredTails.Lobby.Chat.ChatModule.html",
    "title": "Class ChatModule | Example Unity documentation",
    "keywords": "Class ChatModule Inheritance Object ChatModule Namespace : Timba.Games.SacredTails.Lobby.Chat Assembly : cs.temp.dll.dll Syntax public class ChatModule : MonoBehaviour Methods Init() Declaration public void Init() SendMessage() Declaration public void SendMessage()"
  },
  "api/Timba.Games.SacredTails.Lobby.Chat.html": {
    "href": "api/Timba.Games.SacredTails.Lobby.Chat.html",
    "title": "Namespace Timba.Games.SacredTails.Lobby.Chat | Example Unity documentation",
    "keywords": "Namespace Timba.Games.SacredTails.Lobby.Chat Classes ChatModule Message"
  },
  "api/Timba.Games.SacredTails.Lobby.Chat.Message.html": {
    "href": "api/Timba.Games.SacredTails.Lobby.Chat.Message.html",
    "title": "Class Message | Example Unity documentation",
    "keywords": "Class Message Inheritance Object Message Namespace : Timba.Games.SacredTails.Lobby.Chat Assembly : cs.temp.dll.dll Syntax [Serializable] public class Message Fields text Declaration public string text Field Value Type Description String textObject Declaration public TMP_Text textObject Field Value Type Description TMP_Text"
  },
  "api/Timba.Games.SacredTails.Lobby.html": {
    "href": "api/Timba.Games.SacredTails.Lobby.html",
    "title": "Namespace Timba.Games.SacredTails.Lobby | Example Unity documentation",
    "keywords": "Namespace Timba.Games.SacredTails.Lobby Classes PartyManager PartyManagerLobby PartyManagerVault SacredTeleport Teleport the character from trigger position to targetPosition transform ShinseiMovement This class control the movement of the shinsei companion in the lobby ShinseiVaultController"
  },
  "api/Timba.Games.SacredTails.Lobby.PartyManager.html": {
    "href": "api/Timba.Games.SacredTails.Lobby.PartyManager.html",
    "title": "Class PartyManager | Example Unity documentation",
    "keywords": "Class PartyManager Inheritance Object PartyManager PartyManagerLobby PartyManagerVault Namespace : Timba.Games.SacredTails.Lobby Assembly : cs.temp.dll.dll Syntax public abstract class PartyManager : MonoBehaviour Fields selectorPos Declaration public int selectorPos Field Value Type Description Int32 shinseiSpawner Declaration public ShinseiSpawner shinseiSpawner Field Value Type Description ShinseiSpawner Methods ChangeOnClickSlotAction(UnityAction<Int32, ShinseiSlot>) Declaration public virtual void ChangeOnClickSlotAction(UnityAction<int, ShinseiSlot> onClick = null) Parameters Type Name Description UnityAction < Int32 , ShinseiSlot > onClick HidePanel() Declaration public virtual void HidePanel() Initialize(Action<Int32, ShinseiSlot>) Declaration public virtual void Initialize(Action<int, ShinseiSlot> onNewSlotCreated = null) Parameters Type Name Description Action < Int32 , ShinseiSlot > onNewSlotCreated OnClickSlot(Int32, ShinseiSlot) Declaration public virtual void OnClickSlot(int listIndex, ShinseiSlot eventShinseiSlot) Parameters Type Name Description Int32 listIndex ShinseiSlot eventShinseiSlot Start() Declaration public virtual void Start() UpdateShinseis() Declaration public void UpdateShinseis()"
  },
  "api/Timba.Games.SacredTails.Lobby.PartyManagerLobby.html": {
    "href": "api/Timba.Games.SacredTails.Lobby.PartyManagerLobby.html",
    "title": "Class PartyManagerLobby | Example Unity documentation",
    "keywords": "Class PartyManagerLobby Inheritance Object PartyManager PartyManagerLobby Inherited Members PartyManager.selectorPos PartyManager.shinseiSpawner PartyManager.Start() PartyManager.UpdateShinseis() PartyManager.ChangeOnClickSlotAction(UnityAction<Int32, ShinseiSlot>) PartyManager.HidePanel() Namespace : Timba.Games.SacredTails.Lobby Assembly : cs.temp.dll.dll Syntax public class PartyManagerLobby : PartyManager Methods Initialize(Action<Int32, ShinseiSlot>) Declaration public override void Initialize(Action<int, ShinseiSlot> onNewSlotCreated = null) Parameters Type Name Description Action < Int32 , ShinseiSlot > onNewSlotCreated Overrides PartyManager.Initialize(Action<Int32, ShinseiSlot>) OnClickSlot(Int32, ShinseiSlot) Declaration public override void OnClickSlot(int listIndex, ShinseiSlot eventShinseiSlot) Parameters Type Name Description Int32 listIndex ShinseiSlot eventShinseiSlot Overrides PartyManager.OnClickSlot(Int32, ShinseiSlot) SwapShinseiBtn(Int32) Declaration public void SwapShinseiBtn(int dir) Parameters Type Name Description Int32 dir"
  },
  "api/Timba.Games.SacredTails.Lobby.PartyManagerVault.html": {
    "href": "api/Timba.Games.SacredTails.Lobby.PartyManagerVault.html",
    "title": "Class PartyManagerVault | Example Unity documentation",
    "keywords": "Class PartyManagerVault Inheritance Object PartyManager PartyManagerVault Inherited Members PartyManager.selectorPos PartyManager.shinseiSpawner PartyManager.Start() PartyManager.UpdateShinseis() PartyManager.ChangeOnClickSlotAction(UnityAction<Int32, ShinseiSlot>) PartyManager.HidePanel() Namespace : Timba.Games.SacredTails.Lobby Assembly : cs.temp.dll.dll Syntax public class PartyManagerVault : PartyManager Fields selectableUi Declaration public SelectableUi selectableUi Field Value Type Description SelectableUi shinseiPreviewPanel Declaration public ShinseiPreviewPanelManager shinseiPreviewPanel Field Value Type Description ShinseiPreviewPanelManager Methods ChangeShinseis(Int32, ShinseiSlot, Int32, ShinseiSlot) Declaration public void ChangeShinseis(int listIndexFrom, ShinseiSlot shinseiSlotFrom, int listIndexTarget, ShinseiSlot shinseiSlotTarget) Parameters Type Name Description Int32 listIndexFrom ShinseiSlot shinseiSlotFrom Int32 listIndexTarget ShinseiSlot shinseiSlotTarget DisplayPreviewForShisnei(Int32) Declaration public void DisplayPreviewForShisnei(int shinseIndex) Parameters Type Name Description Int32 shinseIndex Initialize(Action<Int32, ShinseiSlot>) Declaration public override void Initialize(Action<int, ShinseiSlot> onNewSlotCreated = null) Parameters Type Name Description Action < Int32 , ShinseiSlot > onNewSlotCreated Overrides PartyManager.Initialize(Action<Int32, ShinseiSlot>) OnClickSlot(Int32, ShinseiSlot) Declaration public override void OnClickSlot(int listIndex, ShinseiSlot eventShinseiSlot) Parameters Type Name Description Int32 listIndex ShinseiSlot eventShinseiSlot Overrides PartyManager.OnClickSlot(Int32, ShinseiSlot)"
  },
  "api/Timba.Games.SacredTails.Lobby.SacredTeleport.html": {
    "href": "api/Timba.Games.SacredTails.Lobby.SacredTeleport.html",
    "title": "Class SacredTeleport | Example Unity documentation",
    "keywords": "Class SacredTeleport Teleport the character from trigger position to targetPosition transform Inheritance Object SacredTeleport Namespace : Timba.Games.SacredTails.Lobby Assembly : cs.temp.dll.dll Syntax public class SacredTeleport : MonoBehaviour"
  },
  "api/Timba.Games.SacredTails.Lobby.ShinseiMovement.html": {
    "href": "api/Timba.Games.SacredTails.Lobby.ShinseiMovement.html",
    "title": "Class ShinseiMovement | Example Unity documentation",
    "keywords": "Class ShinseiMovement This class control the movement of the shinsei companion in the lobby Inheritance Object ShinseiMovement Namespace : Timba.Games.SacredTails.Lobby Assembly : cs.temp.dll.dll Syntax public class ShinseiMovement : NetworkBehaviour Fields navmeshAgent Declaration public NavMeshAgent navmeshAgent Field Value Type Description NavMeshAgent Methods MoveAt(Vector3) Declaration public void MoveAt(Vector3 targetPosition) Parameters Type Name Description Vector3 targetPosition SetOwner(Transform) Declaration public void SetOwner(Transform targetOwner) Parameters Type Name Description Transform targetOwner"
  },
  "api/Timba.Games.SacredTails.Lobby.ShinseiVaultController.html": {
    "href": "api/Timba.Games.SacredTails.Lobby.ShinseiVaultController.html",
    "title": "Class ShinseiVaultController | Example Unity documentation",
    "keywords": "Class ShinseiVaultController Inheritance Object ShinseiVaultController Namespace : Timba.Games.SacredTails.Lobby Assembly : cs.temp.dll.dll Syntax public class ShinseiVaultController : MonoBehaviour Methods DisplayPreviewForShisnei(Int32) Declaration public void DisplayPreviewForShisnei(int shinseIndex) Parameters Type Name Description Int32 shinseIndex Initialize() Declaration public void Initialize() OnVaultShinseiSelected(Int32, ShinseiSlot) Declaration public void OnVaultShinseiSelected(int listIndex, ShinseiSlot vaultShinseiSlot) Parameters Type Name Description Int32 listIndex ShinseiSlot vaultShinseiSlot Start() Declaration public void Start()"
  },
  "api/Timba.Games.SacredTails.LobbyDatabase.CharacterStateEnum.html": {
    "href": "api/Timba.Games.SacredTails.LobbyDatabase.CharacterStateEnum.html",
    "title": "Enum CharacterStateEnum | Example Unity documentation",
    "keywords": "Enum CharacterStateEnum Namespace : Timba.Games.SacredTails.LobbyDatabase Assembly : cs.temp.dll.dll Syntax [Serializable] public enum CharacterStateEnum Fields Name Description BACKPACK COMBAT LOBBY"
  },
  "api/Timba.Games.SacredTails.LobbyDatabase.ChatMessagePayload.html": {
    "href": "api/Timba.Games.SacredTails.LobbyDatabase.ChatMessagePayload.html",
    "title": "Class ChatMessagePayload | Example Unity documentation",
    "keywords": "Class ChatMessagePayload Inheritance Object ChatMessagePayload Namespace : Timba.Games.SacredTails.LobbyDatabase Assembly : cs.temp.dll.dll Syntax [Serializable] public class ChatMessagePayload Fields id Declaration public string id Field Value Type Description String message Declaration public string message Field Value Type Description String timeStamp Declaration public string timeStamp Field Value Type Description String"
  },
  "api/Timba.Games.SacredTails.LobbyDatabase.DeletePayload.html": {
    "href": "api/Timba.Games.SacredTails.LobbyDatabase.DeletePayload.html",
    "title": "Struct DeletePayload | Example Unity documentation",
    "keywords": "Struct DeletePayload Namespace : Timba.Games.SacredTails.LobbyDatabase Assembly : cs.temp.dll.dll Syntax public struct DeletePayload Fields encryptIV Declaration public string encryptIV Field Value Type Description String playfabIdEncrypted Declaration public string playfabIdEncrypted Field Value Type Description String"
  },
  "api/Timba.Games.SacredTails.LobbyDatabase.html": {
    "href": "api/Timba.Games.SacredTails.LobbyDatabase.html",
    "title": "Namespace Timba.Games.SacredTails.LobbyDatabase | Example Unity documentation",
    "keywords": "Namespace Timba.Games.SacredTails.LobbyDatabase Classes ChatMessagePayload LobbyPlayerBasePayload PlayfabLobbyDatabase PlayfabTournamentDatabase RequestConstants Structs DeletePayload Interfaces ILobbydatabase ITournamentDatabase Enums CharacterStateEnum TypeOfTournamentRequest"
  },
  "api/Timba.Games.SacredTails.LobbyDatabase.ILobbydatabase.html": {
    "href": "api/Timba.Games.SacredTails.LobbyDatabase.ILobbydatabase.html",
    "title": "Interface ILobbydatabase | Example Unity documentation",
    "keywords": "Interface ILobbydatabase Namespace : Timba.Games.SacredTails.LobbyDatabase Assembly : cs.temp.dll.dll Syntax public interface ILobbydatabase Properties CurrentUserData Declaration LobbyPlayerBasePayload CurrentUserData { get; } Property Value Type Description LobbyPlayerBasePayload Methods ConnectToLobby(Int32, LobbyPlayerBasePayload, Action<ExecuteFunctionResult>) Declaration void ConnectToLobby(int lobbyId, LobbyPlayerBasePayload userData, Action<ExecuteFunctionResult> resultCallback) Parameters Type Name Description Int32 lobbyId LobbyPlayerBasePayload userData Action < ExecuteFunctionResult > resultCallback DisconnectFromLobby(LobbyPlayerBasePayload) Declaration void DisconnectFromLobby(LobbyPlayerBasePayload userData) Parameters Type Name Description LobbyPlayerBasePayload userData RecievePlayersData(Action<Dictionary<String, LobbyPlayerBasePayload>>) Declaration void RecievePlayersData(Action<Dictionary<string, LobbyPlayerBasePayload>> callback) Parameters Type Name Description Action < Dictionary < String , LobbyPlayerBasePayload >> callback SendPlayerData(LobbyPlayerBasePayload, Action<Boolean>) Declaration void SendPlayerData(LobbyPlayerBasePayload userData, Action<bool> onSendSuccess = null) Parameters Type Name Description LobbyPlayerBasePayload userData Action < Boolean > onSendSuccess SetGetPlayersData(LobbyPlayerBasePayload, Action<ExecuteFunctionResult>) Declaration void SetGetPlayersData(LobbyPlayerBasePayload userData, Action<ExecuteFunctionResult> resultCallback) Parameters Type Name Description LobbyPlayerBasePayload userData Action < ExecuteFunctionResult > resultCallback"
  },
  "api/Timba.Games.SacredTails.LobbyDatabase.ITournamentDatabase.html": {
    "href": "api/Timba.Games.SacredTails.LobbyDatabase.ITournamentDatabase.html",
    "title": "Interface ITournamentDatabase | Example Unity documentation",
    "keywords": "Interface ITournamentDatabase Namespace : Timba.Games.SacredTails.LobbyDatabase Assembly : cs.temp.dll.dll Syntax public interface ITournamentDatabase Methods TournamentRequest(String, TypeOfTournamentRequest, Action<ExecuteFunctionResult>, Boolean, Int32) Declaration void TournamentRequest(string tournamentId, TypeOfTournamentRequest typeOfRequest, Action<ExecuteFunctionResult> resultCallback, bool shouldMarkReady = true, int timesTrying = 0) Parameters Type Name Description String tournamentId TypeOfTournamentRequest typeOfRequest Action < ExecuteFunctionResult > resultCallback Boolean shouldMarkReady Int32 timesTrying"
  },
  "api/Timba.Games.SacredTails.LobbyDatabase.LobbyPlayerBasePayload.html": {
    "href": "api/Timba.Games.SacredTails.LobbyDatabase.LobbyPlayerBasePayload.html",
    "title": "Class LobbyPlayerBasePayload | Example Unity documentation",
    "keywords": "Class LobbyPlayerBasePayload Inheritance Object LobbyPlayerBasePayload Namespace : Timba.Games.SacredTails.LobbyDatabase Assembly : cs.temp.dll.dll Syntax [Serializable] public class LobbyPlayerBasePayload Fields challengedPlayer Declaration public string challengedPlayer Field Value Type Description String characterState Declaration public int characterState Field Value Type Description Int32 characterStyle Declaration public string characterStyle Field Value Type Description String chatMessages Declaration public List<ChatMessagePayload> chatMessages Field Value Type Description List < ChatMessagePayload > connectionId Declaration public ulong connectionId Field Value Type Description UInt64 currentMatchId Declaration public string currentMatchId Field Value Type Description String displayName Declaration public string displayName Field Value Type Description String encryptIV Declaration public string encryptIV Field Value Type Description String lobby Declaration public int lobby Field Value Type Description Int32 playerPosition Declaration public SerializableVector3 playerPosition Field Value Type Description SerializableVector3 playfabIdEncrypted Declaration public string playfabIdEncrypted Field Value Type Description String shinseiCompanionDna Declaration public string shinseiCompanionDna Field Value Type Description String"
  },
  "api/Timba.Games.SacredTails.LobbyDatabase.PlayfabLobbyDatabase.html": {
    "href": "api/Timba.Games.SacredTails.LobbyDatabase.PlayfabLobbyDatabase.html",
    "title": "Class PlayfabLobbyDatabase | Example Unity documentation",
    "keywords": "Class PlayfabLobbyDatabase Inheritance Object PlayfabLobbyDatabase Implements ILobbydatabase IService Namespace : Timba.Games.SacredTails.LobbyDatabase Assembly : cs.temp.dll.dll Syntax public class PlayfabLobbyDatabase : MonoBehaviour, ILobbydatabase Fields currentLobby Declaration public int currentLobby Field Value Type Description Int32 currentUserData Declaration public LobbyPlayerBasePayload currentUserData Field Value Type Description LobbyPlayerBasePayload testPlayfabId Declaration public string testPlayfabId Field Value Type Description String testUserData Declaration public LobbyPlayerBasePayload testUserData Field Value Type Description LobbyPlayerBasePayload Properties CurrentUserData Declaration public LobbyPlayerBasePayload CurrentUserData { get; } Property Value Type Description LobbyPlayerBasePayload Methods Awake() Declaration public void Awake() ConnectToLobby(Int32, LobbyPlayerBasePayload, Action<ExecuteFunctionResult>) Declaration public void ConnectToLobby(int lobbyId, LobbyPlayerBasePayload userData, Action<ExecuteFunctionResult> resultCallback) Parameters Type Name Description Int32 lobbyId LobbyPlayerBasePayload userData Action < ExecuteFunctionResult > resultCallback DisconnectFromLobby(LobbyPlayerBasePayload) Declaration public void DisconnectFromLobby(LobbyPlayerBasePayload userData) Parameters Type Name Description LobbyPlayerBasePayload userData IsReady() Declaration public bool IsReady() Returns Type Description Boolean RecievePlayersData(Action<Dictionary<String, LobbyPlayerBasePayload>>) Declaration public void RecievePlayersData(Action<Dictionary<string, LobbyPlayerBasePayload>> callback) Parameters Type Name Description Action < Dictionary < String , LobbyPlayerBasePayload >> callback SendPlayerData(LobbyPlayerBasePayload, Action<Boolean>) Declaration public void SendPlayerData(LobbyPlayerBasePayload userData, Action<bool> onSendSuccess = null) Parameters Type Name Description LobbyPlayerBasePayload userData Action < Boolean > onSendSuccess SetGetPlayersData(LobbyPlayerBasePayload, Action<ExecuteFunctionResult>) Declaration public void SetGetPlayersData(LobbyPlayerBasePayload userData, Action<ExecuteFunctionResult> callback) Parameters Type Name Description LobbyPlayerBasePayload userData Action < ExecuteFunctionResult > callback Implements ILobbydatabase IService"
  },
  "api/Timba.Games.SacredTails.LobbyDatabase.PlayfabTournamentDatabase.html": {
    "href": "api/Timba.Games.SacredTails.LobbyDatabase.PlayfabTournamentDatabase.html",
    "title": "Class PlayfabTournamentDatabase | Example Unity documentation",
    "keywords": "Class PlayfabTournamentDatabase Inheritance Object PlayfabTournamentDatabase Implements ITournamentDatabase IService Namespace : Timba.Games.SacredTails.LobbyDatabase Assembly : cs.temp.dll.dll Syntax public class PlayfabTournamentDatabase : MonoBehaviour, ITournamentDatabase Fields debugError Declaration public bool debugError Field Value Type Description Boolean debugRequest Declaration public bool debugRequest Field Value Type Description Boolean debugResult Declaration public bool debugResult Field Value Type Description Boolean Methods IsReady() Declaration public bool IsReady() Returns Type Description Boolean TournamentRequest(String, TypeOfTournamentRequest, Action<ExecuteFunctionResult>, Boolean, Int32) Declaration public void TournamentRequest(string tournamentId, TypeOfTournamentRequest typeOfRequest, Action<ExecuteFunctionResult> resultCallback, bool shouldMarkReady = false, int timesTrying = 0) Parameters Type Name Description String tournamentId TypeOfTournamentRequest typeOfRequest Action < ExecuteFunctionResult > resultCallback Boolean shouldMarkReady Int32 timesTrying Implements ITournamentDatabase IService"
  },
  "api/Timba.Games.SacredTails.LobbyDatabase.RequestConstants.html": {
    "href": "api/Timba.Games.SacredTails.LobbyDatabase.RequestConstants.html",
    "title": "Class RequestConstants | Example Unity documentation",
    "keywords": "Class RequestConstants Inheritance Object RequestConstants Namespace : Timba.Games.SacredTails.LobbyDatabase Assembly : cs.temp.dll.dll Syntax public static class RequestConstants Fields baseUrl Declaration public const string baseUrl = \"https://sacredtails.azurewebsites.net/api/\" Field Value Type Description String firebaseError Declaration public const string firebaseError = \"<color=red>Firebase Lobby Database: </color>\" Field Value Type Description String firebaseMessage Declaration public const string firebaseMessage = \"<color=blue>Firebase Lobby Database: </color>\" Field Value Type Description String"
  },
  "api/Timba.Games.SacredTails.LobbyDatabase.TypeOfTournamentRequest.html": {
    "href": "api/Timba.Games.SacredTails.LobbyDatabase.TypeOfTournamentRequest.html",
    "title": "Enum TypeOfTournamentRequest | Example Unity documentation",
    "keywords": "Enum TypeOfTournamentRequest Namespace : Timba.Games.SacredTails.LobbyDatabase Assembly : cs.temp.dll.dll Syntax public enum TypeOfTournamentRequest Fields Name Description CHECK_READY_STATE CHECK_TOURNAMENT_STATE GET_CURRENT_BRACKETS_DATA GET_TOURNAMENT_LIST JOIN_TOURNAMENT"
  },
  "api/Timba.Games.SacredTails.LobbyNetworking.ConnectionResponse.html": {
    "href": "api/Timba.Games.SacredTails.LobbyNetworking.ConnectionResponse.html",
    "title": "Class ConnectionResponse | Example Unity documentation",
    "keywords": "Class ConnectionResponse Inheritance Object ConnectionResponse Namespace : Timba.Games.SacredTails.LobbyNetworking Assembly : cs.temp.dll.dll Syntax public class ConnectionResponse Fields connectionId Declaration public ulong connectionId Field Value Type Description UInt64 currentVersion Declaration public string currentVersion Field Value Type Description String lobbyId Declaration public int lobbyId Field Value Type Description Int32"
  },
  "api/Timba.Games.SacredTails.LobbyNetworking.html": {
    "href": "api/Timba.Games.SacredTails.LobbyNetworking.html",
    "title": "Namespace Timba.Games.SacredTails.LobbyNetworking | Example Unity documentation",
    "keywords": "Namespace Timba.Games.SacredTails.LobbyNetworking Classes ConnectionResponse LobbyNetworkingController LobbyNetworkingController.DirectMessage LobbyNetworkingController.MessageObject PlayersStreamData Interfaces ILobbyNetworkManager"
  },
  "api/Timba.Games.SacredTails.LobbyNetworking.ILobbyNetworkManager.html": {
    "href": "api/Timba.Games.SacredTails.LobbyNetworking.ILobbyNetworkManager.html",
    "title": "Interface ILobbyNetworkManager | Example Unity documentation",
    "keywords": "Interface ILobbyNetworkManager Namespace : Timba.Games.SacredTails.LobbyNetworking Assembly : cs.temp.dll.dll Syntax public interface ILobbyNetworkManager Properties CurrentPlayer Declaration ThirdPersonController CurrentPlayer { get; set; } Property Value Type Description ThirdPersonController CurrentSecondsBetweenPetition Declaration float CurrentSecondsBetweenPetition { get; } Property Value Type Description Single OnConnected Declaration Action<ThirdPersonController> OnConnected { get; set; } Property Value Type Description Action < ThirdPersonController > Methods CheckIfOtherPlayerHasChallengeForPlayfabId(String) Declaration bool CheckIfOtherPlayerHasChallengeForPlayfabId(string playfabId) Parameters Type Name Description String playfabId Returns Type Description Boolean CheckIfPlayerHasChallengeOrIsChallenging(String) Declaration bool CheckIfPlayerHasChallengeOrIsChallenging(string playfabId) Parameters Type Name Description String playfabId Returns Type Description Boolean ConnectToLobby(Int32) Declaration void ConnectToLobby(int lobbyId) Parameters Type Name Description Int32 lobbyId GetPlayerState(String) Declaration CharacterStateEnum GetPlayerState(string playerId) Parameters Type Name Description String playerId Returns Type Description CharacterStateEnum ManageLobbyPlayers(Dictionary<String, LobbyPlayerBasePayload>) Declaration void ManageLobbyPlayers(Dictionary<string, LobbyPlayerBasePayload> usersData) Parameters Type Name Description Dictionary < String , LobbyPlayerBasePayload > usersData ShowPlayerPersonalUI(Boolean) Declaration void ShowPlayerPersonalUI(bool show = true) Parameters Type Name Description Boolean show TickCheckActivates() Declaration void TickCheckActivates() ToggleBattleMode(Boolean) Declaration void ToggleBattleMode(bool state) Parameters Type Name Description Boolean state"
  },
  "api/Timba.Games.SacredTails.LobbyNetworking.LobbyNetworkingController.DirectMessage.html": {
    "href": "api/Timba.Games.SacredTails.LobbyNetworking.LobbyNetworkingController.DirectMessage.html",
    "title": "Class LobbyNetworkingController.DirectMessage | Example Unity documentation",
    "keywords": "Class LobbyNetworkingController.DirectMessage Inheritance Object LobbyNetworkingController.DirectMessage Namespace : Timba.Games.SacredTails.LobbyNetworking Assembly : cs.temp.dll.dll Syntax public class DirectMessage Fields from Declaration public string from Field Value Type Description String msg Declaration public string msg Field Value Type Description String"
  },
  "api/Timba.Games.SacredTails.LobbyNetworking.LobbyNetworkingController.html": {
    "href": "api/Timba.Games.SacredTails.LobbyNetworking.LobbyNetworkingController.html",
    "title": "Class LobbyNetworkingController | Example Unity documentation",
    "keywords": "Class LobbyNetworkingController Inheritance Object LobbyNetworkingController Implements ILobbyNetworkManager IService Namespace : Timba.Games.SacredTails.LobbyNetworking Assembly : cs.temp.dll.dll Syntax public class LobbyNetworkingController : MonoBehaviour, ILobbyNetworkManager Fields chatTextBox Declaration public ChatTextBox chatTextBox Field Value Type Description ChatTextBox connected Declaration public bool connected Field Value Type Description Boolean connectionId Declaration public ulong connectionId Field Value Type Description UInt64 currentPlayer Declaration public ThirdPersonController currentPlayer Field Value Type Description ThirdPersonController currentPlayersAvatar Declaration public Dictionary<string, ThirdPersonController> currentPlayersAvatar Field Value Type Description Dictionary < String , ThirdPersonController > currentPlayersData Declaration public Dictionary<string, LobbyPlayerBasePayload> currentPlayersData Field Value Type Description Dictionary < String , LobbyPlayerBasePayload > lerpDuration Declaration public float lerpDuration Field Value Type Description Single loadingScreen Declaration public GameObject loadingScreen Field Value Type Description GameObject lobbyDatabase Declaration public ILobbydatabase lobbyDatabase Field Value Type Description ILobbydatabase localPlayerPrefab Declaration public ThirdPersonController localPlayerPrefab Field Value Type Description ThirdPersonController minErrorPosition Declaration public float minErrorPosition Field Value Type Description Single onBattle Declaration public bool onBattle Field Value Type Description Boolean OnConnectedCallback Declaration public UnityEvent<ThirdPersonController> OnConnectedCallback Field Value Type Description UnityEvent < ThirdPersonController > otherPlayerPrefab Declaration public ThirdPersonController otherPlayerPrefab Field Value Type Description ThirdPersonController otherPlayersContainer Declaration public GameObject otherPlayersContainer Field Value Type Description GameObject playerDataManager Declaration public PlayerDataManager playerDataManager Field Value Type Description PlayerDataManager playersInstantiated Declaration public Dictionary<string, bool> playersInstantiated Field Value Type Description Dictionary < String , Boolean > ratePetiton Declaration public float ratePetiton Field Value Type Description Single timer Declaration public float timer Field Value Type Description Single Properties CurrentPlayer Declaration public ThirdPersonController CurrentPlayer { get; set; } Property Value Type Description ThirdPersonController CurrentSecondsBetweenPetition Declaration public float CurrentSecondsBetweenPetition { get; } Property Value Type Description Single OnConnected Declaration public Action<ThirdPersonController> OnConnected { get; set; } Property Value Type Description Action < ThirdPersonController > Methods CheckIfIsMoving(LobbyPlayerBasePayload, LobbyPlayerBasePayload) Declaration public bool CheckIfIsMoving(LobbyPlayerBasePayload currentData, LobbyPlayerBasePayload dataToSend) Parameters Type Name Description LobbyPlayerBasePayload currentData LobbyPlayerBasePayload dataToSend Returns Type Description Boolean CheckIfOtherPlayerHasChallengeForPlayfabId(String) Declaration public bool CheckIfOtherPlayerHasChallengeForPlayfabId(string playfabId) Parameters Type Name Description String playfabId Returns Type Description Boolean CheckIfPlayerHasChallengeOrIsChallenging(String) Declaration public bool CheckIfPlayerHasChallengeOrIsChallenging(string playfabId) Parameters Type Name Description String playfabId Returns Type Description Boolean ConnectToLobby(Int32) Declaration public void ConnectToLobby(int lobbyId) Parameters Type Name Description Int32 lobbyId GeneratePlayfabIdHash(String) Declaration public string GeneratePlayfabIdHash(string text) Parameters Type Name Description String text Returns Type Description String GetPlayerState(String) Declaration public CharacterStateEnum GetPlayerState(string playerId) Parameters Type Name Description String playerId Returns Type Description CharacterStateEnum IsReady() Declaration public bool IsReady() Returns Type Description Boolean ManageLobbyPlayers(Dictionary<String, LobbyPlayerBasePayload>) Declaration public void ManageLobbyPlayers(Dictionary<string, LobbyPlayerBasePayload> usersData) Parameters Type Name Description Dictionary < String , LobbyPlayerBasePayload > usersData NewPlayerConnected(KeyValuePair<String, LobbyPlayerBasePayload>) Declaration public void NewPlayerConnected(KeyValuePair<string, LobbyPlayerBasePayload> item) Parameters Type Name Description KeyValuePair < String , LobbyPlayerBasePayload > item OnApplicationQuit() Declaration public void OnApplicationQuit() PaintOtherPlayer(CharacterRecolor, Dictionary<PartsOfCharacter, CharacterStyleInfo>) Declaration public void PaintOtherPlayer(CharacterRecolor playerRecolor, Dictionary<PartsOfCharacter, CharacterStyleInfo> characterStyle) Parameters Type Name Description CharacterRecolor playerRecolor Dictionary < PartsOfCharacter , CharacterStyleInfo > characterStyle PlayerChallengeVerification(KeyValuePair<String, LobbyPlayerBasePayload>) Declaration public void PlayerChallengeVerification(KeyValuePair<string, LobbyPlayerBasePayload> item) Parameters Type Name Description KeyValuePair < String , LobbyPlayerBasePayload > item ShowPlayerPersonalUI(Boolean) Declaration public void ShowPlayerPersonalUI(bool show = true) Parameters Type Name Description Boolean show Start() Declaration public void Start() TickCheck() Declaration public void TickCheck() TickCheckActivates() Declaration public void TickCheckActivates() ToggleBattleMode(Boolean) Declaration public void ToggleBattleMode(bool state) Parameters Type Name Description Boolean state ToogleChatMode() Declaration public void ToogleChatMode() UntoogleChatMode() Declaration public void UntoogleChatMode() Implements ILobbyNetworkManager IService"
  },
  "api/Timba.Games.SacredTails.LobbyNetworking.LobbyNetworkingController.MessageObject.html": {
    "href": "api/Timba.Games.SacredTails.LobbyNetworking.LobbyNetworkingController.MessageObject.html",
    "title": "Class LobbyNetworkingController.MessageObject | Example Unity documentation",
    "keywords": "Class LobbyNetworkingController.MessageObject Inheritance Object LobbyNetworkingController.MessageObject Namespace : Timba.Games.SacredTails.LobbyNetworking Assembly : cs.temp.dll.dll Syntax public class MessageObject Fields messages Declaration public List<LobbyNetworkingController.DirectMessage> messages Field Value Type Description List < LobbyNetworkingController.DirectMessage >"
  },
  "api/Timba.Games.SacredTails.LobbyNetworking.PlayersStreamData.html": {
    "href": "api/Timba.Games.SacredTails.LobbyNetworking.PlayersStreamData.html",
    "title": "Class PlayersStreamData | Example Unity documentation",
    "keywords": "Class PlayersStreamData Inheritance Object PlayersStreamData Namespace : Timba.Games.SacredTails.LobbyNetworking Assembly : cs.temp.dll.dll Syntax public class PlayersStreamData Fields LastUpdated Declaration public string LastUpdated Field Value Type Description String Permission Declaration public string Permission Field Value Type Description String Value Declaration public string Value Field Value Type Description String"
  },
  "api/Timba.Games.SacredTails.PopupModule.html": {
    "href": "api/Timba.Games.SacredTails.PopupModule.html",
    "title": "Namespace Timba.Games.SacredTails.PopupModule | Example Unity documentation",
    "keywords": "Namespace Timba.Games.SacredTails.PopupModule Classes PopupManager Interfaces IPopupManager Enums PopupManager.ButtonType"
  },
  "api/Timba.Games.SacredTails.PopupModule.IPopupManager.html": {
    "href": "api/Timba.Games.SacredTails.PopupModule.IPopupManager.html",
    "title": "Interface IPopupManager | Example Unity documentation",
    "keywords": "Interface IPopupManager Namespace : Timba.Games.SacredTails.PopupModule Assembly : cs.temp.dll.dll Syntax public interface IPopupManager Methods HideInfoPopup() Declaration void HideInfoPopup() ShowInfoPopup(String, Dictionary<PopupManager.ButtonType, Action>) Declaration void ShowInfoPopup(string textInfo, Dictionary<PopupManager.ButtonType, Action> buttonsActionsPair = null) Parameters Type Name Description String textInfo Dictionary < PopupManager.ButtonType , Action > buttonsActionsPair"
  },
  "api/Timba.Games.SacredTails.PopupModule.PopupManager.ButtonType.html": {
    "href": "api/Timba.Games.SacredTails.PopupModule.PopupManager.ButtonType.html",
    "title": "Enum PopupManager.ButtonType | Example Unity documentation",
    "keywords": "Enum PopupManager.ButtonType Namespace : Timba.Games.SacredTails.PopupModule Assembly : cs.temp.dll.dll Syntax public enum ButtonType Fields Name Description BACK_BUTTON CONFIRM_BUTTON"
  },
  "api/Timba.Games.SacredTails.PopupModule.PopupManager.html": {
    "href": "api/Timba.Games.SacredTails.PopupModule.PopupManager.html",
    "title": "Class PopupManager | Example Unity documentation",
    "keywords": "Class PopupManager Inheritance Object PopupManager Implements IPopupManager IService Namespace : Timba.Games.SacredTails.PopupModule Assembly : cs.temp.dll.dll Syntax public class PopupManager : MonoBehaviour, IPopupManager Methods HideInfoPopup() Declaration public void HideInfoPopup() IsReady() Declaration public bool IsReady() Returns Type Description Boolean ShowInfoPopup(String, Dictionary<PopupManager.ButtonType, Action>) Declaration public void ShowInfoPopup(string textInfo, Dictionary<PopupManager.ButtonType, Action> buttonsActionsPair = null) Parameters Type Name Description String textInfo Dictionary < PopupManager.ButtonType , Action > buttonsActionsPair Implements IPopupManager IService"
  },
  "api/Timba.Games.SacredTails.StoreModule.html": {
    "href": "api/Timba.Games.SacredTails.StoreModule.html",
    "title": "Namespace Timba.Games.SacredTails.StoreModule | Example Unity documentation",
    "keywords": "Namespace Timba.Games.SacredTails.StoreModule Classes StoreController StoreItem StoreView Structs StoreItemData"
  },
  "api/Timba.Games.SacredTails.StoreModule.StoreController.html": {
    "href": "api/Timba.Games.SacredTails.StoreModule.StoreController.html",
    "title": "Class StoreController | Example Unity documentation",
    "keywords": "Class StoreController Inheritance Object StoreController Namespace : Timba.Games.SacredTails.StoreModule Assembly : cs.temp.dll.dll Syntax public class StoreController : MonoBehaviour Methods BuyItem(Int32, UInt32) Declaration public void BuyItem(int itemId, uint itemPrice) Parameters Type Name Description Int32 itemId UInt32 itemPrice CreatePool() Declaration public void CreatePool() FillPool(List<CatalogItem>) Declaration public void FillPool(List<CatalogItem> items) Parameters Type Name Description List < CatalogItem > items HideStore() Declaration public void HideStore() RequestCardsStore() Declaration public void RequestCardsStore() SetCardStore(GetCatalogItemsResult) Declaration public void SetCardStore(GetCatalogItemsResult result) Parameters Type Name Description GetCatalogItemsResult result Start() Declaration public void Start() SubscribeToPurchaseEvent() Declaration public void SubscribeToPurchaseEvent()"
  },
  "api/Timba.Games.SacredTails.StoreModule.StoreItem.html": {
    "href": "api/Timba.Games.SacredTails.StoreModule.StoreItem.html",
    "title": "Class StoreItem | Example Unity documentation",
    "keywords": "Class StoreItem Inheritance Object StoreItem Namespace : Timba.Games.SacredTails.StoreModule Assembly : cs.temp.dll.dll Syntax public class StoreItem : MonoBehaviour Fields cardButton Declaration public Button cardButton Field Value Type Description Button data Declaration public StoreItemData data Field Value Type Description StoreItemData Methods Init() Declaration public void Init() SetCardButtonAction(Int32, Action<Int32>) Declaration public void SetCardButtonAction(int index, Action<int> callback) Parameters Type Name Description Int32 index Action < Int32 > callback"
  },
  "api/Timba.Games.SacredTails.StoreModule.StoreItemData.html": {
    "href": "api/Timba.Games.SacredTails.StoreModule.StoreItemData.html",
    "title": "Struct StoreItemData | Example Unity documentation",
    "keywords": "Struct StoreItemData Namespace : Timba.Games.SacredTails.StoreModule Assembly : cs.temp.dll.dll Syntax public struct StoreItemData Fields itemId Declaration public int itemId Field Value Type Description Int32 itemName Declaration public string itemName Field Value Type Description String itemPrice Declaration public uint itemPrice Field Value Type Description UInt32 itemSprite Declaration public Sprite itemSprite Field Value Type Description Sprite priceCurrency Declaration public string priceCurrency Field Value Type Description String"
  },
  "api/Timba.Games.SacredTails.StoreModule.StoreView.html": {
    "href": "api/Timba.Games.SacredTails.StoreModule.StoreView.html",
    "title": "Class StoreView | Example Unity documentation",
    "keywords": "Class StoreView Inheritance Object StoreView Namespace : Timba.Games.SacredTails.StoreModule Assembly : cs.temp.dll.dll Syntax public class StoreView : MonoBehaviour Methods HidePanelAfterPurchase() Declaration public void HidePanelAfterPurchase() HidePopup() Declaration public void HidePopup() HideStore(List<StoreItem>) Declaration public void HideStore(List<StoreItem> storeItems) Parameters Type Name Description List < StoreItem > storeItems ShowPopupPurchaseCard(Int32, UInt32, Action<Int32, UInt32>) Declaration public void ShowPopupPurchaseCard(int itemId, uint itemPrice, Action<int, uint> onPurchaseCard) Parameters Type Name Description Int32 itemId UInt32 itemPrice Action < Int32 , UInt32 > onPurchaseCard ShowPopupPurchaseResult(String) Declaration public void ShowPopupPurchaseResult(string message) Parameters Type Name Description String message"
  },
  "api/Timba.Games.SacredTails.WalletController.html": {
    "href": "api/Timba.Games.SacredTails.WalletController.html",
    "title": "Class WalletController | Example Unity documentation",
    "keywords": "Class WalletController Inheritance Object WalletController Implements IWallet IService Namespace : Timba.Games.SacredTails Assembly : cs.temp.dll.dll Syntax public class WalletController : MonoBehaviour, IWallet Methods GetPlayerCurrency(GetUserInventoryResult) Declaration public void GetPlayerCurrency(GetUserInventoryResult result) Parameters Type Name Description GetUserInventoryResult result GetUserCurrentCoins() Declaration public int GetUserCurrentCoins() Returns Type Description Int32 HideUserWallet() Declaration public void HideUserWallet() IsReady() Declaration public bool IsReady() Returns Type Description Boolean ShowUserWallet() Declaration public void ShowUserWallet() Start() Declaration public void Start() UpdateUserWallet() Declaration public void UpdateUserWallet() Implements IWallet IService"
  },
  "api/Timba.Games.SacredTails.WalletModule.html": {
    "href": "api/Timba.Games.SacredTails.WalletModule.html",
    "title": "Namespace Timba.Games.SacredTails.WalletModule | Example Unity documentation",
    "keywords": "Namespace Timba.Games.SacredTails.WalletModule Classes WalletView"
  },
  "api/Timba.Games.SacredTails.WalletModule.WalletView.html": {
    "href": "api/Timba.Games.SacredTails.WalletModule.WalletView.html",
    "title": "Class WalletView | Example Unity documentation",
    "keywords": "Class WalletView Inheritance Object WalletView Namespace : Timba.Games.SacredTails.WalletModule Assembly : cs.temp.dll.dll Syntax public class WalletView : MonoBehaviour Fields currencyText Declaration public TMP_Text currencyText Field Value Type Description TMP_Text walletPanel Declaration public GameObject walletPanel Field Value Type Description GameObject Methods ChangeCurrency(Int32) Declaration public void ChangeCurrency(int currentCurrency) Parameters Type Name Description Int32 currentCurrency HideUserWallet() Declaration public void HideUserWallet() ShowUserWallet() Declaration public void ShowUserWallet()"
  },
  "api/Timba.Packages.Games.ChatModule.Controller.html": {
    "href": "api/Timba.Packages.Games.ChatModule.Controller.html",
    "title": "Namespace Timba.Packages.Games.ChatModule.Controller | Example Unity documentation",
    "keywords": "Namespace Timba.Packages.Games.ChatModule.Controller Classes LobbyChatController"
  },
  "api/Timba.Packages.Games.ChatModule.Controller.LobbyChatController.html": {
    "href": "api/Timba.Packages.Games.ChatModule.Controller.LobbyChatController.html",
    "title": "Class LobbyChatController | Example Unity documentation",
    "keywords": "Class LobbyChatController Inheritance Object LobbyChatController Namespace : Timba.Packages.Games.ChatModule.Controller Assembly : cs.temp.dll.dll Syntax public class LobbyChatController : LobbyChatCoreController Methods Init<T>(T) Declaration public override void Init<T>(T data) Parameters Type Name Description T data Type Parameters Name Description T"
  },
  "api/Timba.Packages.Games.ChatModule.Core.html": {
    "href": "api/Timba.Packages.Games.ChatModule.Core.html",
    "title": "Namespace Timba.Packages.Games.ChatModule.Core | Example Unity documentation",
    "keywords": "Namespace Timba.Packages.Games.ChatModule.Core Classes LobbyChatCoreController Interfaces ILobbyChatViewable"
  },
  "api/Timba.Packages.Games.ChatModule.Core.ILobbyChatViewable.html": {
    "href": "api/Timba.Packages.Games.ChatModule.Core.ILobbyChatViewable.html",
    "title": "Interface ILobbyChatViewable | Example Unity documentation",
    "keywords": "Interface ILobbyChatViewable Namespace : Timba.Packages.Games.ChatModule.Core Assembly : cs.temp.dll.dll Syntax public interface ILobbyChatViewable Properties OnSendMessage Declaration Action<string> OnSendMessage { get; set; } Property Value Type Description Action < String > Methods Init() Declaration void Init() ShowMessage(MessageDto) Declaration void ShowMessage(MessageDto MessageDto) Parameters Type Name Description MessageDto MessageDto"
  },
  "api/Timba.Packages.Games.ChatModule.Core.LobbyChatCoreController.html": {
    "href": "api/Timba.Packages.Games.ChatModule.Core.LobbyChatCoreController.html",
    "title": "Class LobbyChatCoreController | Example Unity documentation",
    "keywords": "Class LobbyChatCoreController Inheritance Object LobbyChatCoreController Namespace : Timba.Packages.Games.ChatModule.Core Assembly : cs.temp.dll.dll Syntax public abstract class LobbyChatCoreController : MonoBehaviour Fields chatView Declaration protected ILobbyChatViewable chatView Field Value Type Description ILobbyChatViewable Methods Init<T>(T) Declaration public abstract void Init<T>(T data) Parameters Type Name Description T data Type Parameters Name Description T"
  },
  "api/Timba.Packages.Games.ChatModule.Model.html": {
    "href": "api/Timba.Packages.Games.ChatModule.Model.html",
    "title": "Namespace Timba.Packages.Games.ChatModule.Model | Example Unity documentation",
    "keywords": "Namespace Timba.Packages.Games.ChatModule.Model Classes LobbyChatModel"
  },
  "api/Timba.Packages.Games.ChatModule.Model.LobbyChatModel.html": {
    "href": "api/Timba.Packages.Games.ChatModule.Model.LobbyChatModel.html",
    "title": "Class LobbyChatModel | Example Unity documentation",
    "keywords": "Class LobbyChatModel Inheritance Object LobbyChatModel Namespace : Timba.Packages.Games.ChatModule.Model Assembly : cs.temp.dll.dll Syntax public static class LobbyChatModel Fields OnChatMessage Declaration public static Action<MessageDto> OnChatMessage Field Value Type Description Action < MessageDto > Methods CMDSendMessage(MessagePayload, Action<Boolean>) Declaration public static void CMDSendMessage(MessagePayload message, Action<bool> callback) Parameters Type Name Description MessagePayload message Action < Boolean > callback TestMessage(String, String) Declaration public static void TestMessage(string _message, string _nickname) Parameters Type Name Description String _message String _nickname"
  },
  "api/Timba.Packages.Games.ChatModule.Structs.html": {
    "href": "api/Timba.Packages.Games.ChatModule.Structs.html",
    "title": "Namespace Timba.Packages.Games.ChatModule.Structs | Example Unity documentation",
    "keywords": "Namespace Timba.Packages.Games.ChatModule.Structs Structs MessageDto MessagePayload"
  },
  "api/Timba.Packages.Games.ChatModule.Structs.MessageDto.html": {
    "href": "api/Timba.Packages.Games.ChatModule.Structs.MessageDto.html",
    "title": "Struct MessageDto | Example Unity documentation",
    "keywords": "Struct MessageDto Namespace : Timba.Packages.Games.ChatModule.Structs Assembly : cs.temp.dll.dll Syntax public struct MessageDto Fields message Declaration public string message Field Value Type Description String nickname Declaration public string nickname Field Value Type Description String"
  },
  "api/Timba.Packages.Games.ChatModule.Structs.MessagePayload.html": {
    "href": "api/Timba.Packages.Games.ChatModule.Structs.MessagePayload.html",
    "title": "Struct MessagePayload | Example Unity documentation",
    "keywords": "Struct MessagePayload Namespace : Timba.Packages.Games.ChatModule.Structs Assembly : cs.temp.dll.dll Syntax public struct MessagePayload Fields messageString Declaration public string messageString Field Value Type Description String userId Declaration public string userId Field Value Type Description String"
  },
  "api/Timba.Packages.Games.PlayerControllerModule.Core.html": {
    "href": "api/Timba.Packages.Games.PlayerControllerModule.Core.html",
    "title": "Namespace Timba.Packages.Games.PlayerControllerModule.Core | Example Unity documentation",
    "keywords": "Namespace Timba.Packages.Games.PlayerControllerModule.Core Classes ThirdPersonCoreController"
  },
  "api/Timba.Packages.Games.PlayerControllerModule.Core.ThirdPersonCoreController.html": {
    "href": "api/Timba.Packages.Games.PlayerControllerModule.Core.ThirdPersonCoreController.html",
    "title": "Class ThirdPersonCoreController | Example Unity documentation",
    "keywords": "Class ThirdPersonCoreController Inheritance Object ThirdPersonCoreController Namespace : Timba.Packages.Games.PlayerControllerModule.Core Assembly : cs.temp.dll.dll Syntax public abstract class ThirdPersonCoreController : MonoBehaviour Fields inputHandler Declaration protected IInputHandleable inputHandler Field Value Type Description IInputHandleable Methods Init<T>(T) Declaration public abstract void Init<T>(T data) Parameters Type Name Description T data Type Parameters Name Description T"
  },
  "api/Timba.Packages.Games.PlayerControllerModule.html": {
    "href": "api/Timba.Packages.Games.PlayerControllerModule.html",
    "title": "Namespace Timba.Packages.Games.PlayerControllerModule | Example Unity documentation",
    "keywords": "Namespace Timba.Packages.Games.PlayerControllerModule Classes InputHandler InputSource Interfaces IInputHandleable"
  },
  "api/Timba.Packages.Games.PlayerControllerModule.IInputHandleable.html": {
    "href": "api/Timba.Packages.Games.PlayerControllerModule.IInputHandleable.html",
    "title": "Interface IInputHandleable | Example Unity documentation",
    "keywords": "Interface IInputHandleable Namespace : Timba.Packages.Games.PlayerControllerModule Assembly : cs.temp.dll.dll Syntax public interface IInputHandleable Methods GetHorizontalInput() Declaration float GetHorizontalInput() Returns Type Description Single GetVerticalInput() Declaration float GetVerticalInput() Returns Type Description Single Init() Declaration void Init()"
  },
  "api/Timba.Packages.Games.PlayerControllerModule.InputHandler.html": {
    "href": "api/Timba.Packages.Games.PlayerControllerModule.InputHandler.html",
    "title": "Class InputHandler | Example Unity documentation",
    "keywords": "Class InputHandler Inheritance Object InputHandler Implements IInputHandleable Namespace : Timba.Packages.Games.PlayerControllerModule Assembly : cs.temp.dll.dll Syntax public class InputHandler : MonoBehaviour, IInputHandleable Fields keyBindings Declaration public InputSource keyBindings Field Value Type Description InputSource Methods GetHorizontalInput() Declaration public float GetHorizontalInput() Returns Type Description Single GetInteractableInput() Declaration public bool GetInteractableInput() Returns Type Description Boolean GetVerticalInput() Declaration public float GetVerticalInput() Returns Type Description Single Init() Declaration public void Init() Implements IInputHandleable"
  },
  "api/Timba.Packages.Games.PlayerControllerModule.InputSource.html": {
    "href": "api/Timba.Packages.Games.PlayerControllerModule.InputSource.html",
    "title": "Class InputSource | Example Unity documentation",
    "keywords": "Class InputSource Inheritance Object InputSource Namespace : Timba.Packages.Games.PlayerControllerModule Assembly : cs.temp.dll.dll Syntax public class InputSource : ScriptableObject Fields down Declaration public KeyCode[] down Field Value Type Description KeyCode [] interact Declaration public KeyCode[] interact Field Value Type Description KeyCode [] left Declaration public KeyCode[] left Field Value Type Description KeyCode [] right Declaration public KeyCode[] right Field Value Type Description KeyCode [] up Declaration public KeyCode[] up Field Value Type Description KeyCode [] Methods SetInteractValue() Declaration public bool SetInteractValue() Returns Type Description Boolean SetMoveValue(KeyCode[], KeyCode[]) Declaration public float SetMoveValue(KeyCode[] aSet, KeyCode[] bSet) Parameters Type Name Description KeyCode [] aSet KeyCode [] bSet Returns Type Description Single"
  },
  "api/Timba.Patterns.ServiceLocator.html": {
    "href": "api/Timba.Patterns.ServiceLocator.html",
    "title": "Namespace Timba.Patterns.ServiceLocator | Example Unity documentation",
    "keywords": "Namespace Timba.Patterns.ServiceLocator Classes ServiceLocator ServiceLocatorConfig SingleInstanceMonoBehaviour<T> SingletonMonoBehaviour<T> Avoid using singletons. If you need a class that guarantees a single instance consider using SingleInstanceMonoBehaviour or simmilar If you must have a singleton, consider registering it as a service instead using ServiceLocator Interfaces IService"
  },
  "api/Timba.Patterns.ServiceLocator.IService.html": {
    "href": "api/Timba.Patterns.ServiceLocator.IService.html",
    "title": "Interface IService | Example Unity documentation",
    "keywords": "Interface IService Namespace : Timba.Patterns.ServiceLocator Assembly : cs.temp.dll.dll Syntax public interface IService Properties gameObject Declaration GameObject gameObject { get; } Property Value Type Description GameObject Methods IsReady() Declaration bool IsReady() Returns Type Description Boolean"
  },
  "api/Timba.Patterns.ServiceLocator.ServiceLocator.html": {
    "href": "api/Timba.Patterns.ServiceLocator.ServiceLocator.html",
    "title": "Class ServiceLocator | Example Unity documentation",
    "keywords": "Class ServiceLocator Inheritance Object SingletonMonoBehaviour < ServiceLocator > ServiceLocator Inherited Members SingletonMonoBehaviour<ServiceLocator>.Instance SingletonMonoBehaviour<ServiceLocator>.Awake() SingletonMonoBehaviour<ServiceLocator>.initialized Namespace : Timba.Patterns.ServiceLocator Assembly : cs.temp.dll.dll Syntax public class ServiceLocator : SingletonMonoBehaviour<ServiceLocator> Fields config Declaration public ServiceLocatorConfig config Field Value Type Description ServiceLocatorConfig Methods GetService<T>() Finds a service of type T. The search is done in the following order: 1 - Look for a registered service in the Service Locator 2 - Find an existing game object of type T in the scene 3 - Find a default service of type T in ServiceLocatorConfig This call can be slow. Always keep a local reference of the service you find Declaration public T GetService<T>() where T : IService Returns Type Description T Type Parameters Name Description T Type of the service to find Initialize() Declaration protected override void Initialize() Overrides Timba.Patterns.ServiceLocator.SingletonMonoBehaviour<Timba.Patterns.ServiceLocator.ServiceLocator>.Initialize()"
  },
  "api/Timba.Patterns.ServiceLocator.ServiceLocatorConfig.html": {
    "href": "api/Timba.Patterns.ServiceLocator.ServiceLocatorConfig.html",
    "title": "Class ServiceLocatorConfig | Example Unity documentation",
    "keywords": "Class ServiceLocatorConfig Inheritance Object ServiceLocatorConfig Namespace : Timba.Patterns.ServiceLocator Assembly : cs.temp.dll.dll Syntax public class ServiceLocatorConfig : ScriptableObject Fields defaultServicesPrefabs Declaration public GameObject[] defaultServicesPrefabs Field Value Type Description GameObject []"
  },
  "api/Timba.Patterns.ServiceLocator.SingleInstanceMonoBehaviour-1.html": {
    "href": "api/Timba.Patterns.ServiceLocator.SingleInstanceMonoBehaviour-1.html",
    "title": "Class SingleInstanceMonoBehaviour<T> | Example Unity documentation",
    "keywords": "Class SingleInstanceMonoBehaviour<T> Inheritance Object SingleInstanceMonoBehaviour<T> Namespace : Timba.Patterns.ServiceLocator Assembly : cs.temp.dll.dll Syntax public class SingleInstanceMonoBehaviour<T> : MonoBehaviour where T : SingleInstanceMonoBehaviour<T> Type Parameters Name Description T Fields initialized Declaration protected bool initialized Field Value Type Description Boolean Methods Awake() Declaration public virtual void Awake() Initialize() Declaration protected virtual void Initialize()"
  },
  "api/Timba.Patterns.ServiceLocator.SingletonMonoBehaviour-1.html": {
    "href": "api/Timba.Patterns.ServiceLocator.SingletonMonoBehaviour-1.html",
    "title": "Class SingletonMonoBehaviour<T> | Example Unity documentation",
    "keywords": "Class SingletonMonoBehaviour<T> Avoid using singletons. If you need a class that guarantees a single instance consider using SingleInstanceMonoBehaviour or simmilar If you must have a singleton, consider registering it as a service instead using ServiceLocator Inheritance Object SingletonMonoBehaviour<T> ServiceLocator Namespace : Timba.Patterns.ServiceLocator Assembly : cs.temp.dll.dll Syntax public class SingletonMonoBehaviour<T> : MonoBehaviour where T : SingletonMonoBehaviour<T> Type Parameters Name Description T Fields initialized Declaration protected bool initialized Field Value Type Description Boolean Properties Instance Declaration public static T Instance { get; } Property Value Type Description T Methods Awake() Declaration public virtual void Awake() Initialize() Declaration protected virtual void Initialize()"
  },
  "api/Timba.Recolor.html": {
    "href": "api/Timba.Recolor.html",
    "title": "Namespace Timba.Recolor | Example Unity documentation",
    "keywords": "Namespace Timba.Recolor Classes RecolorablePart3D"
  },
  "api/Timba.Recolor.RecolorablePart3D.html": {
    "href": "api/Timba.Recolor.RecolorablePart3D.html",
    "title": "Class RecolorablePart3D | Example Unity documentation",
    "keywords": "Class RecolorablePart3D Inheritance Object RecolorablePart3D Namespace : Timba.Recolor Assembly : cs.temp.dll.dll Syntax public class RecolorablePart3D : MonoBehaviour Fields colors Declaration public Color32[] colors Field Value Type Description Color32 [] Methods SetColors(String[], Color32[]) Declaration public void SetColors(string[] materialPropertyName, Color32[] newColors) Parameters Type Name Description String [] materialPropertyName Color32 [] newColors"
  },
  "api/Timba.SacredTails.Arena.ActionCard.html": {
    "href": "api/Timba.SacredTails.Arena.ActionCard.html",
    "title": "Class ActionCard | Example Unity documentation",
    "keywords": "Class ActionCard Code representation of attack cards in the game Inheritance Object ActionCard Namespace : Timba.SacredTails.Arena Assembly : cs.temp.dll.dll Syntax [Serializable] public class ActionCard : ScriptableObject Fields BattleAction Declaration public List<string> BattleAction Field Value Type Description List < String > BattleActions Declaration public List<BattleActionData> BattleActions Field Value Type Description List < BattleActionData > cardImage Declaration public Sprite cardImage Field Value Type Description Sprite cardType Declaration public CharacterType cardType Field Value Type Description CharacterType casterAnimation Declaration public AttacksAnimation casterAnimation Field Value Type Description AttacksAnimation Description Declaration public string Description Field Value Type Description String DisplayNotification Declaration public string DisplayNotification Field Value Type Description String isComingFromCopyIndex Declaration public int isComingFromCopyIndex Field Value Type Description Int32 PpCost Declaration public int PpCost Field Value Type Description Int32 targetAnimation Declaration public AttacksAnimation targetAnimation Field Value Type Description AttacksAnimation vfxAffectBoth Declaration public bool vfxAffectBoth Field Value Type Description Boolean VfxIndex Declaration public int VfxIndex Field Value Type Description Int32 Methods OnValidate() Declaration public void OnValidate() ShouldSerializeBattleActions() Declaration public bool ShouldSerializeBattleActions() Returns Type Description Boolean"
  },
  "api/Timba.SacredTails.Arena.ArenaShinseiSelectionController.html": {
    "href": "api/Timba.SacredTails.Arena.ArenaShinseiSelectionController.html",
    "title": "Class ArenaShinseiSelectionController | Example Unity documentation",
    "keywords": "Class ArenaShinseiSelectionController Inheritance Object ArenaShinseiSelectionController Namespace : Timba.SacredTails.Arena Assembly : cs.temp.dll.dll Syntax public class ArenaShinseiSelectionController : MonoBehaviour Fields OnShinseisSelected Declaration public Action<bool, List<int>> OnShinseisSelected Field Value Type Description Action < Boolean , List < Int32 >> Methods Init(MatchData, Int32, Boolean) Declaration public void Init(MatchData matchData, int playerIndex, bool isViewer = false) Parameters Type Name Description MatchData matchData Int32 playerIndex Boolean isViewer OnShinseiSelectionCompleted() Declaration public void OnShinseiSelectionCompleted()"
  },
  "api/Timba.SacredTails.Arena.ArenaShinseiSelectionUserPanelController.html": {
    "href": "api/Timba.SacredTails.Arena.ArenaShinseiSelectionUserPanelController.html",
    "title": "Class ArenaShinseiSelectionUserPanelController | Example Unity documentation",
    "keywords": "Class ArenaShinseiSelectionUserPanelController Panel before the combat when players select the Shinsei party to the battle Inheritance Object ArenaShinseiSelectionUserPanelController Namespace : Timba.SacredTails.Arena Assembly : cs.temp.dll.dll Syntax public class ArenaShinseiSelectionUserPanelController : MonoBehaviour Fields isEnemyPanel Declaration public bool isEnemyPanel Field Value Type Description Boolean nameLabel Declaration public TMP_Text nameLabel Field Value Type Description TMP_Text partyRow1 Declaration public Transform partyRow1 Field Value Type Description Transform partyRow2 Declaration public Transform partyRow2 Field Value Type Description Transform previewPanel Declaration public ShinseiPreviewPanelManager previewPanel Field Value Type Description ShinseiPreviewPanelManager selectedIndicator Declaration public Sprite selectedIndicator Field Value Type Description Sprite selectionIndicators Declaration public List<Image> selectionIndicators Field Value Type Description List < Image > selectionIndicatorsDetail Declaration public List<Image> selectionIndicatorsDetail Field Value Type Description List < Image > shinseSlotPrefab Declaration public ShinseiSlot shinseSlotPrefab Field Value Type Description ShinseiSlot textCounter Declaration public TextMeshProUGUI textCounter Field Value Type Description TextMeshProUGUI unselectedIndicator Declaration public Sprite unselectedIndicator Field Value Type Description Sprite Methods GetShinseisSelected() Declaration public List<int> GetShinseisSelected() Returns Type Description List < Int32 > Init(CombatPlayer) Declaration public void Init(CombatPlayer combatPlayer) Parameters Type Name Description CombatPlayer combatPlayer MakeSlotsUnclickeable() Declaration public void MakeSlotsUnclickeable() SelectShinseiForBattle(Int32, ShinseiSlot) Declaration public void SelectShinseiForBattle(int listIndex, ShinseiSlot shinseiSlot) Parameters Type Name Description Int32 listIndex ShinseiSlot shinseiSlot Show(Int32) Declaration public void Show(int direction) Parameters Type Name Description Int32 direction ShowNext(Boolean) Declaration public void ShowNext(bool direction) Parameters Type Name Description Boolean direction"
  },
  "api/Timba.SacredTails.Arena.AttacksAnimation.html": {
    "href": "api/Timba.SacredTails.Arena.AttacksAnimation.html",
    "title": "Enum AttacksAnimation | Example Unity documentation",
    "keywords": "Enum AttacksAnimation Namespace : Timba.SacredTails.Arena Assembly : cs.temp.dll.dll Syntax public enum AttacksAnimation Fields Name Description ATTACK0 ATTACK1 ATTACK2 ATTACK3 Awake Change Confused Damage Dance Death Dodge Emote NONE Ready Recharge Sleep"
  },
  "api/Timba.SacredTails.Arena.BattleGameMode.html": {
    "href": "api/Timba.SacredTails.Arena.BattleGameMode.html",
    "title": "Class BattleGameMode | Example Unity documentation",
    "keywords": "Class BattleGameMode Inheritance Object BattleGameMode Namespace : Timba.SacredTails.Arena Assembly : cs.temp.dll.dll Syntax public class BattleGameMode : MonoBehaviour Fields blackSprites Declaration public List<Sprite> blackSprites Field Value Type Description List < Sprite > cameraEndBattle Declaration public Camera cameraEndBattle Field Value Type Description Camera changeColorElements Declaration public List<Image> changeColorElements Field Value Type Description List < Image > changeColorInvertElements Declaration public List<Image> changeColorInvertElements Field Value Type Description List < Image > changeSpriteElements Declaration public List<Image> changeSpriteElements Field Value Type Description List < Image > colors Declaration public List<Color> colors Field Value Type Description List < Color > currentTerrain Declaration public BattleTerrainBehavioursBase currentTerrain Field Value Type Description BattleTerrainBehavioursBase delayTime Declaration public float delayTime Field Value Type Description Single enemyInfo Declaration public UserInfo enemyInfo Field Value Type Description UserInfo gameSceneManager Declaration public GameSceneManager gameSceneManager Field Value Type Description GameSceneManager hasShowEndResult Declaration public bool hasShowEndResult Field Value Type Description Boolean isViewingMatch Declaration public bool isViewingMatch Field Value Type Description Boolean localCombat Declaration public Combat localCombat Field Value Type Description Combat matchIdSeed Declaration public int matchIdSeed Field Value Type Description Int32 playerInfo Declaration public UserInfo playerInfo Field Value Type Description UserInfo texts Declaration public List<TextMeshProUGUI> texts Field Value Type Description List < TextMeshProUGUI > titleEndMatchPanel Declaration public TMP_Text titleEndMatchPanel Field Value Type Description TMP_Text turnsController Declaration public TurnsController turnsController Field Value Type Description TurnsController whiteSprites Declaration public List<Sprite> whiteSprites Field Value Type Description List < Sprite > Methods AddTextToLog(String, Dictionary<String, String>) Declaration public void AddTextToLog(string text, Dictionary<string, string> customCodes = null) Parameters Type Name Description String text Dictionary < String , String > customCodes CancelSelectShinsei() Declaration public void CancelSelectShinsei() EndMatchCheck(List<ResourceBarValues>) Declaration public bool EndMatchCheck(List<ResourceBarValues> healthBars) Parameters Type Name Description List < ResourceBarValues > healthBars Returns Type Description Boolean GetCurrentShinseiEnergy() Declaration public int GetCurrentShinseiEnergy() Returns Type Description Int32 GetOwnCombatData(Action<Combat>) Declaration public void GetOwnCombatData(Action<Combat> onRecieveData) Parameters Type Name Description Action < Combat > onRecieveData GoBackToLobby() Declaration public void GoBackToLobby() GoBackToLobbyPopup() Declaration public void GoBackToLobbyPopup() InitBattle() Declaration public void InitBattle() Initialize(MatchData) Declaration public void Initialize(MatchData matchData) Parameters Type Name Description MatchData matchData MakeShinseiPartyUsingPlayfabId(String) Bring shinsei party from playfab Declaration public void MakeShinseiPartyUsingPlayfabId(string playfabId) Parameters Type Name Description String playfabId Playfab ID OnApplicationQuit() Declaration public void OnApplicationQuit() OnDisable() Declaration public void OnDisable() OnStartMatch(GetMatchResult) Declaration public void OnStartMatch(GetMatchResult getMatchResult) Parameters Type Name Description GetMatchResult getMatchResult OnStartMatchRoutine(GetMatchResult) Declaration public IEnumerator OnStartMatchRoutine(GetMatchResult getMatchResult) Parameters Type Name Description GetMatchResult getMatchResult Returns Type Description IEnumerator OpenChangeShinseiPanel() Declaration public void OpenChangeShinseiPanel() ShinseiSelected(Boolean, List<Int32>) Declaration public void ShinseiSelected(bool endTime, List<int> shinseisPlayer) Parameters Type Name Description Boolean endTime List < Int32 > shinseisPlayer ShowEndResultPanel(Boolean, Action) Declaration public void ShowEndResultPanel(bool localPlayerWon, Action onEndAnimations = null) Parameters Type Name Description Boolean localPlayerWon Action onEndAnimations ShowPopupEndMatch(Action, String, Boolean) Declaration public void ShowPopupEndMatch(Action callback, string message, bool localPlayerWon) Parameters Type Name Description Action callback String message Boolean localPlayerWon SpawnWinnerShisneis(Boolean, Action) Declaration public void SpawnWinnerShisneis(bool localPlayerWon, Action onEndAnimations = null) Parameters Type Name Description Boolean localPlayerWon Action onEndAnimations UpdateCurrentShinsei(ref UserInfo) Declaration public void UpdateCurrentShinsei(ref UserInfo userInfo) Parameters Type Name Description UserInfo userInfo WaitForOpponentToSelect() Declaration public IEnumerator WaitForOpponentToSelect() Returns Type Description IEnumerator WaitForOpponentToSelectViewMatch() Declaration public void WaitForOpponentToSelectViewMatch()"
  },
  "api/Timba.SacredTails.Arena.BattleShinseiSpawner.html": {
    "href": "api/Timba.SacredTails.Arena.BattleShinseiSpawner.html",
    "title": "Class BattleShinseiSpawner | Example Unity documentation",
    "keywords": "Class BattleShinseiSpawner Spawns Player's and Oponent's shinseis for the arena instances Inheritance Object BattleShinseiSpawner Namespace : Timba.SacredTails.Arena Assembly : cs.temp.dll.dll Syntax public class BattleShinseiSpawner : MonoBehaviour Fields enemyParent Declaration public Transform enemyParent Field Value Type Description Transform Methods SpawnPlayerShinseis(Boolean, String) Declaration public CharacterSlot SpawnPlayerShinseis(bool isEnemy, string dna) Parameters Type Name Description Boolean isEnemy String dna Returns Type Description CharacterSlot SpawnShinseiEndGame(List<String>, Transform) Declaration public void SpawnShinseiEndGame(List<string> dnas, Transform parent) Parameters Type Name Description List < String > dnas Transform parent"
  },
  "api/Timba.SacredTails.Arena.BattleStatisticsCalculator.html": {
    "href": "api/Timba.SacredTails.Arena.BattleStatisticsCalculator.html",
    "title": "Class BattleStatisticsCalculator | Example Unity documentation",
    "keywords": "Class BattleStatisticsCalculator This class process all damage in the game apply the effect of statistics to final value, Attack, Deffence etc Inheritance Object BattleStatisticsCalculator Namespace : Timba.SacredTails.Arena Assembly : cs.temp.dll.dll Syntax public static class BattleStatisticsCalculator Fields healthMultiplier Declaration public static float healthMultiplier Field Value Type Description Single m_attackDivisionValue Declaration public static float m_attackDivisionValue Field Value Type Description Single m_attackMultiplicationValue Declaration public static float m_attackMultiplicationValue Field Value Type Description Single m_deffenseDivisionValue Declaration public static float m_deffenseDivisionValue Field Value Type Description Single m_deffenseSumValue Declaration public static float m_deffenseSumValue Field Value Type Description Single m_elementTypeBonusDivisionValue Declaration public static float m_elementTypeBonusDivisionValue Field Value Type Description Single m_evasionThreshold1 Declaration public static float m_evasionThreshold1 Field Value Type Description Single m_evasionThreshold2 Declaration public static float m_evasionThreshold2 Field Value Type Description Single m_evasionThreshold3 Declaration public static float m_evasionThreshold3 Field Value Type Description Single m_evasionThreshold4 Declaration public static float m_evasionThreshold4 Field Value Type Description Single m_evasionThreshold5 Declaration public static float m_evasionThreshold5 Field Value Type Description Single Methods ApplyEvationCritics(Int32) Declaration public static float ApplyEvationCritics(int multiplierStat) Parameters Type Name Description Int32 multiplierStat Returns Type Description Single CalculateHealth(Int32) Declaration public static float CalculateHealth(int healthStat) Parameters Type Name Description Int32 healthStat Returns Type Description Single CheckIfEvade(Int32, Single) Declaration public static bool CheckIfEvade(int multiplierStat, float evadeRoll) Parameters Type Name Description Int32 multiplierStat Single evadeRoll Returns Type Description Boolean GetBonusStat(Shinsei, ShinseiStatsEnum, Single) Declaration public static float GetBonusStat(Shinsei shinsei, ShinseiStatsEnum statBonus, float bonusPercentage) Parameters Type Name Description Shinsei shinsei ShinseiStatsEnum statBonus Single bonusPercentage Returns Type Description Single GetDamageReceiveByTarget(Single, Single) Declaration public static float GetDamageReceiveByTarget(float deffenseStat, float rawDamage) Parameters Type Name Description Single deffenseStat Single rawDamage Returns Type Description Single GetRawDamage(Single, Single, Single, Single, Single) Declaration public static float GetRawDamage(float skillHitDamage, float shinseiAttackStat, float stab, float elementBonusMultiplier, float criticsMultiplier) Parameters Type Name Description Single skillHitDamage Single shinseiAttackStat Single stab Single elementBonusMultiplier Single criticsMultiplier Returns Type Description Single GetStatByName(ShinseiStats, ShinseiStatsEnum) Declaration public static float GetStatByName(ShinseiStats shinseiStats, ShinseiStatsEnum statToModify) Parameters Type Name Description ShinseiStats shinseiStats ShinseiStatsEnum statToModify Returns Type Description Single SetStatByName(ref ShinseiStats, ShinseiStatsEnum, Single, Boolean, Boolean, Boolean) Declaration public static (string, bool) SetStatByName(ref ShinseiStats shinseiStats, ShinseiStatsEnum statToModify, float amountToAdd, bool isPercentage, bool replaceStat = false, bool isEndAction = false) Parameters Type Name Description ShinseiStats shinseiStats ShinseiStatsEnum statToModify Single amountToAdd Boolean isPercentage Boolean replaceStat Boolean isEndAction Returns Type Description (T1, T2) < String , Boolean >"
  },
  "api/Timba.SacredTails.Arena.BattleStatisticsCalculatorSO.html": {
    "href": "api/Timba.SacredTails.Arena.BattleStatisticsCalculatorSO.html",
    "title": "Class BattleStatisticsCalculatorSO | Example Unity documentation",
    "keywords": "Class BattleStatisticsCalculatorSO Scriptable object for configurate the constants of the game for the BattleStatisticsCalculator Inheritance Object BattleStatisticsCalculatorSO Namespace : Timba.SacredTails.Arena Assembly : cs.temp.dll.dll Syntax [Serializable] public class BattleStatisticsCalculatorSO : ScriptableObject Fields attackDivisionValue Declaration public float attackDivisionValue Field Value Type Description Single attackMultiplicationValue Declaration public float attackMultiplicationValue Field Value Type Description Single deffenseDivisionValue Declaration public float deffenseDivisionValue Field Value Type Description Single deffenseSumValue Declaration public float deffenseSumValue Field Value Type Description Single elementTypeBonusDivison Declaration public float elementTypeBonusDivison Field Value Type Description Single evasionThreshold1 Declaration public float evasionThreshold1 Field Value Type Description Single evasionThreshold2 Declaration public float evasionThreshold2 Field Value Type Description Single evasionThreshold3 Declaration public float evasionThreshold3 Field Value Type Description Single evasionThreshold4 Declaration public float evasionThreshold4 Field Value Type Description Single evasionThreshold5 Declaration public float evasionThreshold5 Field Value Type Description Single Methods GetJsonActionCards() Declaration public void GetJsonActionCards() SaveChanges() Declaration public void SaveChanges()"
  },
  "api/Timba.SacredTails.Arena.BattleUIController.html": {
    "href": "api/Timba.SacredTails.Arena.BattleUIController.html",
    "title": "Class BattleUIController | Example Unity documentation",
    "keywords": "Class BattleUIController Handles all of the events present in the UI of the Combat arena Mode Inheritance Object BattleUIController Namespace : Timba.SacredTails.Arena Assembly : cs.temp.dll.dll Syntax public class BattleUIController : MonoBehaviour Fields battleMenu Declaration public GameObject battleMenu Field Value Type Description GameObject battleNotificationSystem Declaration public BattleNotificationSystem battleNotificationSystem Field Value Type Description BattleNotificationSystem cardContainer Declaration public GameObject cardContainer Field Value Type Description GameObject cardUis Declaration public List<CardUI> cardUis Field Value Type Description List < CardUI > OnGetValueOfBars Declaration public Func<List<int>> OnGetValueOfBars Field Value Type Description Func < List < Int32 >> titleEndMatchPanel Declaration public TMP_Text titleEndMatchPanel Field Value Type Description TMP_Text uIDisolver Declaration public UIDisolver uIDisolver Field Value Type Description UIDisolver versusPanelController Declaration public VersusPanelController versusPanelController Field Value Type Description VersusPanelController viewingBackToLobbyButton Declaration public GameObject viewingBackToLobbyButton Field Value Type Description GameObject Methods AddPing(Int32) Declaration public void AddPing(int amount) Parameters Type Name Description Int32 amount ApplyEnergyChange(Int32, Int32) Declaration public void ApplyEnergyChange(int energyBarIndex, int newEnergyValue) Parameters Type Name Description Int32 energyBarIndex Int32 newEnergyValue ChangeHealthbarView() Declaration public void ChangeHealthbarView() ChangeHealthColorBar(Int32) Declaration public void ChangeHealthColorBar(int indexBar) Parameters Type Name Description Int32 indexBar EndMatchCheck(Boolean) Declaration public bool EndMatchCheck(bool isLocalPlayerHealthBars) Parameters Type Name Description Boolean isLocalPlayerHealthBars Returns Type Description Boolean HideEverythingForWatchMatch(Boolean) Declaration public void HideEverythingForWatchMatch(bool isViewer) Parameters Type Name Description Boolean isViewer Init(ResourceBarValues, ResourceBarValues, ResourceBarValues, ResourceBarValues, String, String, Boolean) Declaration public void Init(ResourceBarValues player1Hp, ResourceBarValues player2Hp, ResourceBarValues player1Pp, ResourceBarValues player2Pp, string playerName, string enemyName, bool isViewing = false) Parameters Type Name Description ResourceBarValues player1Hp ResourceBarValues player2Hp ResourceBarValues player1Pp ResourceBarValues player2Pp String playerName String enemyName Boolean isViewing InitializeBars(Int32, Int32, Int32, Int32, Int32, Int32) Declaration public void InitializeBars(int playerHealth, int healthBarIndex, int maxValueHealth, int playerEnergy, int energyBarIndex, int maxValueEnergy) Parameters Type Name Description Int32 playerHealth Int32 healthBarIndex Int32 maxValueHealth Int32 playerEnergy Int32 energyBarIndex Int32 maxValueEnergy ShowCards(Boolean) Declaration public void ShowCards(bool isShow) Parameters Type Name Description Boolean isShow ShowFaster(Int32) Declaration public void ShowFaster(int index) Parameters Type Name Description Int32 index ToggleWaitingPrompt(Boolean, Boolean) Declaration public void ToggleWaitingPrompt(bool isWaiting, bool isSkipTurn = false) Parameters Type Name Description Boolean isWaiting Boolean isSkipTurn UpdatePing(Int32) Declaration public void UpdatePing(int amount) Parameters Type Name Description Int32 amount UpdateShinseiPicture(Int32, Shinsei) Declaration public void UpdateShinseiPicture(int playerIndex, Shinsei playerShinsei) Parameters Type Name Description Int32 playerIndex Shinsei playerShinsei UpdateTimer(Single, String, Boolean) Declaration public void UpdateTimer(float timeInSeconds, string colorText = null, bool didEnemyDisconnect = true) Parameters Type Name Description Single timeInSeconds String colorText Boolean didEnemyDisconnect"
  },
  "api/Timba.SacredTails.Arena.BattleViewerController.html": {
    "href": "api/Timba.SacredTails.Arena.BattleViewerController.html",
    "title": "Class BattleViewerController | Example Unity documentation",
    "keywords": "Class BattleViewerController Inheritance Object BattleViewerController Namespace : Timba.SacredTails.Arena Assembly : cs.temp.dll.dll Syntax public class BattleViewerController : MonoBehaviour Fields battleGameMode Declaration public BattleGameMode battleGameMode Field Value Type Description BattleGameMode Methods Initialize(String, Boolean) Declaration public void Initialize(string matchId, bool isViewing) Parameters Type Name Description String matchId Boolean isViewing"
  },
  "api/Timba.SacredTails.Arena.CardDatabase.html": {
    "href": "api/Timba.SacredTails.Arena.CardDatabase.html",
    "title": "Class CardDatabase | Example Unity documentation",
    "keywords": "Class CardDatabase Inheritance Object CardDatabase Namespace : Timba.SacredTails.Arena Assembly : cs.temp.dll.dll Syntax public class CardDatabase : ScriptableObject Fields _ Declaration public bool _ Field Value Type Description Boolean actionCards Declaration public List<ActionCard> actionCards Field Value Type Description List < ActionCard > searchByIndex Declaration public bool searchByIndex Field Value Type Description Boolean searchByName Declaration public bool searchByName Field Value Type Description Boolean searchByType Declaration public bool searchByType Field Value Type Description Boolean Methods GetJsonActionCards() Declaration public void GetJsonActionCards() OnValidate() Declaration public void OnValidate() SetVfxIndex() Declaration public void SetVfxIndex()"
  },
  "api/Timba.SacredTails.Arena.CardPreview.html": {
    "href": "api/Timba.SacredTails.Arena.CardPreview.html",
    "title": "Class CardPreview | Example Unity documentation",
    "keywords": "Class CardPreview UI element for card attack Inheritance Object CardPreview Implements IPointerClickHandler IPointerDownHandler IPointerEnterHandler IPointerExitHandler Namespace : Timba.SacredTails.Arena Assembly : cs.temp.dll.dll Syntax public class CardPreview : MonoBehaviour Fields cardContainer Declaration public GameObject cardContainer Field Value Type Description GameObject cardCount Declaration public int cardCount Field Value Type Description Int32 cardCountText Declaration public TMP_Text cardCountText Field Value Type Description TMP_Text cardDesc Declaration public TMP_Text cardDesc Field Value Type Description TMP_Text cardIndex Declaration public int cardIndex Field Value Type Description Int32 cardName Declaration public TMP_Text cardName Field Value Type Description TMP_Text cardPP Declaration public TMP_Text cardPP Field Value Type Description TMP_Text cardSprite Declaration public Image cardSprite Field Value Type Description Image cardType Declaration public Image cardType Field Value Type Description Image OnClickHandler Declaration public Action<int> OnClickHandler Field Value Type Description Action < Int32 > onPointerDown Declaration public Action onPointerDown Field Value Type Description Action onPointerEnter Declaration public Action onPointerEnter Field Value Type Description Action onPointerExit Declaration public Action onPointerExit Field Value Type Description Action UseInCodeAkSounds Declaration public bool UseInCodeAkSounds Field Value Type Description Boolean Methods CopyCardIndex(CardPreview) Declaration public void CopyCardIndex(CardPreview cardPreview) Parameters Type Name Description CardPreview cardPreview Init(ActionCard, Int32) Declaration public void Init(ActionCard card, int cardIndex) Parameters Type Name Description ActionCard card Int32 cardIndex OnPointerClick(PointerEventData) Declaration public void OnPointerClick(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData OnPointerDown(PointerEventData) Declaration public void OnPointerDown(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData OnPointerEnter(PointerEventData) Declaration public void OnPointerEnter(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData OnPointerExit(PointerEventData) Declaration public void OnPointerExit(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData SetToggable() Declaration public void SetToggable() UpdateVisual(Int32) Declaration public void UpdateVisual(int index) Parameters Type Name Description Int32 index Implements IPointerClickHandler IPointerDownHandler IPointerEnterHandler IPointerExitHandler"
  },
  "api/Timba.SacredTails.Arena.CardUI.html": {
    "href": "api/Timba.SacredTails.Arena.CardUI.html",
    "title": "Class CardUI | Example Unity documentation",
    "keywords": "Class CardUI UI element of cards from the card store also show a preview of card with details Inheritance Object CardUI Namespace : Timba.SacredTails.Arena Assembly : cs.temp.dll.dll Syntax public class CardUI : MonoBehaviour Fields battleGameMode Declaration public BattleGameMode battleGameMode Field Value Type Description BattleGameMode textDescription Declaration public string textDescription Field Value Type Description String Methods DisplayTooltip() Declaration public void DisplayTooltip() OnTurnChange() Declaration public void OnTurnChange() SetCardEmpty() Declaration public void SetCardEmpty() SetDataCard(String, String, String, CharacterType) Declaration public void SetDataCard(string textTitle, string textDescription, string textEnergy, CharacterType cardType) Parameters Type Name Description String textTitle String textDescription String textEnergy CharacterType cardType"
  },
  "api/Timba.SacredTails.Arena.Combat.html": {
    "href": "api/Timba.SacredTails.Arena.Combat.html",
    "title": "Class Combat | Example Unity documentation",
    "keywords": "Class Combat Inheritance Object Combat Namespace : Timba.SacredTails.Arena Assembly : cs.temp.dll.dll Syntax [Serializable] public class Combat Fields CurrentShinsei Declaration public int CurrentShinsei Field Value Type Description Int32 CurrentTurn Declaration public int CurrentTurn Field Value Type Description Int32 MatchData Declaration public MatchData MatchData Field Value Type Description MatchData Turns Declaration public List<ActionCard> Turns Field Value Type Description List < ActionCard >"
  },
  "api/Timba.SacredTails.Arena.CombatPlayer.html": {
    "href": "api/Timba.SacredTails.Arena.CombatPlayer.html",
    "title": "Class CombatPlayer | Example Unity documentation",
    "keywords": "Class CombatPlayer Inheritance Object CombatPlayer Namespace : Timba.SacredTails.Arena Assembly : cs.temp.dll.dll Syntax [Serializable] public class CombatPlayer Fields confirmState Declaration public bool confirmState Field Value Type Description Boolean DisplayName Declaration public string DisplayName Field Value Type Description String forbidenActions Declaration public Dictionary<int, int> forbidenActions Field Value Type Description Dictionary < Int32 , Int32 > hasSurrender Declaration public bool hasSurrender Field Value Type Description Boolean PlayfabId Declaration [NonSerialized] public string PlayfabId Field Value Type Description String ShinseiParty Declaration public List<Shinsei> ShinseiParty Field Value Type Description List < Shinsei > shinseisSelected Declaration public bool shinseisSelected Field Value Type Description Boolean strikes Declaration public int strikes Field Value Type Description Int32"
  },
  "api/Timba.SacredTails.Arena.CustomAtributes.html": {
    "href": "api/Timba.SacredTails.Arena.CustomAtributes.html",
    "title": "Class CustomAtributes | Example Unity documentation",
    "keywords": "Class CustomAtributes Inheritance Object CustomAtributes Namespace : Timba.SacredTails.Arena Assembly : cs.temp.dll.dll Syntax [Serializable] public class CustomAtributes Fields displayName Declaration public string displayName Field Value Type Description String PlayerPlayfabId Declaration public string PlayerPlayfabId Field Value Type Description String Skill Declaration public int Skill Field Value Type Description Int32"
  },
  "api/Timba.SacredTails.Arena.GameSceneManager.html": {
    "href": "api/Timba.SacredTails.Arena.GameSceneManager.html",
    "title": "Class GameSceneManager | Example Unity documentation",
    "keywords": "Class GameSceneManager Inheritance Object GameSceneManager Namespace : Timba.SacredTails.Arena Assembly : cs.temp.dll.dll Syntax public class GameSceneManager : NetworkBehaviour Fields onEndBattle Declaration public UnityEvent onEndBattle Field Value Type Description UnityEvent Methods EndBattle() Declaration public void EndBattle() GetClosestBattleSpawn() Declaration public int GetClosestBattleSpawn() Returns Type Description Int32 SendBattle(GetMatchResult, String, Int32, Boolean, Boolean) Declaration public void SendBattle(GetMatchResult getMatchResult = null, string matchId = null, int _closestSpawnPoint = -1, bool isViewing = false, bool isBotFight = false) Parameters Type Name Description GetMatchResult getMatchResult String matchId Int32 _closestSpawnPoint Boolean isViewing Boolean isBotFight"
  },
  "api/Timba.SacredTails.Arena.html": {
    "href": "api/Timba.SacredTails.Arena.html",
    "title": "Namespace Timba.SacredTails.Arena | Example Unity documentation",
    "keywords": "Namespace Timba.SacredTails.Arena Classes ActionCard Code representation of attack cards in the game ArenaShinseiSelectionController ArenaShinseiSelectionUserPanelController Panel before the combat when players select the Shinsei party to the battle BattleGameMode BattleShinseiSpawner Spawns Player's and Oponent's shinseis for the arena instances BattleStatisticsCalculator This class process all damage in the game apply the effect of statistics to final value, Attack, Deffence etc BattleStatisticsCalculatorSO Scriptable object for configurate the constants of the game for the BattleStatisticsCalculator BattleUIController Handles all of the events present in the UI of the Combat arena Mode BattleViewerController CardDatabase CardPreview UI element for card attack CardUI UI element of cards from the card store also show a preview of card with details Combat CombatPlayer CustomAtributes GameSceneManager ResourceBarValues ShinseiPreviewPanelManager UI element that show stats and details of Shinsei ShinseiSlot ShinseiStats TextboxBase Turn Turn describes the minimun necesary data to calculate battles in the game TurnsController This class handles the flow of the battle once it has started. Things like sending turns, recieving the match state and executing the turns with vfx are done/delegated here. UserInfo VfxInfo Enums AttacksAnimation"
  },
  "api/Timba.SacredTails.Arena.ResourceBarValues.html": {
    "href": "api/Timba.SacredTails.Arena.ResourceBarValues.html",
    "title": "Class ResourceBarValues | Example Unity documentation",
    "keywords": "Class ResourceBarValues Inheritance Object ResourceBarValues Namespace : Timba.SacredTails.Arena Assembly : cs.temp.dll.dll Syntax public class ResourceBarValues Fields currentValue Declaration public int currentValue Field Value Type Description Int32 maxValue Declaration public int maxValue Field Value Type Description Int32"
  },
  "api/Timba.SacredTails.Arena.ShinseiPreviewPanelManager.html": {
    "href": "api/Timba.SacredTails.Arena.ShinseiPreviewPanelManager.html",
    "title": "Class ShinseiPreviewPanelManager | Example Unity documentation",
    "keywords": "Class ShinseiPreviewPanelManager UI element that show stats and details of Shinsei Inheritance Object ShinseiPreviewPanelManager Namespace : Timba.SacredTails.Arena Assembly : cs.temp.dll.dll Syntax public class ShinseiPreviewPanelManager : MonoBehaviour Fields backgroundTypeSwapper Declaration public BackgroundTypeSwapper backgroundTypeSwapper Field Value Type Description BackgroundTypeSwapper currentShinsei Declaration public Shinsei currentShinsei Field Value Type Description Shinsei database Declaration public IDatabase database Field Value Type Description IDatabase energy Declaration public Slider energy Field Value Type Description Slider energyLabel Declaration public TMP_Text energyLabel Field Value Type Description TMP_Text health Declaration public Slider health Field Value Type Description Slider healthLabel Declaration public TMP_Text healthLabel Field Value Type Description TMP_Text partElements Declaration public List<Image> partElements Field Value Type Description List < Image > positionCounter Declaration public PositionCounter positionCounter Field Value Type Description PositionCounter selectBtn Declaration public Button selectBtn Field Value Type Description Button shinseBackground Declaration public Image shinseBackground Field Value Type Description Image shinseiCards Declaration public List<CardPreview> shinseiCards Field Value Type Description List < CardPreview > shinseiName Declaration public TMP_Text shinseiName Field Value Type Description TMP_Text shinseiSprite Declaration public Image shinseiSprite Field Value Type Description Image statLabels Declaration public List<TMP_Text> statLabels Field Value Type Description List < TMP_Text > uiHelper Declaration public IUIHelpable uiHelper Field Value Type Description IUIHelpable Methods DisplayPreview(Shinsei, Boolean, Boolean, Boolean, Boolean, Int32) Declaration public void DisplayPreview(Shinsei shinsei, bool isEnemyPreview = false, bool isSelectionScreen = false, bool isVault = false, bool isCardManagement = false, int index = 0) Parameters Type Name Description Shinsei shinsei Boolean isEnemyPreview Boolean isSelectionScreen Boolean isVault Boolean isCardManagement Int32 index SetCardsPanel(Shinsei) Declaration public void SetCardsPanel(Shinsei shinsei) Parameters Type Name Description Shinsei shinsei SetSlider(Slider, TMP_Text, Int32, Int32, Boolean) Declaration public void SetSlider(Slider slider, TMP_Text label, int value, int maxValue, bool isShinseiPreview = true) Parameters Type Name Description Slider slider TMP_Text label Int32 value Int32 maxValue Boolean isShinseiPreview SetStatPanel(List<Single>, Dictionary<String, String>, CharacterType) Declaration public void SetStatPanel(List<float> shinseiStats, Dictionary<string, string> pTypes, CharacterType mainType) Parameters Type Name Description List < Single > shinseiStats Dictionary < String , String > pTypes CharacterType mainType"
  },
  "api/Timba.SacredTails.Arena.ShinseiSlot.html": {
    "href": "api/Timba.SacredTails.Arena.ShinseiSlot.html",
    "title": "Class ShinseiSlot | Example Unity documentation",
    "keywords": "Class ShinseiSlot Inheritance Object ShinseiSlot Implements IPointerClickHandler Namespace : Timba.SacredTails.Arena Assembly : cs.temp.dll.dll Syntax public class ShinseiSlot : MonoBehaviour Fields _energy Declaration public TMP_Text _energy Field Value Type Description TMP_Text _energyBar Declaration public Slider _energyBar Field Value Type Description Slider _health Declaration public TMP_Text _health Field Value Type Description TMP_Text _helathBar Declaration public Slider _helathBar Field Value Type Description Slider _higlightColor Declaration public Color _higlightColor Field Value Type Description Color _infoBtn Declaration public Button _infoBtn Field Value Type Description Button _shinseiName Declaration public TMP_Text _shinseiName Field Value Type Description TMP_Text _shinseiTypesImg Declaration public List<Image> _shinseiTypesImg Field Value Type Description List < Image > Counter Declaration public TextMeshProUGUI Counter Field Value Type Description TextMeshProUGUI deactivateSlotOnClick Declaration public bool deactivateSlotOnClick Field Value Type Description Boolean isLocked Declaration public bool isLocked Field Value Type Description Boolean isPreviewOnly Declaration public bool isPreviewOnly Field Value Type Description Boolean listIndex Declaration public int listIndex Field Value Type Description Int32 OnSlotClicked Declaration public UnityEvent<int, ShinseiSlot> OnSlotClicked Field Value Type Description UnityEvent < Int32 , ShinseiSlot > previewBtn Declaration public Button previewBtn Field Value Type Description Button shinsei Declaration public Shinsei shinsei Field Value Type Description Shinsei shinseiKey Declaration public string shinseiKey Field Value Type Description String shinseiName Declaration public string shinseiName Field Value Type Description String shinseiView Declaration public Image shinseiView Field Value Type Description Image Properties IsCompanion Declaration public bool IsCompanion { get; set; } Property Value Type Description Boolean Methods ChangeInteractuable(Boolean, Boolean) Declaration public void ChangeInteractuable(bool slotIsLocked = false, bool deactivateSlotOnClick = true) Parameters Type Name Description Boolean slotIsLocked Boolean deactivateSlotOnClick ChangeShinseiSlotValues(String, Int32, Shinsei, String, ShinseiSlot) Declaration public void ChangeShinseiSlotValues(string shinseiKey = null, int listIndex = -1, Shinsei shinsei = null, string name = null, ShinseiSlot newSlot = null) Parameters Type Name Description String shinseiKey Int32 listIndex Shinsei shinsei String name ShinseiSlot newSlot OnPointerClick(PointerEventData) Declaration public void OnPointerClick(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData PopulateShinseiTypesSprites(String, CharacterType) Declaration public void PopulateShinseiTypesSprites(string dna, CharacterType mainType) Parameters Type Name Description String dna CharacterType mainType SetDataColor() Declaration public void SetDataColor() UpdateVisual(String, String, Sprite) Declaration public void UpdateVisual(string shinseiName = null, string shinseiDNA = null, Sprite shinseiIcon = null) Parameters Type Name Description String shinseiName String shinseiDNA Sprite shinseiIcon Implements IPointerClickHandler"
  },
  "api/Timba.SacredTails.Arena.ShinseiStats.html": {
    "href": "api/Timba.SacredTails.Arena.ShinseiStats.html",
    "title": "Class ShinseiStats | Example Unity documentation",
    "keywords": "Class ShinseiStats Inheritance Object ShinseiStats Namespace : Timba.SacredTails.Arena Assembly : cs.temp.dll.dll Syntax [Serializable] public class ShinseiStats Fields Attack Declaration public float Attack Field Value Type Description Single Defence Declaration public float Defence Field Value Type Description Single Energy Declaration public int Energy Field Value Type Description Int32 Health Declaration public int Health Field Value Type Description Int32 Speed Declaration public float Speed Field Value Type Description Single Stamina Declaration public float Stamina Field Value Type Description Single Vigor Declaration public float Vigor Field Value Type Description Single Properties attack Declaration public float attack { get; } Property Value Type Description Single defence Declaration public float defence { get; } Property Value Type Description Single speed Declaration public float speed { get; } Property Value Type Description Single stamina Declaration public float stamina { get; } Property Value Type Description Single vigor Declaration public float vigor { get; } Property Value Type Description Single Methods GetRealStat(Single) Declaration public float GetRealStat(float stat) Parameters Type Name Description Single stat Returns Type Description Single"
  },
  "api/Timba.SacredTails.Arena.ShinseiType.html": {
    "href": "api/Timba.SacredTails.Arena.ShinseiType.html",
    "title": "Namespace Timba.SacredTails.Arena.ShinseiType | Example Unity documentation",
    "keywords": "Namespace Timba.SacredTails.Arena.ShinseiType Classes ShinseiTypeListClass ShinseiTypeScriptable"
  },
  "api/Timba.SacredTails.Arena.ShinseiType.ShinseiTypeListClass.html": {
    "href": "api/Timba.SacredTails.Arena.ShinseiType.ShinseiTypeListClass.html",
    "title": "Class ShinseiTypeListClass | Example Unity documentation",
    "keywords": "Class ShinseiTypeListClass Inheritance Object ShinseiTypeListClass Namespace : Timba.SacredTails.Arena.ShinseiType Assembly : cs.temp.dll.dll Syntax [Serializable] public class ShinseiTypeListClass Fields rows Declaration public List<float> rows Field Value Type Description List < Single >"
  },
  "api/Timba.SacredTails.Arena.ShinseiType.ShinseiTypeScriptable.html": {
    "href": "api/Timba.SacredTails.Arena.ShinseiType.ShinseiTypeScriptable.html",
    "title": "Class ShinseiTypeScriptable | Example Unity documentation",
    "keywords": "Class ShinseiTypeScriptable Inheritance Object ShinseiTypeScriptable Namespace : Timba.SacredTails.Arena.ShinseiType Assembly : cs.temp.dll.dll Syntax [Serializable] public class ShinseiTypeScriptable : ScriptableObject Fields shinseiTypeMatrix Declaration public List<ShinseiTypeListClass> shinseiTypeMatrix Field Value Type Description List < ShinseiTypeListClass > Methods CompareTypesAndGetDamage(CharacterType, CharacterType) Declaration public float CompareTypesAndGetDamage(CharacterType currentShinsei, CharacterType targetShinesi) Parameters Type Name Description CharacterType currentShinsei CharacterType targetShinesi Returns Type Description Single GetMessageForTypeDamage(Single) Declaration public string GetMessageForTypeDamage(float typeDamageMultiplier) Parameters Type Name Description Single typeDamageMultiplier Returns Type Description String GetShinseiTypes() Declaration public void GetShinseiTypes() SerializeShinseiTypeMatrix() Declaration public void SerializeShinseiTypeMatrix()"
  },
  "api/Timba.SacredTails.Arena.TextboxBase.html": {
    "href": "api/Timba.SacredTails.Arena.TextboxBase.html",
    "title": "Class TextboxBase | Example Unity documentation",
    "keywords": "Class TextboxBase Inheritance Object TextboxBase Namespace : Timba.SacredTails.Arena Assembly : cs.temp.dll.dll Syntax public abstract class TextboxBase : MonoBehaviour Methods AddRemoveFilter(String) Declaration public void AddRemoveFilter(string data) Parameters Type Name Description String data AddText(String, Dictionary<String, String>) Declaration public virtual void AddText(string message, Dictionary<string, string> customCodes = null) Parameters Type Name Description String message Dictionary < String , String > customCodes ApplyFilters() Declaration public void ApplyFilters() CheckAlteredState(String) Declaration public void CheckAlteredState(string message) Parameters Type Name Description String message CheckIndividual(TextMeshProUGUI) Declaration public void CheckIndividual(TextMeshProUGUI text) Parameters Type Name Description TextMeshProUGUI text State(Boolean) Declaration public void State(bool state) Parameters Type Name Description Boolean state"
  },
  "api/Timba.SacredTails.Arena.Turn.html": {
    "href": "api/Timba.SacredTails.Arena.Turn.html",
    "title": "Class Turn | Example Unity documentation",
    "keywords": "Class Turn Turn describes the minimun necesary data to calculate battles in the game Inheritance Object Turn Namespace : Timba.SacredTails.Arena Assembly : cs.temp.dll.dll Syntax [Serializable] public class Turn Fields BattleActions Declaration public List<BattleActionData> BattleActions Field Value Type Description List < BattleActionData > indexCard Declaration public int indexCard Field Value Type Description Int32 ppCost Declaration public int ppCost Field Value Type Description Int32 turnActionType Declaration public CharacterType turnActionType Field Value Type Description CharacterType"
  },
  "api/Timba.SacredTails.Arena.TurnsController.html": {
    "href": "api/Timba.SacredTails.Arena.TurnsController.html",
    "title": "Class TurnsController | Example Unity documentation",
    "keywords": "Class TurnsController This class handles the flow of the battle once it has started. Things like sending turns, recieving the match state and executing the turns with vfx are done/delegated here. Inheritance Object TurnsController Namespace : Timba.SacredTails.Arena Assembly : cs.temp.dll.dll Syntax public class TurnsController : MonoBehaviour Fields alreadyCheckWinnerOnSend Declaration public bool alreadyCheckWinnerOnSend Field Value Type Description Boolean alteredStateController Declaration public AlteredStateController alteredStateController Field Value Type Description AlteredStateController battleEnemyCurrentActions Declaration public List<BattleActionData> battleEnemyCurrentActions Field Value Type Description List < BattleActionData > battlePlayerCurrentActions Declaration public List<BattleActionData> battlePlayerCurrentActions Field Value Type Description List < BattleActionData > calculateEndMatchAgain Declaration public bool calculateEndMatchAgain Field Value Type Description Boolean camManager Declaration public CameraPlaneController camManager Field Value Type Description CameraPlaneController cardToTest Declaration public int cardToTest Field Value Type Description Int32 deathTime Declaration public int deathTime Field Value Type Description Int32 isEnemySleep Declaration public bool isEnemySleep Field Value Type Description Boolean isPlayerSleep Declaration public bool isPlayerSleep Field Value Type Description Boolean isViewingMatch Declaration public bool isViewingMatch Field Value Type Description Boolean localPlayer Declaration public CombatPlayer localPlayer Field Value Type Description CombatPlayer matchEnded Declaration public bool matchEnded Field Value Type Description Boolean secondsToSendTurnAfterTurnInit Declaration public float secondsToSendTurnAfterTurnInit Field Value Type Description Single testMatchSendTurnAutomatically Declaration public bool testMatchSendTurnAutomatically Field Value Type Description Boolean turnActionsDatabase Declaration public List<BattleActionsBase> turnActionsDatabase Field Value Type Description List < BattleActionsBase > turnActionsDatabaseDictionary Declaration public Dictionary<ActionTypeEnum, BattleActionsBase> turnActionsDatabaseDictionary Field Value Type Description Dictionary < ActionTypeEnum , BattleActionsBase > uiCards Declaration public List<CardUI> uiCards Field Value Type Description List < CardUI > vfxPositions Declaration public List<VFXPositionData> vfxPositions Field Value Type Description List < VFXPositionData > vfxPositionsDictionary Declaration public Dictionary<VFXPositionEnum, Transform> vfxPositionsDictionary Field Value Type Description Dictionary < VFXPositionEnum , Transform > vfxsActionType Declaration public List<VFXTypeData> vfxsActionType Field Value Type Description List < VFXTypeData > Methods BtnSendTurn(Int32) Method that will be called by the cards buttons. This method will start sending a turn to the server with the SendMyTurn method. Declaration public void BtnSendTurn(int indexCard) Parameters Type Name Description Int32 indexCard CalculateEnergyRegen(Shinsei, ResourceBarValues, List<BattleActionData>, Int32) Calculates the amount of energy that a shinsei restores after the turn passes Declaration public void CalculateEnergyRegen(Shinsei playerShinsei, ResourceBarValues energyBar, List<BattleActionData> playersActions, int playerIndex) Parameters Type Name Description Shinsei playerShinsei Shinsei of the player ResourceBarValues energyBar Energy bar of the shinsei List < BattleActionData > playersActions Player turn Int32 playerIndex Index of the player 0=local, 1=enemy CalculateIncomingActions(ref List<BattleActionData>, Int32, Int32) Execute the action of the target player on this turn, uses the battleaction dictionary to execute the pending actions from the player. Finally it checks if the shinseis are all dead in order to end the match. Declaration public void CalculateIncomingActions(ref List<BattleActionData> currentActionsData, int playerIndex, int ppCost) Parameters Type Name Description List < BattleActionData > currentActionsData Actions executed this turn Int32 playerIndex Index of user Int32 ppCost ppCost of card ChangeShinseiFromServer(Boolean, Object, ref UserInfo) Declaration public void ChangeShinseiFromServer(bool isLocalPlayer, dynamic userServerData, ref UserInfo userInfo) Parameters Type Name Description Boolean isLocalPlayer Object userServerData UserInfo userInfo CheckDeadTime(Int32) Check the dead time in order to make the InitTurnsFlow() wait that time. Declaration public int CheckDeadTime(int healthOther) Parameters Type Name Description Int32 healthOther helth of other player current shinsei Returns Type Description Int32 CheckEndMatch(Boolean, UserInfo) Check if the match has ended due to all the shinseis beign death Declaration public void CheckEndMatch(bool isLocalPlayer, UserInfo otherPlayer) Parameters Type Name Description Boolean isLocalPlayer Is the player asking, the current player UserInfo otherPlayer Player to check if shinseis are death CheckEnergyBarsAndInitNextTurn() After executing actions update energyBars and init next turn. Declaration public void CheckEnergyBarsAndInitNextTurn() CheckIfAnyoneSurrendered(List<ActionCardDto>, Boolean) Check if the enemy has surrender, if it has then end match. Declaration public bool CheckIfAnyoneSurrendered(List<ActionCardDto> playersTurnIndexCard, bool isLocalFirst) Parameters Type Name Description List < ActionCardDto > playersTurnIndexCard Players turns Boolean isLocalFirst Is the local player surrendering first Returns Type Description Boolean CurrentActionsHasSkipTurnForEnemy() Checks the actions of both players to see if any of the both has a skip turn directed to the enemy player Declaration public bool CurrentActionsHasSkipTurnForEnemy() Returns Type Description Boolean Enemy has skip turn CurrentActionsHasSkipTurnForLocalPlayer() Checks the actions of both players to see if any of the both has a skip turn directed to the local player Declaration public bool CurrentActionsHasSkipTurnForLocalPlayer() Returns Type Description Boolean Player has skip turn DoDeathVerification(Boolean) Declaration public void DoDeathVerification(bool targetIsLocal) Parameters Type Name Description Boolean targetIsLocal ExecuteServerAction(List<ActionCardDto>, Boolean) Execute enemy actions that we bringed earlier from the cloud. Declaration public Action ExecuteServerAction(List<ActionCardDto> turns, bool isEnemy = false) Parameters Type Name Description List < ActionCardDto > turns Turns of the players Boolean isEnemy Is the enemy the one who want to execute his action? Returns Type Description Action ForbiddenActionCheck(ActionCard) Declaration public bool ForbiddenActionCheck(ActionCard actionCard) Parameters Type Name Description ActionCard actionCard Returns Type Description Boolean GetTrueIndexCard(Int32) Get the index of a card in the cardDatabase by passing the index of the card in the shinsei Declaration public int GetTrueIndexCard(int indexCard) Parameters Type Name Description Int32 indexCard index of the card in the shinsei Returns Type Description Int32 Examples 0,1,2,3 is for the first 4 cards of the shinsei. 4,5,6 is for the shinsei change 7 is for skipping turn 8 is for surrender Init(BattleGameMode, Boolean) Initialize turns controller by setting the vfx positions(enemy, center and player), then initialize a dictionary with of the battleActions(attack,buffdebuff,etc) Also it susbscribe to the change of turn to execute the InitNewTurn. Declaration public void Init(BattleGameMode battleGameMode, bool isViewing = false) Parameters Type Name Description BattleGameMode battleGameMode Reference to the battlemode in order to acces the users data i.e: shisneis Boolean isViewing if the user is watching a match or participating in the match InitNewTurn() Init new turn checking if any player has a sleep in his battleActions in order to execute an automatic skipturn. This is temporal logic. The sleep logic should be it's own BattleAction/AlteredState. Declaration public void InitNewTurn() InitTurnFlow(Boolean, Action, Action, Action) Manage the turn execution flow executing the turns in the order the server executed them. Check if otherPlayer shinsei dies. If so, then doesn't execute his action. Declaration public void InitTurnFlow(bool ownerOfActionIsLocal, Action userAction, Action enemyAction, Action callback) Parameters Type Name Description Boolean ownerOfActionIsLocal Action userAction Action enemyAction Action callback ReduceForbiddenActionsDuration() Declaration public void ReduceForbiddenActionsDuration() ReplaceUserLocalDataWithServerData(Boolean, Object, ref UserInfo) Declaration public void ReplaceUserLocalDataWithServerData(bool isLocalPlayer, dynamic userServerData, ref UserInfo userInfo) Parameters Type Name Description Boolean isLocalPlayer Object userServerData UserInfo userInfo SendMyTurn(Int32) Prepare my turn with the card selected, execute it in local(cameras,ui) and send it to the other player. Also check if the card has been forbideen by other card effect, if so then shows a popup explaining that. Declaration public void SendMyTurn(int indexCard) Parameters Type Name Description Int32 indexCard Index of card SendTurnRequest(Int32, Int32, Action, Action) Main function to send turn. Takes the index card and send a petition to the server to register this turn in the database. the server process it and then with the server response we continue to the WaitOponentTurn() method in order to wait for the other player to also send a turn Declaration public void SendTurnRequest(int cardId, int timesTryingToSendTurn = 0, Action Callback = null, Action BadCallback = null) Parameters Type Name Description Int32 cardId The id of card that you need to send i.e(0,1,2,3...) Int32 timesTryingToSendTurn Times trying to send a turn, more than 5 is consider a player disconnect Action Callback Action BadCallback SetForbiddenActions(ActionCard) Declaration public void SetForbiddenActions(ActionCard actionCard) Parameters Type Name Description ActionCard actionCard TestSendTurn() For testing only, this method will send an automatic turn to a bot player in the server. Declaration public void TestSendTurn() WaitForSeconds(Single, Action) Wait for X seconds before executing some logic Declaration public IEnumerator WaitForSeconds(float time, Action callback) Parameters Type Name Description Single time Time before executing logic Action callback Logic to execute Returns Type Description IEnumerator WaitForSecondsAndDoActionEachSecond(Int32, Int32, Action, Action) Wait for X seconds before executing some logic Declaration public IEnumerator WaitForSecondsAndDoActionEachSecond(int time, int xSeconds, Action eachXSecondsCallback, Action callback) Parameters Type Name Description Int32 time Time before executing logic Int32 xSeconds Action eachXSecondsCallback Action callback Logic to execute Returns Type Description IEnumerator WaitOponentTurn() Bring data and actions from the server and execute them. Checks altered states, terrains and players actions and delegate all of those to be executed in order. It also checks if the match has already ended on the server in orded to force the ending in the client too. Declaration public IEnumerator WaitOponentTurn() Returns Type Description IEnumerator"
  },
  "api/Timba.SacredTails.Arena.UserInfo.html": {
    "href": "api/Timba.SacredTails.Arena.UserInfo.html",
    "title": "Class UserInfo | Example Unity documentation",
    "keywords": "Class UserInfo Inheritance Object UserInfo Namespace : Timba.SacredTails.Arena Assembly : cs.temp.dll.dll Syntax public class UserInfo Fields battleShinseis Declaration public List<Shinsei> battleShinseis Field Value Type Description List < Shinsei > currentShinseiIndex Declaration public int currentShinseiIndex Field Value Type Description Int32 energybars Declaration public List<ResourceBarValues> energybars Field Value Type Description List < ResourceBarValues > healthbars Declaration public List<ResourceBarValues> healthbars Field Value Type Description List < ResourceBarValues > isLocalPlayer Declaration public bool isLocalPlayer Field Value Type Description Boolean spawnedShinsei Declaration public CharacterSlot spawnedShinsei Field Value Type Description CharacterSlot turnActions Declaration public List<BattleActionsBase> turnActions Field Value Type Description List < BattleActionsBase > userIndex Declaration public int userIndex Field Value Type Description Int32"
  },
  "api/Timba.SacredTails.Arena.VfxInfo.html": {
    "href": "api/Timba.SacredTails.Arena.VfxInfo.html",
    "title": "Class VfxInfo | Example Unity documentation",
    "keywords": "Class VfxInfo Inheritance Object VfxInfo Namespace : Timba.SacredTails.Arena Assembly : cs.temp.dll.dll Syntax public class VfxInfo : MonoBehaviour Fields isVfxReversed Declaration public bool isVfxReversed Field Value Type Description Boolean vfxBeforeHit Declaration public float vfxBeforeHit Field Value Type Description Single vfxDuration Declaration public float vfxDuration Field Value Type Description Single"
  },
  "api/Timba.SacredTails.AudioIntegration.AudioSettings.html": {
    "href": "api/Timba.SacredTails.AudioIntegration.AudioSettings.html",
    "title": "Class AudioSettings | Example Unity documentation",
    "keywords": "Class AudioSettings Inheritance Object AudioSettings Namespace : Timba.SacredTails.AudioIntegration Assembly : cs.temp.dll.dll Syntax public class AudioSettings : MonoBehaviour Fields AmbienceVolume Declaration public AK.Wwise.RTPC AmbienceVolume Field Value Type Description AK.Wwise.RTPC MasterSlider Declaration public Slider MasterSlider Field Value Type Description Slider MusicSlider Declaration public Slider MusicSlider Field Value Type Description Slider MusicVolume Declaration public AK.Wwise.RTPC MusicVolume Field Value Type Description AK.Wwise.RTPC SFXSlider Declaration public Slider SFXSlider Field Value Type Description Slider SFXVolume Declaration public AK.Wwise.RTPC SFXVolume Field Value Type Description AK.Wwise.RTPC Methods CustomStart() Declaration public void CustomStart() SetMasterValue(Single) Declaration public void SetMasterValue(float value) Parameters Type Name Description Single value SetMusicValue(Single) Declaration public void SetMusicValue(float value) Parameters Type Name Description Single value SetSFXValue(Single) Declaration public void SetSFXValue(float value) Parameters Type Name Description Single value"
  },
  "api/Timba.SacredTails.AudioIntegration.CallStart.html": {
    "href": "api/Timba.SacredTails.AudioIntegration.CallStart.html",
    "title": "Class CallStart | Example Unity documentation",
    "keywords": "Class CallStart Inheritance Object CallStart Namespace : Timba.SacredTails.AudioIntegration Assembly : cs.temp.dll.dll Syntax public class CallStart : MonoBehaviour"
  },
  "api/Timba.SacredTails.AudioIntegration.html": {
    "href": "api/Timba.SacredTails.AudioIntegration.html",
    "title": "Namespace Timba.SacredTails.AudioIntegration | Example Unity documentation",
    "keywords": "Namespace Timba.SacredTails.AudioIntegration Classes AudioSettings CallStart SimpleAudioBtn This component add a callback to component attached button to play a WWise event SimpleAudioCallback This component call an WWise event SimpleAudioToggle UI Element that allow enable or disable audio in the game SimpleButtonSound Add callback to event OnClick of attached button using Unity Audio System SimpleCustomAudio Play simple custom audio WWiseSacred"
  },
  "api/Timba.SacredTails.AudioIntegration.SimpleAudioBtn.html": {
    "href": "api/Timba.SacredTails.AudioIntegration.SimpleAudioBtn.html",
    "title": "Class SimpleAudioBtn | Example Unity documentation",
    "keywords": "Class SimpleAudioBtn This component add a callback to component attached button to play a WWise event Inheritance Object SimpleAudioBtn Namespace : Timba.SacredTails.AudioIntegration Assembly : cs.temp.dll.dll Syntax public class SimpleAudioBtn : MonoBehaviour Fields eventName Declaration public string eventName Field Value Type Description String"
  },
  "api/Timba.SacredTails.AudioIntegration.SimpleAudioCallback.html": {
    "href": "api/Timba.SacredTails.AudioIntegration.SimpleAudioCallback.html",
    "title": "Class SimpleAudioCallback | Example Unity documentation",
    "keywords": "Class SimpleAudioCallback This component call an WWise event Inheritance Object SimpleAudioCallback Namespace : Timba.SacredTails.AudioIntegration Assembly : cs.temp.dll.dll Syntax public class SimpleAudioCallback : MonoBehaviour Fields eventName Declaration public string eventName Field Value Type Description String Methods PlayAudio() Declaration public void PlayAudio()"
  },
  "api/Timba.SacredTails.AudioIntegration.SimpleAudioToggle.html": {
    "href": "api/Timba.SacredTails.AudioIntegration.SimpleAudioToggle.html",
    "title": "Class SimpleAudioToggle | Example Unity documentation",
    "keywords": "Class SimpleAudioToggle UI Element that allow enable or disable audio in the game Inheritance Object SimpleAudioToggle Namespace : Timba.SacredTails.AudioIntegration Assembly : cs.temp.dll.dll Syntax public class SimpleAudioToggle : MonoBehaviour Fields eventName Declaration public string eventName Field Value Type Description String"
  },
  "api/Timba.SacredTails.AudioIntegration.SimpleButtonSound.html": {
    "href": "api/Timba.SacredTails.AudioIntegration.SimpleButtonSound.html",
    "title": "Class SimpleButtonSound | Example Unity documentation",
    "keywords": "Class SimpleButtonSound Add callback to event OnClick of attached button using Unity Audio System Inheritance Object SimpleButtonSound Namespace : Timba.SacredTails.AudioIntegration Assembly : cs.temp.dll.dll Syntax public class SimpleButtonSound : MonoBehaviour"
  },
  "api/Timba.SacredTails.AudioIntegration.SimpleCustomAudio.html": {
    "href": "api/Timba.SacredTails.AudioIntegration.SimpleCustomAudio.html",
    "title": "Class SimpleCustomAudio | Example Unity documentation",
    "keywords": "Class SimpleCustomAudio Play simple custom audio Inheritance Object SimpleCustomAudio Namespace : Timba.SacredTails.AudioIntegration Assembly : cs.temp.dll.dll Syntax public class SimpleCustomAudio : MonoBehaviour Fields eventName Declaration public string eventName Field Value Type Description String Methods Play() Declaration public void Play()"
  },
  "api/Timba.SacredTails.AudioIntegration.WWiseSacred.html": {
    "href": "api/Timba.SacredTails.AudioIntegration.WWiseSacred.html",
    "title": "Class WWiseSacred | Example Unity documentation",
    "keywords": "Class WWiseSacred Inheritance Object WWiseSacred Namespace : Timba.SacredTails.AudioIntegration Assembly : cs.temp.dll.dll Syntax public class WWiseSacred : MonoBehaviour Methods PTEvent(String) Declaration public void PTEvent(string eventName) Parameters Type Name Description String eventName"
  },
  "api/Timba.SacredTails.BattleDebugTool.ChangeCardsTest.html": {
    "href": "api/Timba.SacredTails.BattleDebugTool.ChangeCardsTest.html",
    "title": "Class ChangeCardsTest | Example Unity documentation",
    "keywords": "Class ChangeCardsTest Inheritance Object ChangeCardsTest Namespace : Timba.SacredTails.BattleDebugTool Assembly : cs.temp.dll.dll Syntax public class ChangeCardsTest : MonoBehaviour Fields playerDataManager Declaration public PlayerDataManager playerDataManager Field Value Type Description PlayerDataManager Methods ChangeTestCard0(String) Declaration public void ChangeTestCard0(string newIndex) Parameters Type Name Description String newIndex ChangeTestCard1(String) Declaration public void ChangeTestCard1(string newIndex) Parameters Type Name Description String newIndex ChangeTestCard2(String) Declaration public void ChangeTestCard2(string newIndex) Parameters Type Name Description String newIndex ChangeTestCard3(String) Declaration public void ChangeTestCard3(string newIndex) Parameters Type Name Description String newIndex"
  },
  "api/Timba.SacredTails.BattleDebugTool.DebugShinseiSlot.html": {
    "href": "api/Timba.SacredTails.BattleDebugTool.DebugShinseiSlot.html",
    "title": "Class DebugShinseiSlot | Example Unity documentation",
    "keywords": "Class DebugShinseiSlot Show all necesary information for debug battle comparing data from local, and server allow to find errors in code Inheritance Object DebugShinseiSlot Namespace : Timba.SacredTails.BattleDebugTool Assembly : cs.temp.dll.dll Syntax public class DebugShinseiSlot : MonoBehaviour Fields selectedImage Declaration public Image selectedImage Field Value Type Description Image Methods ShowValues(ShinseiStats, Shinsei, Shinsei) Declaration public void ShowValues(ShinseiStats originalStats, Shinsei targetShinsei, Shinsei localShinsei) Parameters Type Name Description ShinseiStats originalStats Shinsei targetShinsei Shinsei localShinsei"
  },
  "api/Timba.SacredTails.BattleDebugTool.GetShareGroupData.CombatPlayerServer.html": {
    "href": "api/Timba.SacredTails.BattleDebugTool.GetShareGroupData.CombatPlayerServer.html",
    "title": "Class GetShareGroupData.CombatPlayerServer | Example Unity documentation",
    "keywords": "Class GetShareGroupData.CombatPlayerServer Inheritance Object GetShareGroupData.CombatPlayerServer Namespace : Timba.SacredTails.BattleDebugTool Assembly : cs.temp.dll.dll Syntax [Serializable] public class CombatPlayerServer Fields confirmState Declaration public bool confirmState Field Value Type Description Boolean currentShinsei Declaration public int currentShinsei Field Value Type Description Int32 DisplayName Declaration public string DisplayName Field Value Type Description String forbidenActions Declaration public Dictionary<int, int> forbidenActions Field Value Type Description Dictionary < Int32 , Int32 > hasSurrender Declaration public bool hasSurrender Field Value Type Description Boolean playfabId Declaration public string playfabId Field Value Type Description String ShinseiParty Declaration public List<Shinsei> ShinseiParty Field Value Type Description List < Shinsei > shinseisSelected Declaration public bool shinseisSelected Field Value Type Description Boolean strikes Declaration public int strikes Field Value Type Description Int32"
  },
  "api/Timba.SacredTails.BattleDebugTool.GetShareGroupData.html": {
    "href": "api/Timba.SacredTails.BattleDebugTool.GetShareGroupData.html",
    "title": "Class GetShareGroupData | Example Unity documentation",
    "keywords": "Class GetShareGroupData Download to client all data from the server for debugging Inheritance Object GetShareGroupData Namespace : Timba.SacredTails.BattleDebugTool Assembly : cs.temp.dll.dll Syntax public class GetShareGroupData : MonoBehaviour Fields matchId Declaration public string matchId Field Value Type Description String Methods GetServerMatchData(String, String) Declaration public void GetServerMatchData(string matchId, string ownPlayfabId) Parameters Type Name Description String matchId String ownPlayfabId"
  },
  "api/Timba.SacredTails.BattleDebugTool.html": {
    "href": "api/Timba.SacredTails.BattleDebugTool.html",
    "title": "Namespace Timba.SacredTails.BattleDebugTool | Example Unity documentation",
    "keywords": "Namespace Timba.SacredTails.BattleDebugTool Classes ChangeCardsTest DebugShinseiSlot Show all necesary information for debug battle comparing data from local, and server allow to find errors in code GetShareGroupData Download to client all data from the server for debugging GetShareGroupData.CombatPlayerServer"
  },
  "api/Timba.SacredTails.CameraModule.CameraTriggerChange.html": {
    "href": "api/Timba.SacredTails.CameraModule.CameraTriggerChange.html",
    "title": "Class CameraTriggerChange | Example Unity documentation",
    "keywords": "Class CameraTriggerChange Inheritance Object CameraTriggerChange Namespace : Timba.SacredTails.CameraModule Assembly : cs.temp.dll.dll Syntax public class CameraTriggerChange : MonoBehaviour Fields lobbyCamera Declaration public CinemachineVirtualCamera lobbyCamera Field Value Type Description CinemachineVirtualCamera treeCamera Declaration public CinemachineVirtualCamera treeCamera Field Value Type Description CinemachineVirtualCamera Methods OnTriggerEnter(Collider) Declaration public void OnTriggerEnter(Collider other) Parameters Type Name Description Collider other OnTriggerExit(Collider) Declaration public void OnTriggerExit(Collider other) Parameters Type Name Description Collider other"
  },
  "api/Timba.SacredTails.CameraModule.html": {
    "href": "api/Timba.SacredTails.CameraModule.html",
    "title": "Namespace Timba.SacredTails.CameraModule | Example Unity documentation",
    "keywords": "Namespace Timba.SacredTails.CameraModule Classes CameraTriggerChange ViewerCameraChange"
  },
  "api/Timba.SacredTails.CameraModule.ViewerCameraChange.html": {
    "href": "api/Timba.SacredTails.CameraModule.ViewerCameraChange.html",
    "title": "Class ViewerCameraChange | Example Unity documentation",
    "keywords": "Class ViewerCameraChange Inheritance Object ViewerCameraChange Namespace : Timba.SacredTails.CameraModule Assembly : cs.temp.dll.dll Syntax public class ViewerCameraChange : MonoBehaviour Fields lobbyCamera Declaration public CinemachineVirtualCamera lobbyCamera Field Value Type Description CinemachineVirtualCamera viewerCamera Declaration public CinemachineVirtualCamera viewerCamera Field Value Type Description CinemachineVirtualCamera Methods ChangeCamera() Declaration public void ChangeCamera()"
  },
  "api/Timba.SacredTails.CardStoreModule.Card.html": {
    "href": "api/Timba.SacredTails.CardStoreModule.Card.html",
    "title": "Class Card | Example Unity documentation",
    "keywords": "Class Card Inheritance Object Card Namespace : Timba.SacredTails.CardStoreModule Assembly : cs.temp.dll.dll Syntax [Serializable] public class Card Fields cardName Declaration public string cardName Field Value Type Description String count Declaration public int count Field Value Type Description Int32 index Declaration public int index Field Value Type Description Int32"
  },
  "api/Timba.SacredTails.CardStoreModule.CardManagementController.html": {
    "href": "api/Timba.SacredTails.CardStoreModule.CardManagementController.html",
    "title": "Class CardManagementController | Example Unity documentation",
    "keywords": "Class CardManagementController Inheritance Object CardManagementController Namespace : Timba.SacredTails.CardStoreModule Assembly : cs.temp.dll.dll Syntax public class CardManagementController : MonoBehaviour Fields backgroundTypeSwapper Declaration public BackgroundTypeSwapper backgroundTypeSwapper Field Value Type Description BackgroundTypeSwapper Methods AddCardInDeck(Int32) Declaration public void AddCardInDeck(int indexCardToAdd) Parameters Type Name Description Int32 indexCardToAdd AddSelectedCard(Int32) Declaration public void AddSelectedCard(int index) Parameters Type Name Description Int32 index ChangeTargetShinseiCard(Int32) Declaration public void ChangeTargetShinseiCard(int index) Parameters Type Name Description Int32 index DeselectTargetCard() Declaration public void DeselectTargetCard() InitCardManager() Declaration public void InitCardManager() RemoveCardInDeck(Int32) Declaration public void RemoveCardInDeck(int indexCardToAdd) Parameters Type Name Description Int32 indexCardToAdd RemoveSelectedCard(Int32) Declaration public void RemoveSelectedCard(int index) Parameters Type Name Description Int32 index SelectTargetCard(Int32) Declaration public void SelectTargetCard(int index) Parameters Type Name Description Int32 index SetCurrentChangeShinsei(Int32) Declaration public void SetCurrentChangeShinsei(int index) Parameters Type Name Description Int32 index UpdateDetailViewVisual() Declaration public void UpdateDetailViewVisual()"
  },
  "api/Timba.SacredTails.CardStoreModule.CardView.html": {
    "href": "api/Timba.SacredTails.CardStoreModule.CardView.html",
    "title": "Class CardView | Example Unity documentation",
    "keywords": "Class CardView Inheritance Object CardView Implements IPointerClickHandler Namespace : Timba.SacredTails.CardStoreModule Assembly : cs.temp.dll.dll Syntax public class CardView : MonoBehaviour Fields OnClickHandler Declaration public Action<int, CardView> OnClickHandler Field Value Type Description Action < Int32 , CardView > Properties ActionCard Declaration public ActionCard ActionCard { get; set; } Property Value Type Description ActionCard Methods OnPointerClick(PointerEventData) Declaration public void OnPointerClick(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData UpdateNumber(Int32, Int32) Declaration public void UpdateNumber(int number, int indexCard) Parameters Type Name Description Int32 number Int32 indexCard Implements IPointerClickHandler"
  },
  "api/Timba.SacredTails.CardStoreModule.Deck.html": {
    "href": "api/Timba.SacredTails.CardStoreModule.Deck.html",
    "title": "Class Deck | Example Unity documentation",
    "keywords": "Class Deck Inheritance Object Deck Namespace : Timba.SacredTails.CardStoreModule Assembly : cs.temp.dll.dll Syntax [Serializable] public class Deck Fields cards Declaration public List<Card> cards Field Value Type Description List < Card >"
  },
  "api/Timba.SacredTails.CardStoreModule.html": {
    "href": "api/Timba.SacredTails.CardStoreModule.html",
    "title": "Namespace Timba.SacredTails.CardStoreModule | Example Unity documentation",
    "keywords": "Namespace Timba.SacredTails.CardStoreModule Classes Card CardManagementController CardView Deck"
  },
  "api/Timba.SacredTails.CharacterStyle.BakeColorsInCharacter.html": {
    "href": "api/Timba.SacredTails.CharacterStyle.BakeColorsInCharacter.html",
    "title": "Class BakeColorsInCharacter | Example Unity documentation",
    "keywords": "Class BakeColorsInCharacter This component allow you to define the color of the NPC in the game Inheritance Object BakeColorsInCharacter Namespace : Timba.SacredTails.CharacterStyle Assembly : cs.temp.dll.dll Syntax public class BakeColorsInCharacter : MonoBehaviour Fields bodyStyle Declaration public BodyStyle bodyStyle Field Value Type Description BodyStyle characterRecolor Declaration public CharacterRecolor characterRecolor Field Value Type Description CharacterRecolor Details Declaration public Color Details Field Value Type Description Color Hair Declaration public Color Hair Field Value Type Description Color HairStyle Declaration public int HairStyle Field Value Type Description Int32 materialReskins Declaration public List<MaterialReskin> materialReskins Field Value Type Description List < MaterialReskin > Primary Declaration public Color Primary Field Value Type Description Color Secondary Declaration public Color Secondary Field Value Type Description Color Skin Declaration public Color Skin Field Value Type Description Color Methods UpdateVisual() Declaration public void UpdateVisual()"
  },
  "api/Timba.SacredTails.CharacterStyle.CharacterRecolor.html": {
    "href": "api/Timba.SacredTails.CharacterStyle.CharacterRecolor.html",
    "title": "Class CharacterRecolor | Example Unity documentation",
    "keywords": "Class CharacterRecolor This component controls the recolor of a character Inheritance Object CharacterRecolor Namespace : Timba.SacredTails.CharacterStyle Assembly : cs.temp.dll.dll Syntax public class CharacterRecolor : MonoBehaviour Methods ChangeMaterialColors(PartsOfCharacter, Color) Declaration public void ChangeMaterialColors(PartsOfCharacter part, Color color) Parameters Type Name Description PartsOfCharacter part Color color Init(Material) Declaration public void Init(Material target) Parameters Type Name Description Material target"
  },
  "api/Timba.SacredTails.CharacterStyle.CharacterStyleButton.html": {
    "href": "api/Timba.SacredTails.CharacterStyle.CharacterStyleButton.html",
    "title": "Class CharacterStyleButton | Example Unity documentation",
    "keywords": "Class CharacterStyleButton UI element that represents a part of character for edition Inheritance Object CharacterStyleButton Namespace : Timba.SacredTails.CharacterStyle Assembly : cs.temp.dll.dll Syntax public class CharacterStyleButton : MonoBehaviour Methods UpdateBtn(Int32, Boolean) Declaration public void UpdateBtn(int index, bool enable) Parameters Type Name Description Int32 index Boolean enable"
  },
  "api/Timba.SacredTails.CharacterStyle.CharacterStyleController.html": {
    "href": "api/Timba.SacredTails.CharacterStyle.CharacterStyleController.html",
    "title": "Class CharacterStyleController | Example Unity documentation",
    "keywords": "Class CharacterStyleController Behavior of panel Character Style Controller Inheritance Object CharacterStyleController Namespace : Timba.SacredTails.CharacterStyle Assembly : cs.temp.dll.dll Syntax public class CharacterStyleController : MonoBehaviour Fields cameraBackgroundColor Declaration public Color cameraBackgroundColor Field Value Type Description Color characterRecolor Declaration public CharacterRecolor characterRecolor Field Value Type Description CharacterRecolor colorRowPrefab Declaration public Transform colorRowPrefab Field Value Type Description Transform colorRowsParent Declaration public Transform colorRowsParent Field Value Type Description Transform colorSlotEmptyPrefab Declaration public Transform colorSlotEmptyPrefab Field Value Type Description Transform colorSlotLockedPrefab Declaration public Transform colorSlotLockedPrefab Field Value Type Description Transform colorSlotUnlockedPrefab Declaration public Transform colorSlotUnlockedPrefab Field Value Type Description Transform layerMaskForStyle Declaration public LayerMask layerMaskForStyle Field Value Type Description LayerMask lobbyCamera Declaration public CinemachineVirtualCamera lobbyCamera Field Value Type Description CinemachineVirtualCamera numberOfColumnsPerRow Declaration public int numberOfColumnsPerRow Field Value Type Description Int32 partRowPrefab Declaration public Transform partRowPrefab Field Value Type Description Transform partRowsParent Declaration public Transform partRowsParent Field Value Type Description Transform partSlotLockedPrefab Declaration public Transform partSlotLockedPrefab Field Value Type Description Transform partSlotUnlockedPrefab Declaration public Transform partSlotUnlockedPrefab Field Value Type Description Transform playerMouseRotator Declaration public PlayerMouseRotator playerMouseRotator Field Value Type Description PlayerMouseRotator styleCamera Declaration public CinemachineVirtualCamera styleCamera Field Value Type Description CinemachineVirtualCamera styleDB Declaration public CharacterStyleDatabase styleDB Field Value Type Description CharacterStyleDatabase title Declaration public TMP_Text title Field Value Type Description TMP_Text Methods ApplyLastStyle() This download the character style data and apply to the model in the game Declaration public void ApplyLastStyle() Awake() Declaration public void Awake() ChangeHairBodyPart(Int32) Show a different part of hair in the model Declaration public void ChangeHairBodyPart(int targetPart) Parameters Type Name Description Int32 targetPart ChangeTitle(PartsOfCharacter) Declaration public string ChangeTitle(PartsOfCharacter part) Parameters Type Name Description PartsOfCharacter part Returns Type Description String GenerateRandomOutfit() This fill all necesary data for character style with random values Declaration public void GenerateRandomOutfit() Hide() Declaration public void Hide() Init() Declaration public void Init() OnSelectPart(Int32) Declaration public void OnSelectPart(int partSelected) Parameters Type Name Description Int32 partSelected PopulateSkinColors() Fill panel of color options using a scriptable object Declaration public void PopulateSkinColors() SelectPartNext(Boolean) Declaration public void SelectPartNext(bool left) Parameters Type Name Description Boolean left ShowCategory(PartsOfCharacter) Declaration public void ShowCategory(PartsOfCharacter part) Parameters Type Name Description PartsOfCharacter part UpdateCharacterStyle() Declaration public void UpdateCharacterStyle() UpdateColorPartOfCharacter(PartsOfCharacter, Color, Boolean) Declaration public static void UpdateColorPartOfCharacter(PartsOfCharacter part, Color color, bool isFill = true) Parameters Type Name Description PartsOfCharacter part Color color Boolean isFill UpdateGender() Toggle betwen male and female model Declaration public void UpdateGender() UpdatePartOfCharacter(PartsOfCharacter, Int32) Declaration public static void UpdatePartOfCharacter(PartsOfCharacter part, int partIndex) Parameters Type Name Description PartsOfCharacter part Int32 partIndex"
  },
  "api/Timba.SacredTails.CharacterStyle.CharacterStyleDatabase.html": {
    "href": "api/Timba.SacredTails.CharacterStyle.CharacterStyleDatabase.html",
    "title": "Class CharacterStyleDatabase | Example Unity documentation",
    "keywords": "Class CharacterStyleDatabase Inheritance Object CharacterStyleDatabase Namespace : Timba.SacredTails.CharacterStyle Assembly : cs.temp.dll.dll Syntax [Serializable] public class CharacterStyleDatabase : ScriptableObject Fields colorDB Declaration public List<ColorIdRelation> colorDB Field Value Type Description List < ColorIdRelation > partDB Declaration public List<PartIdRelation> partDB Field Value Type Description List < PartIdRelation > Methods GetColorById(Int32, PartsOfCharacter) Declaration public ColorIdRelation GetColorById(int id, PartsOfCharacter slotType) Parameters Type Name Description Int32 id PartsOfCharacter slotType Returns Type Description ColorIdRelation GetColorsByPartType(PartsOfCharacter) Declaration public List<ColorIdRelation> GetColorsByPartType(PartsOfCharacter slotType) Parameters Type Name Description PartsOfCharacter slotType Returns Type Description List < ColorIdRelation > GetPartById(Int32, PartsOfCharacter) Declaration public PartIdRelation GetPartById(int id, PartsOfCharacter slotType) Parameters Type Name Description Int32 id PartsOfCharacter slotType Returns Type Description PartIdRelation GetPartsByType(PartsOfCharacter) Declaration public List<PartIdRelation> GetPartsByType(PartsOfCharacter slotType) Parameters Type Name Description PartsOfCharacter slotType Returns Type Description List < PartIdRelation > OnValidate() Declaration public void OnValidate()"
  },
  "api/Timba.SacredTails.CharacterStyle.html": {
    "href": "api/Timba.SacredTails.CharacterStyle.html",
    "title": "Namespace Timba.SacredTails.CharacterStyle | Example Unity documentation",
    "keywords": "Namespace Timba.SacredTails.CharacterStyle Classes BakeColorsInCharacter This component allow you to define the color of the NPC in the game CharacterRecolor This component controls the recolor of a character CharacterStyleButton UI element that represents a part of character for edition CharacterStyleController Behavior of panel Character Style Controller CharacterStyleDatabase PlayerMouseRotator Allow player rotate character when is on Character Style Panel Enums PartsOfCharacter"
  },
  "api/Timba.SacredTails.CharacterStyle.PartsOfCharacter.html": {
    "href": "api/Timba.SacredTails.CharacterStyle.PartsOfCharacter.html",
    "title": "Enum PartsOfCharacter | Example Unity documentation",
    "keywords": "Enum PartsOfCharacter Namespace : Timba.SacredTails.CharacterStyle Assembly : cs.temp.dll.dll Syntax public enum PartsOfCharacter Fields Name Description COLORS DETAILS HAIR HANDS LEGS PRIMARY_COLOR SECONDARY_COLOR SKIN"
  },
  "api/Timba.SacredTails.CharacterStyle.PlayerMouseRotator.html": {
    "href": "api/Timba.SacredTails.CharacterStyle.PlayerMouseRotator.html",
    "title": "Class PlayerMouseRotator | Example Unity documentation",
    "keywords": "Class PlayerMouseRotator Allow player rotate character when is on Character Style Panel Inheritance Object PlayerMouseRotator Namespace : Timba.SacredTails.CharacterStyle Assembly : cs.temp.dll.dll Syntax public class PlayerMouseRotator : MonoBehaviour Fields canRotateWithMouse Declaration public bool canRotateWithMouse Field Value Type Description Boolean isClickingOnArea Declaration public bool isClickingOnArea Field Value Type Description Boolean rotationTarget Declaration public Transform rotationTarget Field Value Type Description Transform Methods IsClickingOnArea(Boolean) Declaration public void IsClickingOnArea(bool isClicking) Parameters Type Name Description Boolean isClicking"
  },
  "api/Timba.SacredTails.ChatModule.ChatEmojis.DiccionaryOfEmojis.html": {
    "href": "api/Timba.SacredTails.ChatModule.ChatEmojis.DiccionaryOfEmojis.html",
    "title": "Class ChatEmojis.DiccionaryOfEmojis | Example Unity documentation",
    "keywords": "Class ChatEmojis.DiccionaryOfEmojis Inheritance Object ChatEmojis.DiccionaryOfEmojis Namespace : Timba.SacredTails.ChatModule Assembly : cs.temp.dll.dll Syntax [Serializable] public class DiccionaryOfEmojis Fields keys Declaration public List<string> keys Field Value Type Description List < String > RealValues Declaration public List<string> RealValues Field Value Type Description List < String > visual Declaration public List<Sprite> visual Field Value Type Description List < Sprite > Methods GetByKey(String) Declaration public string GetByKey(string key) Parameters Type Name Description String key Returns Type Description String"
  },
  "api/Timba.SacredTails.ChatModule.ChatEmojis.html": {
    "href": "api/Timba.SacredTails.ChatModule.ChatEmojis.html",
    "title": "Class ChatEmojis | Example Unity documentation",
    "keywords": "Class ChatEmojis Inheritance Object ChatEmojis Namespace : Timba.SacredTails.ChatModule Assembly : cs.temp.dll.dll Syntax public class ChatEmojis : MonoBehaviour Fields chatTextBox Declaration public ChatTextBox chatTextBox Field Value Type Description ChatTextBox diccionaryOfEmojis Declaration public ChatEmojis.DiccionaryOfEmojis diccionaryOfEmojis Field Value Type Description ChatEmojis.DiccionaryOfEmojis inputField Declaration public TMP_InputField inputField Field Value Type Description TMP_InputField pendingCarets Declaration public int pendingCarets Field Value Type Description Int32 Methods OnChangeValue(String) Declaration public void OnChangeValue(string msg) Parameters Type Name Description String msg Update() Declaration public void Update()"
  },
  "api/Timba.SacredTails.ChatModule.EmojiButton.html": {
    "href": "api/Timba.SacredTails.ChatModule.EmojiButton.html",
    "title": "Class EmojiButton | Example Unity documentation",
    "keywords": "Class EmojiButton Inheritance Object EmojiButton Namespace : Timba.SacredTails.ChatModule Assembly : cs.temp.dll.dll Syntax public class EmojiButton : MonoBehaviour Fields button Declaration public Button button Field Value Type Description Button codeValue Declaration public string codeValue Field Value Type Description String icon Declaration public Image icon Field Value Type Description Image realValue Declaration public string realValue Field Value Type Description String"
  },
  "api/Timba.SacredTails.ChatModule.FilterController.html": {
    "href": "api/Timba.SacredTails.ChatModule.FilterController.html",
    "title": "Class FilterController | Example Unity documentation",
    "keywords": "Class FilterController Inheritance Object FilterController Namespace : Timba.SacredTails.ChatModule Assembly : cs.temp.dll.dll Syntax public class FilterController : MonoBehaviour Fields chatTextBox Declaration public ChatTextBox chatTextBox Field Value Type Description ChatTextBox toggles Declaration public List<Toggle> toggles Field Value Type Description List < Toggle > Methods CallApplyFilters() Declaration public void CallApplyFilters() ChangeAllMinusLast(Boolean) Declaration public void ChangeAllMinusLast(bool state) Parameters Type Name Description Boolean state IfAllEnable() Declaration public void IfAllEnable() IfAnyDisable() Declaration public void IfAnyDisable()"
  },
  "api/Timba.SacredTails.ChatModule.html": {
    "href": "api/Timba.SacredTails.ChatModule.html",
    "title": "Namespace Timba.SacredTails.ChatModule | Example Unity documentation",
    "keywords": "Namespace Timba.SacredTails.ChatModule Classes ChatEmojis ChatEmojis.DiccionaryOfEmojis EmojiButton FilterController"
  },
  "api/Timba.SacredTails.Database.AuthController.html": {
    "href": "api/Timba.SacredTails.Database.AuthController.html",
    "title": "Class AuthController | Example Unity documentation",
    "keywords": "Class AuthController Inheritance Object AuthController Namespace : Timba.SacredTails.Database Assembly : cs.temp.dll.dll Syntax public class AuthController : MonoBehaviour Fields ipField Declaration public TMP_InputField ipField Field Value Type Description TMP_InputField tournamentCreationLogin Declaration public bool tournamentCreationLogin Field Value Type Description Boolean transport Declaration public UnityTransport transport Field Value Type Description UnityTransport Methods EventsListenging() Declaration public void EventsListenging() LoadCachedData() Declaration public void LoadCachedData() Login() Declaration public void Login() OpenForgotPasswordPanel(Boolean) Declaration public void OpenForgotPasswordPanel(bool isLogin) Parameters Type Name Description Boolean isLogin OpenPanel(Boolean) Declaration public void OpenPanel(bool isLogin) Parameters Type Name Description Boolean isLogin SendPasswordEmail() Declaration public void SendPasswordEmail() SetIP() Declaration public void SetIP() SetLoginInfo(String, String, Int32) Declaration public void SetLoginInfo(string userEmail, string password, int lobby = 0) Parameters Type Name Description String userEmail String password Int32 lobby SignUp() Declaration public void SignUp()"
  },
  "api/Timba.SacredTails.Database.DatabaseConnection.html": {
    "href": "api/Timba.SacredTails.Database.DatabaseConnection.html",
    "title": "Class DatabaseConnection | Example Unity documentation",
    "keywords": "Class DatabaseConnection Inheritance Object DatabaseConnection Implements IDatabase IService Namespace : Timba.SacredTails.Database Assembly : cs.temp.dll.dll Syntax public class DatabaseConnection : MonoBehaviour, IDatabase Methods CardDatabaseCount() Declaration public int CardDatabaseCount() Returns Type Description Int32 CheckTicketStatus(CreateMatchmakingTicketResult, String) Declaration public async void CheckTicketStatus(CreateMatchmakingTicketResult ticket, string gamemodeQueue) Parameters Type Name Description CreateMatchmakingTicketResult ticket String gamemodeQueue GetActionCardByIndex(Int32) Declaration public ActionCard GetActionCardByIndex(int index) Parameters Type Name Description Int32 index Returns Type Description ActionCard GetDatabaseCardsIndexListByType(List<String>) Declaration public List<int> GetDatabaseCardsIndexListByType(List<string> partTypes) Parameters Type Name Description List < String > partTypes Returns Type Description List < Int32 > GetRandomShinsei() Declaration public string GetRandomShinsei() Returns Type Description String GetSetName(String, String) Declaration public string GetSetName(string partRarity, string partType) Parameters Type Name Description String partRarity String partType Returns Type Description String GetShinseiPartsTypes(String, Enum) Declaration public Dictionary<string, string> GetShinseiPartsTypes(string shinseiDna, Enum genericEnum) Parameters Type Name Description String shinseiDna Enum genericEnum Returns Type Description Dictionary < String , String > GetShinseiStats(String) Declaration public ShinseiStats GetShinseiStats(string shinseiDna) Parameters Type Name Description String shinseiDna Returns Type Description ShinseiStats GetShinseiStructure(String) Declaration public string GetShinseiStructure(string dna) Parameters Type Name Description String dna Returns Type Description String IsReady() Declaration public bool IsReady() Returns Type Description Boolean ObtainShinseiRarity(String) Declaration public RarityType ObtainShinseiRarity(string dna) Parameters Type Name Description String dna Returns Type Description RarityType ObtainShinseiType(String) Declaration public CharacterType ObtainShinseiType(string dna) Parameters Type Name Description String dna Returns Type Description CharacterType StartMatchmakingSequence(Int32, String) starts the matchmaking sequence under the specified queue Declaration public void StartMatchmakingSequence(int skillLevel, string gamemodeQueue) Parameters Type Name Description Int32 skillLevel String gamemodeQueue Implements IDatabase IService"
  },
  "api/Timba.SacredTails.Database.html": {
    "href": "api/Timba.SacredTails.Database.html",
    "title": "Namespace Timba.SacredTails.Database | Example Unity documentation",
    "keywords": "Namespace Timba.SacredTails.Database Classes AuthController DatabaseConnection Interfaces IDatabase"
  },
  "api/Timba.SacredTails.Database.IDatabase.html": {
    "href": "api/Timba.SacredTails.Database.IDatabase.html",
    "title": "Interface IDatabase | Example Unity documentation",
    "keywords": "Interface IDatabase Namespace : Timba.SacredTails.Database Assembly : cs.temp.dll.dll Syntax public interface IDatabase Methods CardDatabaseCount() Declaration int CardDatabaseCount() Returns Type Description Int32 GetActionCardByIndex(Int32) Declaration ActionCard GetActionCardByIndex(int index) Parameters Type Name Description Int32 index Returns Type Description ActionCard GetDatabaseCardsIndexListByType(List<String>) Declaration List<int> GetDatabaseCardsIndexListByType(List<string> type) Parameters Type Name Description List < String > type Returns Type Description List < Int32 > GetRandomShinsei() Declaration string GetRandomShinsei() Returns Type Description String GetShinseiPartsTypes(String, Enum) Declaration Dictionary<string, string> GetShinseiPartsTypes(string shinseiDna, Enum genericEnum) Parameters Type Name Description String shinseiDna Enum genericEnum Returns Type Description Dictionary < String , String > GetShinseiStats(String) Declaration ShinseiStats GetShinseiStats(string shinseiDna) Parameters Type Name Description String shinseiDna Returns Type Description ShinseiStats GetShinseiStructure(String) Declaration string GetShinseiStructure(string dna) Parameters Type Name Description String dna Returns Type Description String ObtainShinseiRarity(String) Declaration RarityType ObtainShinseiRarity(string dna) Parameters Type Name Description String dna Returns Type Description RarityType ObtainShinseiType(String) Declaration CharacterType ObtainShinseiType(string dna) Parameters Type Name Description String dna Returns Type Description CharacterType StartMatchmakingSequence(Int32, String) Declaration void StartMatchmakingSequence(int skillLevel = 0, string gamemodeQueue = \"FriendlyMatch\") Parameters Type Name Description Int32 skillLevel String gamemodeQueue"
  },
  "api/Timba.SacredTails.DialogSystem.ActionNode.Connection.html": {
    "href": "api/Timba.SacredTails.DialogSystem.ActionNode.Connection.html",
    "title": "Struct ActionNode.Connection | Example Unity documentation",
    "keywords": "Struct ActionNode.Connection Namespace : Timba.SacredTails.DialogSystem Assembly : cs.temp.dll.dll Syntax public struct Connection"
  },
  "api/Timba.SacredTails.DialogSystem.ActionNode.html": {
    "href": "api/Timba.SacredTails.DialogSystem.ActionNode.html",
    "title": "Class ActionNode | Example Unity documentation",
    "keywords": "Class ActionNode Inheritance Object ActionNode Namespace : Timba.SacredTails.DialogSystem Assembly : cs.temp.dll.dll Syntax public class ActionNode : Node Fields callback Declaration public Action callback Field Value Type Description Action dialogText Declaration public string dialogText Field Value Type Description String input Declaration public ActionNode.Connection input Field Value Type Description ActionNode.Connection output Declaration public ActionNode.Connection output Field Value Type Description ActionNode.Connection"
  },
  "api/Timba.SacredTails.DialogSystem.AnswerField.html": {
    "href": "api/Timba.SacredTails.DialogSystem.AnswerField.html",
    "title": "Class AnswerField | Example Unity documentation",
    "keywords": "Class AnswerField Inheritance Object AnswerField Namespace : Timba.SacredTails.DialogSystem Assembly : cs.temp.dll.dll Syntax public class AnswerField : MonoBehaviour Methods SetButtonResponse(Int32, String, Conversation, Action, Action) Declaration public void SetButtonResponse(int index, string text, Conversation conversation, Action backButtonCallback = null, Action skipDialog = null) Parameters Type Name Description Int32 index String text Conversation conversation Action backButtonCallback Action skipDialog"
  },
  "api/Timba.SacredTails.DialogSystem.Conversation.html": {
    "href": "api/Timba.SacredTails.DialogSystem.Conversation.html",
    "title": "Class Conversation | Example Unity documentation",
    "keywords": "Class Conversation This class keep the logic of write dialogs in screen, received a dialog graph and play them Inheritance Object Conversation Namespace : Timba.SacredTails.DialogSystem Assembly : cs.temp.dll.dll Syntax public class Conversation Fields currentNode Declaration public DialogNode currentNode Field Value Type Description DialogNode dialogGraph Declaration public DialogGraph dialogGraph Field Value Type Description DialogGraph isPlayerReadText Declaration public bool isPlayerReadText Field Value Type Description Boolean isWaitingResponse Declaration public bool isWaitingResponse Field Value Type Description Boolean responseIndex Declaration public int responseIndex Field Value Type Description Int32 Methods ConversationRoutine(DialogUI, Action, Dialogable) Declaration public IEnumerator ConversationRoutine(DialogUI dialogUI, Action EndConversationCallback = null, Dialogable targetDialogable = null) Parameters Type Name Description DialogUI dialogUI Action EndConversationCallback Dialogable targetDialogable Returns Type Description IEnumerator Init(DialogUI, Action) Declaration public void Init(DialogUI dialogUI, Action EndConversationCallback) Parameters Type Name Description DialogUI dialogUI Action EndConversationCallback NotifyPlayerReadText() Declaration public void NotifyPlayerReadText() SendResponse(Int32) Declaration public void SendResponse(int index) Parameters Type Name Description Int32 index UpdateDialog(DialogNode, DialogUI, Action) Declaration public void UpdateDialog(DialogNode dialogNode, DialogUI dialogUI, Action EndConversationCallback) Parameters Type Name Description DialogNode dialogNode DialogUI dialogUI Action EndConversationCallback"
  },
  "api/Timba.SacredTails.DialogSystem.Dialogable.html": {
    "href": "api/Timba.SacredTails.DialogSystem.Dialogable.html",
    "title": "Class Dialogable | Example Unity documentation",
    "keywords": "Class Dialogable A component that allow start conversations Inheritance Object Dialogable Namespace : Timba.SacredTails.DialogSystem Assembly : cs.temp.dll.dll Syntax public class Dialogable : MonoBehaviour Fields CallbackEvents Events that can be triggered in conversations using a code character Declaration public List<UnityEvent> CallbackEvents Field Value Type Description List < UnityEvent > Remarks You can find a example of use of this in NPC5_Conversation_Out scriptable object at Assets - _SacredTails - Lobby - Scripts - DialogSystem - Conversations\\NPC5_Conversation_Out.asset. dialogUI Declaration public DialogUI dialogUI Field Value Type Description DialogUI isExecutingAnswerWithCallbackEvent Declaration public bool isExecutingAnswerWithCallbackEvent Field Value Type Description Boolean Methods EndConversation() Declaration public void EndConversation() EnteringAnotherPanel() Declaration public void EnteringAnotherPanel() StartConversation() This start a new conversation Declaration public void StartConversation()"
  },
  "api/Timba.SacredTails.DialogSystem.DialogGraph.html": {
    "href": "api/Timba.SacredTails.DialogSystem.DialogGraph.html",
    "title": "Class DialogGraph | Example Unity documentation",
    "keywords": "Class DialogGraph Inheritance Object DialogGraph Namespace : Timba.SacredTails.DialogSystem Assembly : cs.temp.dll.dll Syntax public class DialogGraph : NodeGraph"
  },
  "api/Timba.SacredTails.DialogSystem.DialogNode.Connection.html": {
    "href": "api/Timba.SacredTails.DialogSystem.DialogNode.Connection.html",
    "title": "Struct DialogNode.Connection | Example Unity documentation",
    "keywords": "Struct DialogNode.Connection Namespace : Timba.SacredTails.DialogSystem Assembly : cs.temp.dll.dll Syntax public struct Connection"
  },
  "api/Timba.SacredTails.DialogSystem.DialogNode.html": {
    "href": "api/Timba.SacredTails.DialogSystem.DialogNode.html",
    "title": "Class DialogNode | Example Unity documentation",
    "keywords": "Class DialogNode Inheritance Object DialogNode Namespace : Timba.SacredTails.DialogSystem Assembly : cs.temp.dll.dll Syntax public class DialogNode : Node Fields Answers Declaration public List<string> Answers Field Value Type Description List < String > dialogText Declaration public string dialogText Field Value Type Description String input Declaration public DialogNode.Connection input Field Value Type Description DialogNode.Connection output Declaration public DialogNode.Connection output Field Value Type Description DialogNode.Connection randomAnswer Declaration public bool randomAnswer Field Value Type Description Boolean sequentialAnswers Declaration public bool sequentialAnswers Field Value Type Description Boolean sequentialCurrentAnswerKey Declaration public string sequentialCurrentAnswerKey Field Value Type Description String"
  },
  "api/Timba.SacredTails.DialogSystem.DialogNodeEditor.html": {
    "href": "api/Timba.SacredTails.DialogSystem.DialogNodeEditor.html",
    "title": "Class DialogNodeEditor | Example Unity documentation",
    "keywords": "Class DialogNodeEditor Inheritance Object DialogNodeEditor Namespace : Timba.SacredTails.DialogSystem Assembly : cs.temp.dll.dll Syntax public class DialogNodeEditor : NodeEditor Fields ScrollPos Declaration public Vector2 ScrollPos Field Value Type Description Vector2 Methods OnBodyGUI() Declaration public override void OnBodyGUI()"
  },
  "api/Timba.SacredTails.DialogSystem.DialogUI.html": {
    "href": "api/Timba.SacredTails.DialogSystem.DialogUI.html",
    "title": "Class DialogUI | Example Unity documentation",
    "keywords": "Class DialogUI Draw necesary components to dialog system in player screen Inheritance Object DialogUI Namespace : Timba.SacredTails.DialogSystem Assembly : cs.temp.dll.dll Syntax public class DialogUI : MonoBehaviour Fields answerFields Declaration public List<AnswerField> answerFields Field Value Type Description List < AnswerField > Properties IsPlayerDialogate Declaration public bool IsPlayerDialogate { get; set; } Property Value Type Description Boolean Methods ShowResponses(List<String>, Conversation, Action) Declaration public void ShowResponses(List<string> responses, Conversation conversation, Action EndConversationCallback) Parameters Type Name Description List < String > responses Conversation conversation Action EndConversationCallback SkipDialog(Boolean) Declaration public void SkipDialog(bool forceSkip = false) Parameters Type Name Description Boolean forceSkip WriteText(String, Action, Boolean) Declaration public void WriteText(string dialogText, Action OnEndWrite = null, bool isTextWithAnswer = false) Parameters Type Name Description String dialogText Action OnEndWrite Boolean isTextWithAnswer"
  },
  "api/Timba.SacredTails.DialogSystem.html": {
    "href": "api/Timba.SacredTails.DialogSystem.html",
    "title": "Namespace Timba.SacredTails.DialogSystem | Example Unity documentation",
    "keywords": "Namespace Timba.SacredTails.DialogSystem Classes ActionNode AnswerField Conversation This class keep the logic of write dialogs in screen, received a dialog graph and play them Dialogable A component that allow start conversations DialogGraph DialogNode DialogNodeEditor DialogUI Draw necesary components to dialog system in player screen Structs ActionNode.Connection DialogNode.Connection"
  },
  "api/Timba.SacredTails.Interaction.html": {
    "href": "api/Timba.SacredTails.Interaction.html",
    "title": "Namespace Timba.SacredTails.Interaction | Example Unity documentation",
    "keywords": "Namespace Timba.SacredTails.Interaction Classes SittableMechanic Allow to player see their character sitdown in chairs on the bar"
  },
  "api/Timba.SacredTails.Interaction.SittableMechanic.html": {
    "href": "api/Timba.SacredTails.Interaction.SittableMechanic.html",
    "title": "Class SittableMechanic | Example Unity documentation",
    "keywords": "Class SittableMechanic Allow to player see their character sitdown in chairs on the bar Inheritance Object SittableMechanic Namespace : Timba.SacredTails.Interaction Assembly : cs.temp.dll.dll Syntax public class SittableMechanic : MonoBehaviour"
  },
  "api/Timba.SacredTails.Lobby.html": {
    "href": "api/Timba.SacredTails.Lobby.html",
    "title": "Namespace Timba.SacredTails.Lobby | Example Unity documentation",
    "keywords": "Namespace Timba.SacredTails.Lobby Classes PlayerCameraFollow ShinseiSpawner Spawns shinsei as network objects for the lobby scene"
  },
  "api/Timba.SacredTails.Lobby.PlayerCameraFollow.html": {
    "href": "api/Timba.SacredTails.Lobby.PlayerCameraFollow.html",
    "title": "Class PlayerCameraFollow | Example Unity documentation",
    "keywords": "Class PlayerCameraFollow Inheritance Object Utils.Singleton Utils.Singleton < PlayerCameraFollow > PlayerCameraFollow Namespace : Timba.SacredTails.Lobby Assembly : cs.temp.dll.dll Syntax public class PlayerCameraFollow : Singleton<PlayerCameraFollow> Fields virtualCam Declaration public List<CinemachineVirtualCamera> virtualCam Field Value Type Description List < CinemachineVirtualCamera > Methods FollowPlayer(Transform) Declaration public void FollowPlayer(Transform transform) Parameters Type Name Description Transform transform"
  },
  "api/Timba.SacredTails.Lobby.ShinseiSpawner.html": {
    "href": "api/Timba.SacredTails.Lobby.ShinseiSpawner.html",
    "title": "Class ShinseiSpawner | Example Unity documentation",
    "keywords": "Class ShinseiSpawner Spawns shinsei as network objects for the lobby scene Inheritance Object ShinseiSpawner Namespace : Timba.SacredTails.Lobby Assembly : cs.temp.dll.dll Syntax public class ShinseiSpawner : MonoBehaviour Fields characterSlot Declaration public CharacterSlot characterSlot Field Value Type Description CharacterSlot Methods ChangeCurrentShinsei(String) Declaration public void ChangeCurrentShinsei(string newValue) Parameters Type Name Description String newValue OnSpawn(Transform, Boolean, Boolean) Declaration public void OnSpawn(Transform parent, bool isLocalPlayerShinsei = false, bool useGravity = false) Parameters Type Name Description Transform parent Boolean isLocalPlayerShinsei Boolean useGravity SpawnOtherShinsei(String, Transform, Vector3) Declaration public void SpawnOtherShinsei(string shinseiCompanionDna, Transform parent, Vector3 playerPos) Parameters Type Name Description String shinseiCompanionDna Transform parent Vector3 playerPos"
  },
  "api/Timba.SacredTails.Navigation.html": {
    "href": "api/Timba.SacredTails.Navigation.html",
    "title": "Namespace Timba.SacredTails.Navigation | Example Unity documentation",
    "keywords": "Namespace Timba.SacredTails.Navigation Classes NavigationManager Interfaces INavigation"
  },
  "api/Timba.SacredTails.Navigation.INavigation.html": {
    "href": "api/Timba.SacredTails.Navigation.INavigation.html",
    "title": "Interface INavigation | Example Unity documentation",
    "keywords": "Interface INavigation Namespace : Timba.SacredTails.Navigation Assembly : cs.temp.dll.dll Syntax public interface INavigation Methods GoToScene(Int32) Declaration void GoToScene(int index) Parameters Type Name Description Int32 index"
  },
  "api/Timba.SacredTails.Navigation.NavigationManager.html": {
    "href": "api/Timba.SacredTails.Navigation.NavigationManager.html",
    "title": "Class NavigationManager | Example Unity documentation",
    "keywords": "Class NavigationManager Inheritance Object NavigationManager Implements INavigation IService Namespace : Timba.SacredTails.Navigation Assembly : cs.temp.dll.dll Syntax public class NavigationManager : MonoBehaviour, INavigation Methods GoToScene(Int32) Declaration public void GoToScene(int index) Parameters Type Name Description Int32 index IsReady() Declaration public bool IsReady() Returns Type Description Boolean Implements INavigation IService"
  },
  "api/Timba.SacredTails.OptionsModule.GameSettingsController.html": {
    "href": "api/Timba.SacredTails.OptionsModule.GameSettingsController.html",
    "title": "Class GameSettingsController | Example Unity documentation",
    "keywords": "Class GameSettingsController Inheritance Object GameSettingsController Namespace : Timba.SacredTails.OptionsModule Assembly : cs.temp.dll.dll Syntax public class GameSettingsController : MonoBehaviour Fields badWordFilterToggle Declaration public Toggle badWordFilterToggle Field Value Type Description Toggle frenchLayoutToggle Declaration public Toggle frenchLayoutToggle Field Value Type Description Toggle fullscreenToggle Declaration public Toggle fullscreenToggle Field Value Type Description Toggle graphicsDropdown Declaration public TMP_Dropdown graphicsDropdown Field Value Type Description TMP_Dropdown qualityLevel Declaration public RenderPipelineAsset[] qualityLevel Field Value Type Description RenderPipelineAsset [] resolutionDropdown Declaration public TMP_Dropdown resolutionDropdown Field Value Type Description TMP_Dropdown settingsContainer Declaration public GameObject settingsContainer Field Value Type Description GameObject settingsPanel Declaration public GameObject settingsPanel Field Value Type Description GameObject terrain Declaration public Terrain terrain Field Value Type Description Terrain versionText Declaration public TMP_Text versionText Field Value Type Description TMP_Text Methods ChangeBadWordFilter(Boolean) Declaration public void ChangeBadWordFilter(bool changeToogle) Parameters Type Name Description Boolean changeToogle ChangeFullScreen() Declaration public void ChangeFullScreen() ChangeFullScreen(Boolean) Declaration public void ChangeFullScreen(bool changeToogle) Parameters Type Name Description Boolean changeToogle ChangeGraphicSettings(Int32) Declaration public void ChangeGraphicSettings(int value) Parameters Type Name Description Int32 value ChangeKeyboardLayout(Boolean) Declaration public void ChangeKeyboardLayout(bool changeToogle) Parameters Type Name Description Boolean changeToogle ChangeResolution(Int32) Declaration public void ChangeResolution(int resolutionSettings) Parameters Type Name Description Int32 resolutionSettings GetResolution(Int32, Boolean) Declaration public Vector2Int GetResolution(int option, bool saveOnPlayerPrefs = false) Parameters Type Name Description Int32 option Boolean saveOnPlayerPrefs Returns Type Description Vector2Int SettingsButtonInteract(Boolean) Declaration public void SettingsButtonInteract(bool active) Parameters Type Name Description Boolean active Start() Declaration public void Start()"
  },
  "api/Timba.SacredTails.OptionsModule.html": {
    "href": "api/Timba.SacredTails.OptionsModule.html",
    "title": "Namespace Timba.SacredTails.OptionsModule | Example Unity documentation",
    "keywords": "Namespace Timba.SacredTails.OptionsModule Classes GameSettingsController"
  },
  "api/Timba.SacredTails.Photoboot.html": {
    "href": "api/Timba.SacredTails.Photoboot.html",
    "title": "Namespace Timba.SacredTails.Photoboot | Example Unity documentation",
    "keywords": "Namespace Timba.SacredTails.Photoboot Classes ShinseiWardrobe This allow take pictures to the Shinsei, using Camera and Coroutines Interfaces IIconGeneration Service that allows take pictures of Shinsei for UI"
  },
  "api/Timba.SacredTails.Photoboot.IIconGeneration.html": {
    "href": "api/Timba.SacredTails.Photoboot.IIconGeneration.html",
    "title": "Interface IIconGeneration | Example Unity documentation",
    "keywords": "Interface IIconGeneration Service that allows take pictures of Shinsei for UI Namespace : Timba.SacredTails.Photoboot Assembly : cs.temp.dll.dll Syntax public interface IIconGeneration Methods GenerateShinseiIcons(List<Shinsei>, Action) Declaration void GenerateShinseiIcons(List<Shinsei> shinseiParty, Action callback = null) Parameters Type Name Description List < Shinsei > shinseiParty Action callback"
  },
  "api/Timba.SacredTails.Photoboot.ShinseiWardrobe.html": {
    "href": "api/Timba.SacredTails.Photoboot.ShinseiWardrobe.html",
    "title": "Class ShinseiWardrobe | Example Unity documentation",
    "keywords": "Class ShinseiWardrobe This allow take pictures to the Shinsei, using Camera and Coroutines Inheritance Object ShinseiWardrobe Implements IIconGeneration IService Namespace : Timba.SacredTails.Photoboot Assembly : cs.temp.dll.dll Syntax public class ShinseiWardrobe : MonoBehaviour, IIconGeneration Fields generatedSprite Declaration public Sprite generatedSprite Field Value Type Description Sprite Methods GenerateShinseiIcons(List<Shinsei>, Action) Declaration public void GenerateShinseiIcons(List<Shinsei> shinseiParty, Action callback = null) Parameters Type Name Description List < Shinsei > shinseiParty Action callback GetGeneratedIcons(List<Shinsei>) Declaration public List<Sprite> GetGeneratedIcons(List<Shinsei> shinseiParty) Parameters Type Name Description List < Shinsei > shinseiParty Returns Type Description List < Sprite > GetGeneratedSequence(List<Shinsei>, Int32) Declaration public List<Sprite> GetGeneratedSequence(List<Shinsei> shinseiParty, int targetFrames) Parameters Type Name Description List < Shinsei > shinseiParty Int32 targetFrames Returns Type Description List < Sprite > IsReady() Declaration public bool IsReady() Returns Type Description Boolean TexToSprite(Texture2D) Declaration public Sprite TexToSprite(Texture2D tex) Parameters Type Name Description Texture2D tex Returns Type Description Sprite Implements IIconGeneration IService"
  },
  "api/Timba.SacredTails.TournamentBehavior.html": {
    "href": "api/Timba.SacredTails.TournamentBehavior.html",
    "title": "Namespace Timba.SacredTails.TournamentBehavior | Example Unity documentation",
    "keywords": "Namespace Timba.SacredTails.TournamentBehavior Classes SearchAndShow Show all active tournaments registered in the game SingleBracketPlayerLabelController TournamentBracketsShowController TournamentCreationController TournamentEntry TournamentReadyController TournamentSlot UI Element of clickable button for join to specific tournament TournamentSlot.JoinTournamentDto TournamentSlot.TournamentPlayerDataDto"
  },
  "api/Timba.SacredTails.TournamentBehavior.SearchAndShow.html": {
    "href": "api/Timba.SacredTails.TournamentBehavior.SearchAndShow.html",
    "title": "Class SearchAndShow | Example Unity documentation",
    "keywords": "Class SearchAndShow Show all active tournaments registered in the game Inheritance Object SearchAndShow Namespace : Timba.SacredTails.TournamentBehavior Assembly : cs.temp.dll.dll Syntax public class SearchAndShow : MonoBehaviour Fields tournamentSlots Declaration public List<TournamentSlot> tournamentSlots Field Value Type Description List < TournamentSlot > Methods SearchAndShowTournaments() Declaration public void SearchAndShowTournaments()"
  },
  "api/Timba.SacredTails.TournamentBehavior.SingleBracketPlayerLabelController.html": {
    "href": "api/Timba.SacredTails.TournamentBehavior.SingleBracketPlayerLabelController.html",
    "title": "Class SingleBracketPlayerLabelController | Example Unity documentation",
    "keywords": "Class SingleBracketPlayerLabelController Inheritance Object SingleBracketPlayerLabelController Namespace : Timba.SacredTails.TournamentBehavior Assembly : cs.temp.dll.dll Syntax public class SingleBracketPlayerLabelController : MonoBehaviour Fields bracketLineBack Declaration public Image bracketLineBack Field Value Type Description Image bracketLineDown Declaration public Image bracketLineDown Field Value Type Description Image bracketLineFront Declaration public Image bracketLineFront Field Value Type Description Image bracketLineGlowin Declaration public Sprite bracketLineGlowin Field Value Type Description Sprite bracketLineUp Declaration public Image bracketLineUp Field Value Type Description Image labelFrameReference Declaration public Image labelFrameReference Field Value Type Description Image labelFrameWhite Declaration public Sprite labelFrameWhite Field Value Type Description Sprite playerDisplayName Declaration public TMP_Text playerDisplayName Field Value Type Description TMP_Text shinseiIcon Declaration public Image shinseiIcon Field Value Type Description Image vsImage Declaration public Image vsImage Field Value Type Description Image Methods InitPlayerLabel(Boolean, Boolean, Boolean, String, Int32, Int32, Boolean, Boolean) Declaration public void InitPlayerLabel(bool isInitBracket, bool isWinnerBracket, bool isOddNumber, string playerName, int currentStage, int totalStages, bool isWinnerOfPreviousStage, bool isAnExistingStage) Parameters Type Name Description Boolean isInitBracket Boolean isWinnerBracket Boolean isOddNumber String playerName Int32 currentStage Int32 totalStages Boolean isWinnerOfPreviousStage Boolean isAnExistingStage"
  },
  "api/Timba.SacredTails.TournamentBehavior.TournamentBracketsShowController.html": {
    "href": "api/Timba.SacredTails.TournamentBehavior.TournamentBracketsShowController.html",
    "title": "Class TournamentBracketsShowController | Example Unity documentation",
    "keywords": "Class TournamentBracketsShowController Inheritance Object TournamentBracketsShowController Namespace : Timba.SacredTails.TournamentBehavior Assembly : cs.temp.dll.dll Syntax public class TournamentBracketsShowController : MonoBehaviour Fields bracketColumnPrefab Declaration public GameObject bracketColumnPrefab Field Value Type Description GameObject bracketLabelPrefab Declaration public SingleBracketPlayerLabelController bracketLabelPrefab Field Value Type Description SingleBracketPlayerLabelController bracketsContentParent Declaration public Transform bracketsContentParent Field Value Type Description Transform testBracket Declaration public string testBracket Field Value Type Description String Methods CreateBracketLabel(String, Boolean, Boolean, Int32, GameObject, Int32, Int32, Int32, Boolean, List<String>) Declaration public void CreateBracketLabel(string _PID, bool _isOddNumber, bool _isInitBracket, int _maxPlayers, GameObject _currentColumnBracket, int _counterBrackets, int _currentStage, int maxStage, bool _isAnExistingStage = false, List<string> winnersOfCurrentStage = null) Parameters Type Name Description String _PID Boolean _isOddNumber Boolean _isInitBracket Int32 _maxPlayers GameObject _currentColumnBracket Int32 _counterBrackets Int32 _currentStage Int32 maxStage Boolean _isAnExistingStage List < String > winnersOfCurrentStage FillFinalBracket(Int32, Boolean, Int32, Int32, Int32) Declaration public void FillFinalBracket(int maxPlayers, bool isInitBracket, int counterBrackets, int currentStage, int totalStages) Parameters Type Name Description Int32 maxPlayers Boolean isInitBracket Int32 counterBrackets Int32 currentStage Int32 totalStages FillFutureBrackets(Int32, Int32, Int32, ref Boolean, ref Int32) Declaration public void FillFutureBrackets(int maxPlayers, int totalStages, int currentStage, ref bool isInitBracket, ref int counterBrackets) Parameters Type Name Description Int32 maxPlayers Int32 totalStages Int32 currentStage Boolean isInitBracket Int32 counterBrackets GetTotalNumberOfStagesAndBrackets(Int32) Declaration public (int, int) GetTotalNumberOfStagesAndBrackets(int maxPlayers) Parameters Type Name Description Int32 maxPlayers Returns Type Description (T1, T2) < Int32 , Int32 > GetWinnersOfThisStage(Dictionary<String, StageBracketData>, Int32) Declaration public List<string> GetWinnersOfThisStage(Dictionary<string, StageBracketData> stagesData, int currentStageIndex) Parameters Type Name Description Dictionary < String , StageBracketData > stagesData Int32 currentStageIndex Returns Type Description List < String > InitBracket() Declaration public void InitBracket() OnEnable() Declaration public void OnEnable() SetCurrentBrackets(Int32, Int32, Dictionary<String, StageBracketData>, ref Boolean) Declaration public (int, int) SetCurrentBrackets(int maxPlayers, int totalStages, Dictionary<string, StageBracketData> stagesData, ref bool isInitBracket) Parameters Type Name Description Int32 maxPlayers Int32 totalStages Dictionary < String , StageBracketData > stagesData Boolean isInitBracket Returns Type Description (T1, T2) < Int32 , Int32 > SetSpacingBetweenBrackets(VerticalLayoutGroup, Int32) Declaration public void SetSpacingBetweenBrackets(VerticalLayoutGroup currentColumnBracket, int currentStage) Parameters Type Name Description VerticalLayoutGroup currentColumnBracket Int32 currentStage ShowTestTournament() Declaration public void ShowTestTournament()"
  },
  "api/Timba.SacredTails.TournamentBehavior.TournamentCreationController.html": {
    "href": "api/Timba.SacredTails.TournamentBehavior.TournamentCreationController.html",
    "title": "Class TournamentCreationController | Example Unity documentation",
    "keywords": "Class TournamentCreationController Inheritance Object TournamentCreationController Namespace : Timba.SacredTails.TournamentBehavior Assembly : cs.temp.dll.dll Syntax public class TournamentCreationController : MonoBehaviour Fields calendarController Declaration public CalendarController calendarController Field Value Type Description CalendarController loadingScreen Declaration public GameObject loadingScreen Field Value Type Description GameObject maxPlayerInput Declaration public TMP_Dropdown maxPlayerInput Field Value Type Description TMP_Dropdown onLoginSuccess Declaration public UnityEvent onLoginSuccess Field Value Type Description UnityEvent onTournamentCreation Declaration public Action<string> onTournamentCreation Field Value Type Description Action < String > tournamentName Declaration public TMP_InputField tournamentName Field Value Type Description TMP_InputField Methods CheckIfUserIsAllowed(LoginResult) Declaration public void CheckIfUserIsAllowed(LoginResult resultLogin) Parameters Type Name Description LoginResult resultLogin CreateTournament() Declaration public void CreateTournament() FillBotData() Declaration public (string, ExecuteFunctionRequest) FillBotData() Returns Type Description (T1, T2) < String , ExecuteFunctionRequest > GenerateTournamentId() Declaration public string GenerateTournamentId() Returns Type Description String"
  },
  "api/Timba.SacredTails.TournamentBehavior.TournamentEntry.html": {
    "href": "api/Timba.SacredTails.TournamentBehavior.TournamentEntry.html",
    "title": "Class TournamentEntry | Example Unity documentation",
    "keywords": "Class TournamentEntry Inheritance Object TournamentEntry Namespace : Timba.SacredTails.TournamentBehavior Assembly : cs.temp.dll.dll Syntax public class TournamentEntry Fields initTimeStage_1 Declaration public string initTimeStage_1 Field Value Type Description String maxPlayer Declaration public string maxPlayer Field Value Type Description String tournamentId Declaration public string tournamentId Field Value Type Description String tournamentName Declaration public string tournamentName Field Value Type Description String"
  },
  "api/Timba.SacredTails.TournamentBehavior.TournamentReadyController.html": {
    "href": "api/Timba.SacredTails.TournamentBehavior.TournamentReadyController.html",
    "title": "Class TournamentReadyController | Example Unity documentation",
    "keywords": "Class TournamentReadyController Inheritance Object TournamentReadyController Namespace : Timba.SacredTails.TournamentBehavior Assembly : cs.temp.dll.dll Syntax public class TournamentReadyController : MonoBehaviour Fields currentCountdownDate Declaration public DateTime? currentCountdownDate Field Value Type Description Nullable < DateTime > currentStageTime Declaration public DateTime currentStageTime Field Value Type Description DateTime hasCreatedMatch Declaration public bool hasCreatedMatch Field Value Type Description Boolean labelTimer Declaration public TMP_Text labelTimer Field Value Type Description TMP_Text readyButton Declaration public Button readyButton Field Value Type Description Button timerLeft Declaration public float timerLeft Field Value Type Description Single timerText Declaration public TMP_Text timerText Field Value Type Description TMP_Text Methods CheckIfWinByDefault(BracketsData, SacredTailsPSDto<BracketsData>) Declaration public bool CheckIfWinByDefault(BracketsData bracketsData, SacredTailsPSDto<BracketsData> response) Parameters Type Name Description BracketsData bracketsData SacredTailsPSDto < BracketsData > response Returns Type Description Boolean CreateMatch(BracketsData) Declaration public void CreateMatch(BracketsData _bracketsData) Parameters Type Name Description BracketsData _bracketsData EnableReadyButton(Boolean) Declaration public void EnableReadyButton(bool isReadyEnable) Parameters Type Name Description Boolean isReadyEnable Enter() Declaration public void Enter() ExitTournament(String, Action) Declaration public void ExitTournament(string message = null, Action finishCallback = null) Parameters Type Name Description String message Action finishCallback GetTimerLeftForNextStage(String) Set current timer to time left for next round Declaration public void GetTimerLeftForNextStage(string nextStageTime) Parameters Type Name Description String nextStageTime MarkAsReady(Boolean) Declaration public void MarkAsReady(bool isMarkingReady = true) Parameters Type Name Description Boolean isMarkingReady OnDisable() Declaration public void OnDisable() OnEnable() Declaration public void OnEnable() ShowPendingTimeAfterMatch(String) Declaration public void ShowPendingTimeAfterMatch(string nextStageTime = null) Parameters Type Name Description String nextStageTime ShowTimer(Boolean, Action) Declaration public void ShowTimer(bool showHour, Action onEndTimer) Parameters Type Name Description Boolean showHour Action onEndTimer ShowTimer(Single, Boolean) Declaration public void ShowTimer(float timerLeft, bool showHour) Parameters Type Name Description Single timerLeft Boolean showHour ShowTimerCoroutine(Boolean, Action) Declaration public IEnumerator ShowTimerCoroutine(bool showHour, Action onEndTimer) Parameters Type Name Description Boolean showHour Action onEndTimer Returns Type Description IEnumerator ShowTimerInitTournament(DateTime) Declaration public void ShowTimerInitTournament(DateTime initTimeTournament) Parameters Type Name Description DateTime initTimeTournament StartReadyButton(Single) Declaration public void StartReadyButton(float _timerLeft = -1F) Parameters Type Name Description Single _timerLeft"
  },
  "api/Timba.SacredTails.TournamentBehavior.TournamentSlot.html": {
    "href": "api/Timba.SacredTails.TournamentBehavior.TournamentSlot.html",
    "title": "Class TournamentSlot | Example Unity documentation",
    "keywords": "Class TournamentSlot UI Element of clickable button for join to specific tournament Inheritance Object TournamentSlot Implements IPointerClickHandler Namespace : Timba.SacredTails.TournamentBehavior Assembly : cs.temp.dll.dll Syntax public class TournamentSlot : MonoBehaviour Fields dayName Declaration public TextMeshProUGUI dayName Field Value Type Description TextMeshProUGUI hour Declaration public TextMeshProUGUI hour Field Value Type Description TextMeshProUGUI initTime Declaration public TextMeshProUGUI initTime Field Value Type Description TextMeshProUGUI joinBtn Declaration public Button joinBtn Field Value Type Description Button maxPlayers Declaration public TextMeshProUGUI maxPlayers Field Value Type Description TextMeshProUGUI OnClick Declaration public Action<TournamentSlot, string> OnClick Field Value Type Description Action < TournamentSlot , String > register Declaration public TextMeshProUGUI register Field Value Type Description TextMeshProUGUI tournamentTitle Declaration public TextMeshProUGUI tournamentTitle Field Value Type Description TextMeshProUGUI Methods DrawEntry(TournamentEntry) Declaration public void DrawEntry(TournamentEntry tournamentEntry) Parameters Type Name Description TournamentEntry tournamentEntry JoinTournament(String, DateTime, String) Declaration public void JoinTournament(string tournamentKey, DateTime initTimeTournament, string tournamentName) Parameters Type Name Description String tournamentKey DateTime initTimeTournament String tournamentName OnPointerClick(PointerEventData) Declaration public void OnPointerClick(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData ShowSelected() Declaration public void ShowSelected() ShowUnselected() Declaration public void ShowUnselected() Implements IPointerClickHandler"
  },
  "api/Timba.SacredTails.TournamentBehavior.TournamentSlot.JoinTournamentDto.html": {
    "href": "api/Timba.SacredTails.TournamentBehavior.TournamentSlot.JoinTournamentDto.html",
    "title": "Class TournamentSlot.JoinTournamentDto | Example Unity documentation",
    "keywords": "Class TournamentSlot.JoinTournamentDto Inheritance Object TournamentSlot.JoinTournamentDto Namespace : Timba.SacredTails.TournamentBehavior Assembly : cs.temp.dll.dll Syntax public class JoinTournamentDto Fields displayName Declaration public string displayName Field Value Type Description String tournamentPlayerDataDto Declaration public TournamentSlot.TournamentPlayerDataDto tournamentPlayerDataDto Field Value Type Description TournamentSlot.TournamentPlayerDataDto"
  },
  "api/Timba.SacredTails.TournamentBehavior.TournamentSlot.TournamentPlayerDataDto.html": {
    "href": "api/Timba.SacredTails.TournamentBehavior.TournamentSlot.TournamentPlayerDataDto.html",
    "title": "Class TournamentSlot.TournamentPlayerDataDto | Example Unity documentation",
    "keywords": "Class TournamentSlot.TournamentPlayerDataDto Inheritance Object TournamentSlot.TournamentPlayerDataDto Namespace : Timba.SacredTails.TournamentBehavior Assembly : cs.temp.dll.dll Syntax public class TournamentPlayerDataDto Fields currentBracket Declaration public int currentBracket Field Value Type Description Int32 displayName Declaration public string displayName Field Value Type Description String lastPetitionTimeStamp Declaration public string lastPetitionTimeStamp Field Value Type Description String stage Declaration public int stage Field Value Type Description Int32"
  },
  "api/Timba.SacredTails.UiHelpers.BackgroundTypeSwapper.html": {
    "href": "api/Timba.SacredTails.UiHelpers.BackgroundTypeSwapper.html",
    "title": "Class BackgroundTypeSwapper | Example Unity documentation",
    "keywords": "Class BackgroundTypeSwapper Inheritance Object BackgroundTypeSwapper Namespace : Timba.SacredTails.UiHelpers Assembly : cs.temp.dll.dll Syntax public class BackgroundTypeSwapper : MonoBehaviour Methods CallByShinseiType(Image, CharacterType) Declaration public void CallByShinseiType(Image image, CharacterType shinseiType) Parameters Type Name Description Image image CharacterType shinseiType SetImageSpriteByType(Image, Int32) Declaration public void SetImageSpriteByType(Image image, int indexSprite) Parameters Type Name Description Image image Int32 indexSprite"
  },
  "api/Timba.SacredTails.UiHelpers.CalendarController.html": {
    "href": "api/Timba.SacredTails.UiHelpers.CalendarController.html",
    "title": "Class CalendarController | Example Unity documentation",
    "keywords": "Class CalendarController Inheritance Object CalendarController Namespace : Timba.SacredTails.UiHelpers Assembly : cs.temp.dll.dll Syntax public class CalendarController : MonoBehaviour Fields _monthNumText Declaration public TMP_Text _monthNumText Field Value Type Description TMP_Text _yearNumText Declaration public TMP_Text _yearNumText Field Value Type Description TMP_Text dateItems Declaration public List<CalendarDateItem> dateItems Field Value Type Description List < CalendarDateItem > hour Declaration public TMP_Dropdown hour Field Value Type Description TMP_Dropdown itemPrefab Declaration public CalendarDateItem itemPrefab Field Value Type Description CalendarDateItem minute Declaration public TMP_Dropdown minute Field Value Type Description TMP_Dropdown onSelectDate Declaration public UnityEvent onSelectDate Field Value Type Description UnityEvent second Declaration public TMP_Dropdown second Field Value Type Description TMP_Dropdown target Declaration public TMP_Text target Field Value Type Description TMP_Text Methods CalendarHasDate() Declaration public bool CalendarHasDate() Returns Type Description Boolean CreateDateForTournament() Declaration public string CreateDateForTournament() Returns Type Description String MonthNext() Declaration public void MonthNext() MonthPrev() Declaration public void MonthPrev() OnDateItemClick(String) Declaration public void OnDateItemClick(string day) Parameters Type Name Description String day ParseDateNumberToCorrectFormat(String) Declaration public string ParseDateNumberToCorrectFormat(string number) Parameters Type Name Description String number Returns Type Description String YearNext() Declaration public void YearNext() YearPrev() Declaration public void YearPrev()"
  },
  "api/Timba.SacredTails.UiHelpers.CalendarDateItem.html": {
    "href": "api/Timba.SacredTails.UiHelpers.CalendarDateItem.html",
    "title": "Class CalendarDateItem | Example Unity documentation",
    "keywords": "Class CalendarDateItem Inheritance Object CalendarDateItem Namespace : Timba.SacredTails.UiHelpers Assembly : cs.temp.dll.dll Syntax public class CalendarDateItem : MonoBehaviour Fields onClickDate Declaration public Action<string> onClickDate Field Value Type Description Action < String > textField Declaration public TMP_Text textField Field Value Type Description TMP_Text Methods OnDateItemClick() Declaration public void OnDateItemClick()"
  },
  "api/Timba.SacredTails.UiHelpers.ChangeSelectedWithTab.html": {
    "href": "api/Timba.SacredTails.UiHelpers.ChangeSelectedWithTab.html",
    "title": "Class ChangeSelectedWithTab | Example Unity documentation",
    "keywords": "Class ChangeSelectedWithTab Inheritance Object ChangeSelectedWithTab Namespace : Timba.SacredTails.UiHelpers Assembly : cs.temp.dll.dll Syntax public class ChangeSelectedWithTab : MonoBehaviour"
  },
  "api/Timba.SacredTails.UiHelpers.EntryController.html": {
    "href": "api/Timba.SacredTails.UiHelpers.EntryController.html",
    "title": "Class EntryController | Example Unity documentation",
    "keywords": "Class EntryController Inheritance Object EntryController Namespace : Timba.SacredTails.UiHelpers Assembly : cs.temp.dll.dll Syntax public class EntryController : MonoBehaviour Fields nft_amount Declaration public TMP_Text nft_amount Field Value Type Description TMP_Text nft_image Declaration public Image nft_image Field Value Type Description Image qualificator Declaration public TMP_Text qualificator Field Value Type Description TMP_Text sc_amount Declaration public TMP_Text sc_amount Field Value Type Description TMP_Text sc_image Declaration public Image sc_image Field Value Type Description Image Methods FillData(RankRewardEntry) Declaration public void FillData(RankRewardEntry data) Parameters Type Name Description RankRewardEntry data"
  },
  "api/Timba.SacredTails.UiHelpers.html": {
    "href": "api/Timba.SacredTails.UiHelpers.html",
    "title": "Namespace Timba.SacredTails.UiHelpers | Example Unity documentation",
    "keywords": "Namespace Timba.SacredTails.UiHelpers Classes BackgroundTypeSwapper CalendarController CalendarDateItem ChangeSelectedWithTab EntryController IconContainerSO IconSet KeepScrollBar LeaderboardElement LeaderboardElement.ElementData PositionCounter ScrollButton ScrollViewSystem SeekMouseIntoScreen SelectableButtonGroup SelectableButtonGroup.ButtonList TypeIconAsigner UIGroups UIGroups.UiGroup WoldPositionateUiElement WoldPositionUIHandler This allow you to put UI elements attached to player view Interfaces IUIHelpable"
  },
  "api/Timba.SacredTails.UiHelpers.IconContainerSO.html": {
    "href": "api/Timba.SacredTails.UiHelpers.IconContainerSO.html",
    "title": "Class IconContainerSO | Example Unity documentation",
    "keywords": "Class IconContainerSO Inheritance Object IconContainerSO Namespace : Timba.SacredTails.UiHelpers Assembly : cs.temp.dll.dll Syntax public class IconContainerSO : ScriptableObject Fields IconCollection Declaration public List<IconSet> IconCollection Field Value Type Description List < IconSet > nullIcon Declaration public IconSet nullIcon Field Value Type Description IconSet Methods AssignIcon(Nullable<CharacterType>) Declaration public IconSet AssignIcon(CharacterType? charType) Parameters Type Name Description Nullable < CharacterType > charType Returns Type Description IconSet"
  },
  "api/Timba.SacredTails.UiHelpers.IconSet.html": {
    "href": "api/Timba.SacredTails.UiHelpers.IconSet.html",
    "title": "Class IconSet | Example Unity documentation",
    "keywords": "Class IconSet Inheritance Object IconSet Namespace : Timba.SacredTails.UiHelpers Assembly : cs.temp.dll.dll Syntax public class IconSet Fields backgroundSprite Declaration public Sprite backgroundSprite Field Value Type Description Sprite battleIcon Declaration public Sprite battleIcon Field Value Type Description Sprite iconType Declaration public CharacterType iconType Field Value Type Description CharacterType negativeIcon Declaration public Sprite negativeIcon Field Value Type Description Sprite partIcon Declaration public Sprite partIcon Field Value Type Description Sprite TypeColor Declaration public Color TypeColor Field Value Type Description Color"
  },
  "api/Timba.SacredTails.UiHelpers.IUIHelpable.html": {
    "href": "api/Timba.SacredTails.UiHelpers.IUIHelpable.html",
    "title": "Interface IUIHelpable | Example Unity documentation",
    "keywords": "Interface IUIHelpable Namespace : Timba.SacredTails.UiHelpers Assembly : cs.temp.dll.dll Syntax public interface IUIHelpable Methods AssignIcon(Nullable<CharacterType>) Declaration IconSet AssignIcon(CharacterType? charType) Parameters Type Name Description Nullable < CharacterType > charType Returns Type Description IconSet"
  },
  "api/Timba.SacredTails.UiHelpers.KeepScrollBar.html": {
    "href": "api/Timba.SacredTails.UiHelpers.KeepScrollBar.html",
    "title": "Class KeepScrollBar | Example Unity documentation",
    "keywords": "Class KeepScrollBar Inheritance Object KeepScrollBar Namespace : Timba.SacredTails.UiHelpers Assembly : cs.temp.dll.dll Syntax public class KeepScrollBar : MonoBehaviour Methods setFixedHandleSize() Declaration public void setFixedHandleSize()"
  },
  "api/Timba.SacredTails.UiHelpers.LeaderboardElement.ElementData.html": {
    "href": "api/Timba.SacredTails.UiHelpers.LeaderboardElement.ElementData.html",
    "title": "Class LeaderboardElement.ElementData | Example Unity documentation",
    "keywords": "Class LeaderboardElement.ElementData Inheritance Object LeaderboardElement.ElementData Namespace : Timba.SacredTails.UiHelpers Assembly : cs.temp.dll.dll Syntax public class ElementData Fields name Declaration public string name Field Value Type Description String points Declaration public string points Field Value Type Description String position Declaration public string position Field Value Type Description String victories Declaration public string victories Field Value Type Description String"
  },
  "api/Timba.SacredTails.UiHelpers.LeaderboardElement.html": {
    "href": "api/Timba.SacredTails.UiHelpers.LeaderboardElement.html",
    "title": "Class LeaderboardElement | Example Unity documentation",
    "keywords": "Class LeaderboardElement Inheritance Object LeaderboardElement Namespace : Timba.SacredTails.UiHelpers Assembly : cs.temp.dll.dll Syntax public class LeaderboardElement : MonoBehaviour Fields button Declaration public Button button Field Value Type Description Button Properties ElementDataObject Declaration public LeaderboardElement.ElementData ElementDataObject { get; } Property Value Type Description LeaderboardElement.ElementData Methods ChangePosition(Int32) Declaration public void ChangePosition(int value) Parameters Type Name Description Int32 value ChangeVictories(String) Declaration public void ChangeVictories(string value) Parameters Type Name Description String value DrawElement(LeaderboardElement.ElementData) Declaration public void DrawElement(LeaderboardElement.ElementData elementData) Parameters Type Name Description LeaderboardElement.ElementData elementData"
  },
  "api/Timba.SacredTails.UiHelpers.PositionCounter.html": {
    "href": "api/Timba.SacredTails.UiHelpers.PositionCounter.html",
    "title": "Class PositionCounter | Example Unity documentation",
    "keywords": "Class PositionCounter Inheritance Object PositionCounter Namespace : Timba.SacredTails.UiHelpers Assembly : cs.temp.dll.dll Syntax public class PositionCounter : MonoBehaviour Methods EnablePosition(Int32) Declaration public void EnablePosition(int index) Parameters Type Name Description Int32 index"
  },
  "api/Timba.SacredTails.UiHelpers.ScrollButton.html": {
    "href": "api/Timba.SacredTails.UiHelpers.ScrollButton.html",
    "title": "Class ScrollButton | Example Unity documentation",
    "keywords": "Class ScrollButton Inheritance Object ScrollButton Implements IPointerDownHandler IPointerUpHandler Namespace : Timba.SacredTails.UiHelpers Assembly : cs.temp.dll.dll Syntax public class ScrollButton : MonoBehaviour Fields isDown Declaration public bool isDown Field Value Type Description Boolean Methods OnPointerDown(PointerEventData) Declaration public void OnPointerDown(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData OnPointerUp(PointerEventData) Declaration public void OnPointerUp(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IPointerDownHandler IPointerUpHandler"
  },
  "api/Timba.SacredTails.UiHelpers.ScrollViewSystem.html": {
    "href": "api/Timba.SacredTails.UiHelpers.ScrollViewSystem.html",
    "title": "Class ScrollViewSystem | Example Unity documentation",
    "keywords": "Class ScrollViewSystem Inheritance Object ScrollViewSystem Namespace : Timba.SacredTails.UiHelpers Assembly : cs.temp.dll.dll Syntax public class ScrollViewSystem : MonoBehaviour Methods LeftScroll() Declaration public void LeftScroll() RightScroll() Declaration public void RightScroll() Start() Declaration public void Start()"
  },
  "api/Timba.SacredTails.UiHelpers.SeekMouseIntoScreen.html": {
    "href": "api/Timba.SacredTails.UiHelpers.SeekMouseIntoScreen.html",
    "title": "Class SeekMouseIntoScreen | Example Unity documentation",
    "keywords": "Class SeekMouseIntoScreen Inheritance Object SeekMouseIntoScreen Namespace : Timba.SacredTails.UiHelpers Assembly : cs.temp.dll.dll Syntax public class SeekMouseIntoScreen : MonoBehaviour Fields offsetX Declaration public int offsetX Field Value Type Description Int32 offsetY Declaration public int offsetY Field Value Type Description Int32 posOffsetX Declaration public int posOffsetX Field Value Type Description Int32 posOffsetY Declaration public int posOffsetY Field Value Type Description Int32 Methods Enable(Boolean) Declaration public void Enable(bool state) Parameters Type Name Description Boolean state"
  },
  "api/Timba.SacredTails.UiHelpers.SelectableButtonGroup.ButtonList.html": {
    "href": "api/Timba.SacredTails.UiHelpers.SelectableButtonGroup.ButtonList.html",
    "title": "Class SelectableButtonGroup.ButtonList | Example Unity documentation",
    "keywords": "Class SelectableButtonGroup.ButtonList Inheritance Object SelectableButtonGroup.ButtonList Namespace : Timba.SacredTails.UiHelpers Assembly : cs.temp.dll.dll Syntax [Serializable] public class ButtonList Fields buttonText Declaration public TextMeshProUGUI buttonText Field Value Type Description TextMeshProUGUI marker Declaration public GameObject marker Field Value Type Description GameObject"
  },
  "api/Timba.SacredTails.UiHelpers.SelectableButtonGroup.html": {
    "href": "api/Timba.SacredTails.UiHelpers.SelectableButtonGroup.html",
    "title": "Class SelectableButtonGroup | Example Unity documentation",
    "keywords": "Class SelectableButtonGroup Inheritance Object SelectableButtonGroup Namespace : Timba.SacredTails.UiHelpers Assembly : cs.temp.dll.dll Syntax public class SelectableButtonGroup : MonoBehaviour Methods SelectButton(Int32) Declaration public void SelectButton(int index) Parameters Type Name Description Int32 index"
  },
  "api/Timba.SacredTails.UiHelpers.TypeIconAsigner.html": {
    "href": "api/Timba.SacredTails.UiHelpers.TypeIconAsigner.html",
    "title": "Class TypeIconAsigner | Example Unity documentation",
    "keywords": "Class TypeIconAsigner Inheritance Object TypeIconAsigner Implements IUIHelpable IService Namespace : Timba.SacredTails.UiHelpers Assembly : cs.temp.dll.dll Syntax public class TypeIconAsigner : MonoBehaviour, IUIHelpable Fields IconDatabase Declaration public IconContainerSO IconDatabase Field Value Type Description IconContainerSO Methods AssignIcon(Nullable<CharacterType>) Declaration public IconSet AssignIcon(CharacterType? charType) Parameters Type Name Description Nullable < CharacterType > charType Returns Type Description IconSet IsReady() Declaration public bool IsReady() Returns Type Description Boolean Implements IUIHelpable IService"
  },
  "api/Timba.SacredTails.UiHelpers.UIGroups.html": {
    "href": "api/Timba.SacredTails.UiHelpers.UIGroups.html",
    "title": "Class UIGroups | Example Unity documentation",
    "keywords": "Class UIGroups Inheritance Object UIGroups Namespace : Timba.SacredTails.UiHelpers Assembly : cs.temp.dll.dll Syntax public class UIGroups : MonoBehaviour Fields groups Declaration public List<UIGroups.UiGroup> groups Field Value Type Description List < UIGroups.UiGroup > instance Declaration public static UIGroups instance Field Value Type Description UIGroups lastActivate Declaration public string lastActivate Field Value Type Description String Methods NotifyDynamicPanel(CanvasGroup, String) Declaration public void NotifyDynamicPanel(CanvasGroup targetCanvas, string key) Parameters Type Name Description CanvasGroup targetCanvas String key ShowOnlyThisGroup(String) Declaration public void ShowOnlyThisGroup(string key) Parameters Type Name Description String key ShowOnlyThisGroupWithDeactivating(String) Declaration public void ShowOnlyThisGroupWithDeactivating(string key) Parameters Type Name Description String key"
  },
  "api/Timba.SacredTails.UiHelpers.UIGroups.UiGroup.html": {
    "href": "api/Timba.SacredTails.UiHelpers.UIGroups.UiGroup.html",
    "title": "Class UIGroups.UiGroup | Example Unity documentation",
    "keywords": "Class UIGroups.UiGroup Inheritance Object UIGroups.UiGroup Namespace : Timba.SacredTails.UiHelpers Assembly : cs.temp.dll.dll Syntax [Serializable] public class UiGroup Fields canvasOfGroup Declaration public List<CanvasGroup> canvasOfGroup Field Value Type Description List < CanvasGroup > key Declaration public string key Field Value Type Description String"
  },
  "api/Timba.SacredTails.UiHelpers.WoldPositionateUiElement.html": {
    "href": "api/Timba.SacredTails.UiHelpers.WoldPositionateUiElement.html",
    "title": "Class WoldPositionateUiElement | Example Unity documentation",
    "keywords": "Class WoldPositionateUiElement Inheritance Object WoldPositionateUiElement Namespace : Timba.SacredTails.UiHelpers Assembly : cs.temp.dll.dll Syntax public class WoldPositionateUiElement : MonoBehaviour Fields uiElement Declaration public GameObject uiElement Field Value Type Description GameObject"
  },
  "api/Timba.SacredTails.UiHelpers.WoldPositionUIHandler.html": {
    "href": "api/Timba.SacredTails.UiHelpers.WoldPositionUIHandler.html",
    "title": "Class WoldPositionUIHandler | Example Unity documentation",
    "keywords": "Class WoldPositionUIHandler This allow you to put UI elements attached to player view Inheritance Object WoldPositionUIHandler Namespace : Timba.SacredTails.UiHelpers Assembly : cs.temp.dll.dll Syntax public class WoldPositionUIHandler : MonoBehaviour Fields instance Declaration public static WoldPositionUIHandler instance Field Value Type Description WoldPositionUIHandler WorldPositionateUiElements Declaration public List<WoldPositionateUiElement> WorldPositionateUiElements Field Value Type Description List < WoldPositionateUiElement > Methods RegisterUiElement(WoldPositionateUiElement) Declaration public void RegisterUiElement(WoldPositionateUiElement target) Parameters Type Name Description WoldPositionateUiElement target UnregisterUiElement(WoldPositionateUiElement) Declaration public void UnregisterUiElement(WoldPositionateUiElement target) Parameters Type Name Description WoldPositionateUiElement target"
  },
  "api/Timba.SacredTails.VFXController.html": {
    "href": "api/Timba.SacredTails.VFXController.html",
    "title": "Namespace Timba.SacredTails.VFXController | Example Unity documentation",
    "keywords": "Namespace Timba.SacredTails.VFXController Classes VFXDestroyer VFXInstancer"
  },
  "api/Timba.SacredTails.VFXController.VFXDestroyer.html": {
    "href": "api/Timba.SacredTails.VFXController.VFXDestroyer.html",
    "title": "Class VFXDestroyer | Example Unity documentation",
    "keywords": "Class VFXDestroyer Inheritance Object VFXDestroyer Namespace : Timba.SacredTails.VFXController Assembly : cs.temp.dll.dll Syntax public class VFXDestroyer : MonoBehaviour"
  },
  "api/Timba.SacredTails.VFXController.VFXInstancer.html": {
    "href": "api/Timba.SacredTails.VFXController.VFXInstancer.html",
    "title": "Class VFXInstancer | Example Unity documentation",
    "keywords": "Class VFXInstancer Inheritance Object VFXInstancer Namespace : Timba.SacredTails.VFXController Assembly : cs.temp.dll.dll Syntax public class VFXInstancer : MonoBehaviour Methods GetVfx(Int32) Declaration public VfxInfo GetVfx(int vfxIndex) Parameters Type Name Description Int32 vfxIndex Returns Type Description VfxInfo GetVfxHitDelay(Int32) Declaration public float GetVfxHitDelay(int vfxIndex) Parameters Type Name Description Int32 vfxIndex Returns Type Description Single GetVfxIsReversed(Int32) Declaration public bool GetVfxIsReversed(int vfxIndex) Parameters Type Name Description Int32 vfxIndex Returns Type Description Boolean GetVfxIsReversed(VfxInfo) Declaration public bool GetVfxIsReversed(VfxInfo vfxInfo) Parameters Type Name Description VfxInfo vfxInfo Returns Type Description Boolean GetVfxTime(Int32) Declaration public float GetVfxTime(int vfxIndex) Parameters Type Name Description Int32 vfxIndex Returns Type Description Single GetVfxTime(VfxInfo) Declaration public float GetVfxTime(VfxInfo vfxInfo) Parameters Type Name Description VfxInfo vfxInfo Returns Type Description Single SpawnVFX(Int32, Vector3, Quaternion) Declaration public GameObject SpawnVFX(int vfxIndex, Vector3 position, Quaternion rotation) Parameters Type Name Description Int32 vfxIndex Vector3 position Quaternion rotation Returns Type Description GameObject Test() Declaration public void Test() Test2() Declaration public void Test2()"
  },
  "manual/0a.Introduction.html": {
    "href": "manual/0a.Introduction.html",
    "title": "First Steps | Example Unity documentation",
    "keywords": "First Steps Sacred tails is an NFT in which you battle in 1v1 turn-based battles with shinseis, a pet that you could fight with. In this tecnical documentation we will be reviewing all the systems that the game has in order for you to start right away implementing new functionalities. First of all let's see how to run the project Important information Info Value Main Git Brach Dev Unity Version 2020.3.23f1 Platform Windows Standalone Main scene Lobby_Scene"
  },
  "manual/0a.projectOrganization.html": {
    "href": "manual/0a.projectOrganization.html",
    "title": "Project folder organization | Example Unity documentation",
    "keywords": "Project folder organization It's important if you are recieving the project to know where each thing it's located. Currently the sacred tails folders that matter for development are these ones: _content Contains the character related prefabs and database Main folders: Database: Database of the shinsei prefabs, partSlots and partEntities. Skinned_Shinsei_Atlas: Prefab of the shinsei used in the game. Server Data: Data from the multiple scriptable objects, converted into json. This data will have to be moved to the server manually each time a database is changed in order for both client and server to have the same data. _SacredTails Main scripts folder, contains the majority of the functionalities. Lets break down the more simple modules: 3D Models : contains all the models and animations of the shinseis Character generator : Contains all the shinsei generation tool related scripts, assets and scenes. Enviroment_NT : Contains some enviroment assets. Scenes : All the main scenes of the game are found here. Service prefabs : Contains some prefabs to be used through the service locator. UI : All the UI related sprites animation and references are found here Now let's break down more in depth the complex folders: ⚔️Arena It's where all the battle and matches logic and assets are stored. Its divided into 3 folders prefabs, scenes and scripts. Each one is self-descriptive about what does it contains. Nonetheless, lets see the script folder in more detail: Audio integration : All the audio related logic integrated with wwise. Combat core : The main folder, contains all the essential scripts of the combat, such as the turnController, the battleGameMode, selection of shinseis, card logic, among others. Server Debug : Module for getting the information of the server and display it on the client by pressing \"F1\" while on a battle. TEST : Scripts used for testing different functionalities Tournament Module : Contains all the essential logic of the brackets tournament functionality. 🫂Lobby It's where all the lobby logic is found. Its divided into 4 folders art ,prefabs, scenes and scripts.The main development folder its the scripts one, it contains all the different modules of the lobby: Its pretty straigth foward in regards to the folder structure, it has everything organized in modules. So we will not be explaining each one right now, but here its how it looks: Audio integration : All the audio related logic integrated with wwise. Combat core : The main folder, contains all the essential scripts of the combat, such as the turnController, the battleGameMode, selection of shinseis, card logic, among others. Server Debug : Module for getting the information of the server and display it on the client by pressing \"F1\" while on a battle. TEST : Scripts used for testing different functionalities Tournament Module : Contains all the essential logic of the brackets tournament functionality. ❔Scripts It's where all the modules that doesn't necessarily have a relation with either the lobby or the arena. Its pretty straigth foward in regards to the folder structure, it has everything organized in modules. So we will not be explaining each one right now, but here its how it looks: _Timba Is where all the timba general patterns and utilities are located: Recolor for shinseis, Patterns such as the serviceLocator,URP settings, etc"
  },
  "manual/0b.sceneOrganization.html": {
    "href": "manual/0b.sceneOrganization.html",
    "title": "Scene organization | Example Unity documentation",
    "keywords": "Scene organization It's important if you are recieving the project to know how the scenes flow work and what are the main components of the scene. Scene Description Lobby_Scene Main game scene. Here its where the lobby and the battles exist. Bot_Scene Scene for bot testing both normal and tournament bots TournamentCreation Admin tool for creating new tournaments TestingVFX Test scene for vfx Lobby_scene -> Main Scene The lobby scene is the main scene of the game. In this single scene its where the whole main game happens. It's subdivided in 4 sections: UI Section UI section for all the UI canvas, elements and functionalities of the game that aren't dynamicly spawned, like for example the playerUI. Enviroment Section Section for all the 3D assets and enviroment effects that the game has. Includes some small logic like the NPC dialogues or the day an night enviroment change. But most of it is just assets. Scene Section This section manages all the camera and lighting components of the scene. Core Section The core section manages all the logic and flow of the game."
  },
  "manual/1.glosary.html": {
    "href": "manual/1.glosary.html",
    "title": "Glosary | Example Unity documentation",
    "keywords": "Glosary This part of the documentation will focus in the words that are in the SacredTails context, in order for you to understand more easily the documentation. Actors of the game Word Description Character Is the avatar of the player in the game. Shinsei The shinsei is the pet that you use to fight battles and that follows you on the lobby DNA/ADN The dna of a shinsei is a string that identifies the parts(body,ears,etc) and color of the shinsei Lobby systems Word Description Lobby Main place where the players interact with each other. Chat system Chat system that we can find in the lobby section Dialogue system System that allows the player to talk to the NPC's BackPack Main menu UI to access the main functionalities of the lobby Battle system Word Description Match 1v1 fight between 2 players where you pick 3 shinseis and use cards to try and kill all of the other player shinsei Turn The time span where the both players shinseis execute the actions in order to kill the other player shinsei Cards A card is a list of actions that a shinsei can use in a turn of a match Altered state State caused by a card, where every turn the shinsei execute an action Challenge system Challenge system to challenge directly other player in the lobby Brackets Tournament Tournament made of 1v1 matches, where you advance every match in brackets until a player win the tournament Server Word Description Playfab Cloud-Service that we use to store the data that we need for the game server, among other functionalities such as creating matches between the players, currency, etc Payload Data sent to the server Response Data received to the server AzureFunction Cloud service that allows us to proccess the data from playfab and execute an important functionality of the server SharedGroup Playfab service that we use to store the match and torunaments data Other Word Description Shinsei Generator Used to generate random shinsei combinations and the metadata, videos and dna of it."
  },
  "manual/2.lobbySystem.html": {
    "href": "manual/2.lobbySystem.html",
    "title": "Table of content | Example Unity documentation",
    "keywords": "Table of content The lobby system handles many funitionalities such as: Table of content Base system to see other players Lobby connection Sending and receiving data Lobby disconnection Connection data Chat system Recieving message Sending a message Bad word filter Challenge other player system See other player match system Back pack Dialogue system Shinsei interaction system Day and night cycle Bar"
  },
  "manual/2a.seeOthers.html": {
    "href": "manual/2a.seeOthers.html",
    "title": "Base system to see other players | Example Unity documentation",
    "keywords": "Base system to see other players Base system to see other players Lobby connection Sending and receiving data Lobby disconnection Connection data The base system to see other players is controlled by the LobbyNetworkingController.cs class. This class can be accessed from the ServiceLocator with the interface ILobbyNetworkManager.cs and is in charge of 3 functionalities: connect to the lobby, send/receive data from the players and disconnect the player. Lobby connection The connection to the lobby is done from the ConnectToLobby which needs the lobby index and the connection data and then playfab is in charge of sending who is entering to the azure server with this data. It also receives a Connection ID in the Cloud Script response, which is used to detect if the current connection is the most recent one. Sending and receiving data The sending and receiving of data is done every X seconds in the function TickCheck() . This method is in charge of sending the connection-data of the user and process locally those of the other users. Here we do things like instantiate new players, handle disconnection for not moving for a certain period of time, format the character style, display messages to the user with their respective tags and receive/send challenges from/to other players. Lobby disconnection When exiting the application, in an OnApplicationQuit, a call is made to perform the disconnection on the server. This request only needs the lobby index, then the playfab call send this lobby index with the players id so it can disconnect it from the game. Connection data The data used in the lobby system are the following: Name Type Description connectionId uint Id of connection to the lobby, this id is generated when the connection is made and is checked to see if the connection has not been opened in another instance. If this is the case, the old instance is closed. displayName string Nickname of the user playerPosition {x:float, y:float, z:float} x,y,z position of the users in the game. chatMessages {message:string,timesStamp:string,id:int} User's chat message arrangements. shinseiCompanionDna string Dna of the company shinsei, to show it in the game characterStyle string Players character style code. characterState int Player's state (backpack, combat, lobby, etc). currentMatchId string If in a match, it is the id of the current match, otherwise is empty. challengedPlayer string Id that identifies if the player has challenged someone, or cancelled a challenge."
  },
  "manual/2b.chatSystem.html": {
    "href": "manual/2b.chatSystem.html",
    "title": "Chat system | Example Unity documentation",
    "keywords": "Chat system The chats system flow has three parts: sending messages, recieving messages and the bad word filter. Chat system Recieving message Sending a message Bad word filter Recieving message Recieving message flow starts when the lobby gets the messages from the player, in the ManageLobby() method inside the LobbyNetworkingController.cs . Basically, it order the messages by their timestamp and then send them in the chat textbox with the ChatTextBox.cs ... List<ChatMessagePayload> chatMesssagesSorted = item.Value.chatMessages?.OrderBy(o => o.timeStamp).ToList(); if (chatMesssagesSorted != null) foreach (var chatMessage in chatMesssagesSorted) chatTextBox.SendMessage(chatMessage, item.Value.displayName, item.Key.Equals(\"54BB079356042E83\")); ... The SendMessage() methods sends the message verifiyng if it's already writter, has bad words or if it's an admin. public void SendMessage(ChatMessagePayload chatMessage, string displayName, bool isAdmin = false) { if (alreadyWriteMessages.Contains(chatMessage.id)) return; if (PlayerPrefs.GetInt(\"BadWordFilterOption\", 1) == 1) chatMessage.message = CheckForBadWords(chatMessage.message); alreadyWriteMessages.Add(chatMessage.id); if (isAdmin) AddText($\"<color=red>[ADMIN] </color>: {chatMessage.message}\"); else AddText($\"<color=#EFEBCE>[Server] ({displayName}): {chatMessage.message}</color>\"); } Sending a message The SendLocalMessage method handles the sending of a message in the chat. Checks if has bad words, check if it's directed to someone and then add it to the list of messages of the player in order to send it on the next update of the server. public void SendLocalMessage() { if (String.IsNullOrWhiteSpace(chatInput.text)) return; if (PlayerPrefs.GetInt(\"BadWordFilterOption\", 1) == 1) chatInput.text = CheckForBadWords(chatInput.text); // Whisper verification if (!chatInput.text.Contains(\"/r \")) AddText($\"<color=#DFDBC0>[Server] ({PlayerDataManager.Singleton.localPlayerData.playerName}): {chatInput.text}</color>\"); else { string[] trimText = chatInput.text.Split(' '); AddText($\"<color=#E146CD>[To] ({trimText[1]}): {(chatInput.text).Replace(\"/r \" + trimText[1],\"\")}</color>\"); PlayerPrefs.SetString(\"LastWhisper\", trimText[1]); } //Add to list of player messages in order to send it on the next update of the server. PlayerDataManager.Singleton.localPlayerData.currentChatMessages.Add(new ChatMessagePayload() { message = chatInput.text, timeStamp = DateTime.UtcNow.ToString(\"o\", CultureInfo.InvariantCulture) }); chatInput.text = \"\"; chatInput.Select(); chatInput.ActivateInputField(); } The server only conserves the messages for X time and then deletes them from the player in order to not store huge amounts of data. Bad word filter The bad world filter takes a dictionary previosly initialize from a json file and takes the message and check if the message contains a word that is a bad word in any of the languages and return the messages with the bad words filtered. public ChatBadWordsDB badWordsDB; public struct ChatBadWordsDB { public List<List<string>> listOfBadWords; } public string CheckForBadWords(string message) { string[] messageWords = message.Split(' '); for (int i = 0; i < messageWords.Length; i++) { string word = messageWords[i]; foreach (List<string> languageBadWords in badWordsDB.listOfBadWords) { if (languageBadWords.Contains(word.ToLower()) ) { messageWords[i] = \"****\"; break; } } } string resultAfterFilter = \"\"; foreach (var word in messageWords) resultAfterFilter += $\"{word} \"; return resultAfterFilter; }"
  },
  "manual/2c.challenge.html": {
    "href": "manual/2c.challenge.html",
    "title": "Challenge other player system | Example Unity documentation",
    "keywords": "Challenge other player system Challenges takes the form of a variable called challengedPlayer. This variable is in the user lobby server data and can have 3 available values: \"PLAYFABID_OTHERPLAYFABID_RANDOMNUMBER\": This value refers to a challenge made from one player to other. This value will also be used as the matchId of the match. \"CANCELED\" : This value refers to a player that canceled a challenge that someone else did to him. \"\": Empty message, player isn't sending challenge to anybody. In the ChallengePlayer.cs class most of the logic of this functionality is executed. For example, the CheckChallenge() handles both recieving and initiating a combat. Basically, it checks if the player can recieve or challenge someone and if so then it created the matchId and then creates the match sending to the server the petition to create it. Then it waits for the other player to confirm the match. Then once it's confirmed they both enter to the shinsei selection screen. The game checks the server to see the challenges and responses of other players in the LobbyNetworkingController.cs , more precisely in the PlayerChallengeVerification() . This method is executed in local for every player in order to check if any player has a challenge for the local player or to know if the player has a challenge to other player. Let's see a pseudocode of the method: //WARNING: PSEUDOCODE not real code public void PlayerChallengeVerification(KeyValuePair<string, LobbyPlayerBasePayload> item) { // We check if the challenge variable on server has any value. if (!emptyChallenge) { // If the challenge on the player hasn't change since the last time we check the server data // And if the other challeged player has a \"CANCEl\" in his challenge variable. if (isMatchSameAsLastOne && challengedPlayerCanceledMatch) { // We proceed to cancel the challenge and erase both players challenge variable in this player local data. if (isLocalPlayer) { // Erase challenge data on local and send it to the server PlayerDataManager.Singleton.localPlayerData.challengedPlayer = \"\"; TickCheckActivates(); } currentPlayersAvatar[item.Key].challengePlayerController.MatchCanceledByChallenged(isLocalPlayer); currentPlayersAvatar[playfabIdChallengedPlayer].challengePlayerController.MatchCanceledByChallenged(isLocalPlayer); } else if (isCurrentPlayer && canceledAlreadyProcessed) { // If it has a \"CANCEL\" value on local player challenge variable and the canceled was already processed. // We erase the \"CANCEL\" to a \"\" and send it to the server. PlayerDataManager.Singleton.localPlayerData.challengedPlayer = \"\"; TickCheckActivates(); } else if (currentPlayerHasChallenge) { // If there is a challenge for me call the challenge player controller // to open a popup with the challenge currentPlayer.challengePlayerController.RecieveChallenge(currentPlayersAvatar[item.Key], randomMatchNumber); } } }"
  },
  "manual/2d.see other players.html": {
    "href": "manual/2d.see other players.html",
    "title": "See other player match system | Example Unity documentation",
    "keywords": "See other player match system We can see other player battles by clicking on the swords icon that appears above the lobby users if they are on a match. This button will activate the ViewMatch() method in the PlayerUI.cs . This method will show a popup and then if it's confirmed, then we proceed to create a match with the currentMatchId of that player. The match will take a special route on the creation ensuring that the data necesary for the battle to be created is filled, or at least a template while the data arrives from the server. Let's take a look at an example of this in the SendBattle() from GameSceneManage.cs . GameSceneManager.cs public void SendBattle(..., bool isViewing) { ... BattleGameMode battleInstance = combatInstance.GetComponent<BattleGameMode>(); if (getMatchResult != null) { PlayerDataManager.Singleton.localPlayerData.currentMatchId = getMatchResult.MatchId; battleInstance.OnStartMatch(getMatchResult); } else { // This is the case when it viewing, it initializes the data PlayerDataManager.Singleton.localPlayerData.currentMatchId = matchId; battleInstance.isViewingMatch = isViewing; BattleViewerController battleViewer = combatInstance.GetComponent<BattleViewerController>(); battleViewer.Initialize(matchId, isViewing); } ... } BattleViewerController.cs public void Initialize(string matchId, bool isViewing) { //This is just template data that will later be filled by the server data of the match. battleGameMode.localCombat = new Combat() { CurrentTurn = 0 }; battleGameMode.playerInfo.userIndex = 0; battleGameMode.enemyInfo.userIndex = 1; battleGameMode.playerInfo.isLocalPlayer = true; battleGameMode.enemyInfo.isLocalPlayer = false; battleGameMode.localCombat.MatchData.MatchId = matchId; battleGameMode.localCombat.MatchData.MatchPlayers = new System.Collections.Generic.List<CombatPlayer>() { null, null }; if (isViewing) battleGameMode.WaitForOpponentToSelectViewMatch(); else battleGameMode.StartCoroutine(battleGameMode.WaitForOpponentToSelect()); } Then we continue the normal flow of the game by sending the flow to the WaitForOpponentToSelect() . When this data arrive we override the template with this data and then continue the normal flow of the game."
  },
  "manual/2e.backPack.html": {
    "href": "manual/2e.backPack.html",
    "title": "Back pack | Example Unity documentation",
    "keywords": "Back pack Back pack Shinsei Vault System Shinsei Card exchange system Character Customization system MaterialReskin.cs CharacterRecolor.cs BodyStyle.cs Shinsei Vault System The data of the shinsei vault it's recieved or created and uploaded by the PlayerDataManager.cs . In the InitPlayerData() we check if we already have data in playfab to download, if we do we download it and set it. If we don't we use the method FillPlayerData() to create new data for the player, including the shinsei vault. The class ShinseiVaultController.cs it is the manager class of the majority the shinsei vault logic in game. The flow starts when the user request to see the shinsie vault. The vault is drawn an set with the data of the user that is located in the PlayerDataManager.cs . Upon this, we create a callback to the method OnVaultShinseiSelected() where we basically select it and then store it in a temp shinsei, if we select another shinsei then we swapped them and update the player data in the server. Shinsei Card exchange system The data of the shinsei's(and also it's cards) it's recieved or created and uploaded by the PlayerDataManager.cs . In the InitPlayerData() we check if we already have data in playfab to download, if we do we download it and set it. If we don't we use the method FillPlayerData() to create new data for the player, including the shinsei. CardManagementController.cs it's the class that manges all the shinsei card visualization and exchange. The flow starts in the method InitCardManager() where it initalizes all the cards in the inventory and all the cards on the shinseis. Also sets some information like the shinsei type in the background and the images and stats of the shinseis. Then in this same class we use a vairaty of methods like AddCardInDeck, RemoveCardInDeck, AddSelectedCard, etc to basically interchange the cards from the vault . Character Customization system In sacred tails you can customize your character in a few of forms The first form is Genre, you can choose between male and female Male: Female: Also you can change the color of clothes and model, in this first implementation only exist one sweat for each genre but the system works. This system works using a single material that replicates over all parts of character avoiding big number of batches when render multiple players at time The input values for this material is injected by script, the textures are injected using a script called MaterialReskin.cs MaterialReskin.cs The most important part of MaterialReskin.cs is the Init function, first create a texture and store in a list, first Difuse then normal, metallic and finally Ambien Oclusion after that create a new material and asign the new created textures, initialize the CharacterRecolor and apply that material to all parts of character like a torso, head, legs and arms ... public void Init() { mergeTextures.Add(new Texture2D(skinList[0].Difuse.width, skinList[0].Difuse.height, skinList[0].Difuse.format, true)); mergeTextures[0].SetPixels(skinList[0].Difuse.GetPixels()); mergeTextures.Add(new Texture2D(skinList[0].Normal.width, skinList[0].Normal.height, skinList[0].Normal.format, true)); mergeTextures[1].SetPixels(skinList[0].Normal.GetPixels()); mergeTextures.Add(new Texture2D(skinList[0].Metallic.width, skinList[0].Metallic.height, skinList[0].Metallic.format, true)); mergeTextures[2].SetPixels(skinList[0].Metallic.GetPixels()); mergeTextures.Add(new Texture2D(skinList[0].AmbientOclusion.width, skinList[0].AmbientOclusion.height, skinList[0].AmbientOclusion.format, true)); mergeTextures[3].SetPixels(skinList[0].AmbientOclusion.GetPixels()); horizontalTextureSize = mergeTextures[0].width / horizontalSplitParts; verticalTextureSize = mergeTextures[0].height / verticalSplitParts; //Create new material Material material = meshRenderers[0].material; material.SetTexture(mainTexture, mergeTextures[0]); material.SetTexture(normalMap, mergeTextures[1]); material.SetTexture(metallicGloss, mergeTextures[2]); material.SetTexture(ambientOclussion, mergeTextures[3]); material.EnableKeyword(\"_NORMALMAP\"); targetMaterial = material; characterRecolor.Init(targetMaterial); //Apply new material to all parts :D for (int i = 0; i < meshRenderers.Count; i++) meshRenderers[i].material = targetMaterial; //Verify if split numbers are even if (horizontalSplitParts % 2 != 0) horizontalSplitParts += 1; if (verticalSplitParts % 2 != 0) verticalSplitParts += 1; //Add the position of textures in a list for (int i = 0; i < horizontalSplitParts; i++) for (int a = 0; a < verticalSplitParts; a++) texturePosition.Add(new Vector2Int(i * horizontalTextureSize, a * verticalTextureSize)); isInit = true; } ... CharacterRecolor.cs Character recolor is in charge of set the _NewColor Parameters of material in a human conversion, first create a dictionary of convensions from PartOfCharacter to string and will be called using ChangeMaterialColors function, receives a part of character and desired color public class CharacterRecolor : MonoBehaviour { private Dictionary<PartsOfCharacter, string> materialColor = new Dictionary<PartsOfCharacter, string>() { {PartsOfCharacter.SKIN,\"_NewColor1\"}, {PartsOfCharacter.HAIR,\"_NewColor2\"}, {PartsOfCharacter.PRIMARY_COLOR,\"_NewColor3\"}, {PartsOfCharacter.SECONDARY_COLOR,\"_NewColor4\"}, {PartsOfCharacter.DETAILS,\"_NewColor6\"}, {PartsOfCharacter.HANDS,\"_NewColor5\"}, {PartsOfCharacter.LEGS,\"_NewColor5\"} }; private List<Material> newMaterials = new List<Material>(); public void Init(Material target) { if (!newMaterials.Contains(target)) newMaterials.Add(target); if (lastColor != null) ChangeMaterialColors(lastPart, lastColor); } private PartsOfCharacter lastPart; private Color lastColor; public void ChangeMaterialColors(PartsOfCharacter part, Color color) { lastPart = part; lastColor = color; foreach (var material in newMaterials) material.SetColor(materialColor[part], color); } } Each part of character have a UI panel designed for change material values by user and replicate that to all players Skin manipulate the _NewColor1 parameter of material using predesigned values but you can use any value that you need Color manipulate the other parameters that be asigned to the clothes and details And finally the charge of change 3D models is BodyStyle.cs public class BodyStyle : MonoBehaviour { public List<BodyPartDressable> bodyParts = new List<BodyPartDressable>(); [System.Serializable] public class BodyPartDressable { [SerializeField] string name; [SerializeField] PartsOfCharacter part; [SerializeField] List<GameObject> possibleParts = new List<GameObject>(); [SerializeField] List<GameObject> possiblePartsMale = new List<GameObject>(); public void SelectObject(int index, bool isLocal = false) { for (int i = 0; i < possibleParts.Count; i++) possibleParts[i].gameObject.SetActive(false); possibleParts[index].SetActive(true); for (int i = 0; i < possiblePartsMale.Count; i++) possiblePartsMale[i].gameObject.SetActive(false); possiblePartsMale[index].SetActive(true); if (isLocal) CharacterStyleController.UpdatePartOfCharacter(part,index); } } } This script store the all posible parts of character and allow to change them using the function called SelectObject The change hair is an example of Body Style The combination of all systems allow the player change style"
  },
  "manual/2f.dialogueSystem.html": {
    "href": "manual/2f.dialogueSystem.html",
    "title": "Dialogue system | Example Unity documentation",
    "keywords": "Dialogue system Dialogable Conversation DialogGraph Dialogue system This dialog system has two main actors, Conversations and Dialogables Dialogable A dialogable is a component that allow you show conversations in the player screen the most important parts are Start Conversation This function first hide the player personal UI like a name and icon, later block player movement, change the camera view to this dialoguer camera and start the conversation routine depending of firstDialog variable ... public void StartConversation() { ServiceLocator.Instance.GetService<ILobbyNetworkManager>().ShowPlayerPersonalUI(false); if (dialogUI.IsPlayerDialogate) return; if (UIGroups.instance != null && !UIGroups.instance.lastActivate.Equals(\"planner\")) return; isOnDialog = true; thirdPersonController.CanBeBlocked = true; thirdPersonController.IsMovementBloqued = true; thirdPersonController.CanBeBlocked = false; dialoguerCamera.SetActive(true); canvas.SetActive(false); dialogUI.gameObject.SetActive(true); if (UIGroups.instance != null) UIGroups.instance.ShowOnlyThisGroup(\"dialogue\"); ServiceLocator.Instance.GetService<ILobbyNetworkManager>().CurrentPlayer.GetComponent<PlayerUI>().HideNameTag(false); if (firstDialog && firstConversation.dialogGraph != null) { PlayerPrefs.SetInt(playerPrefVar, 0); firstDialog = false; StartCoroutine(firstConversation.ConversationRoutine(dialogUI, EndConversation, this)); } else { StartCoroutine(conversation.ConversationRoutine(dialogUI, EndConversation, this)); } } ... Conversation This class keep the logic of conversation, store the dialogs and answers and show them to the player by UI elements The most important function is the coroutine ConversationRoutine First notify the player is dailogating then clear dialog UI and their components after that check if you use a special code <!Index!> to launch a callback and start to write dialog in the screeen If find a answer dialog, draw responses in the screen and start wait to the player confirmation using the SendResponse function At the end of all dialogs and responses, trigger the EndConversationCallback and leave the execution public IEnumerator ConversationRoutine(DialogUI dialogUI, Action EndConversationCallback = null, Dialogable targetDialogable = null) { dialogUI.IsPlayerDialogate = true; Init(dialogUI, EndConversationCallback); while (true) { string dialogText = currentNode.dialogText; //Get actions inside texts if (currentNode.dialogText.Contains(\"<!\")) { string[] dialogParts = dialogText.Split(new string[] { \"<!\" }, StringSplitOptions.RemoveEmptyEntries); string splitedDialog = dialogParts[1]; splitedDialog = splitedDialog.Split(new string[] { \"!>\" }, StringSplitOptions.RemoveEmptyEntries)[0]; if (targetDialogable != null) targetDialogable.CallbackEvents[int.Parse(splitedDialog)].Invoke(); dialogText = dialogText.Replace($\"<!{splitedDialog}!>\", \"\"); //TODO fix this later for more cases in this case if you use callback by dialog the dialog close inmediately EndConversationCallback?.Invoke(); EndConversationCallback = null; dialogUI.gameObject.SetActive(false); dialogUI.IsPlayerDialogate = false; break; } dialogUI.WriteText(dialogText, NotifyPlayerReadText, currentNode.Answers.Count > 0); while (true) { if (isPlayerReadText) { isPlayerReadText = false; break; } yield return null; } NodePort port; if (currentNode.Answers.Count < 1) //Take default node port = currentNode.GetPort(\"output\"); else //Take answer node { isWaitingResponse = true; while (isWaitingResponse) yield return null; port = currentNode.GetPort(\"Answers \" + responseIndex); } if (port != null && port.IsConnected) UpdateDialog(port.Connection.node as DialogNode, dialogUI, EndConversationCallback); else break; yield return null; } EndConversationCallback?.Invoke(); dialogUI.gameObject.SetActive(false); dialogUI.IsPlayerDialogate = false; } All data for conversations is stored in a class called DialogGraph Dialog graph is a Custom ScriptableObject made with XNode, you can write conversation visually easy Each Dialog Graph contains multiple DialogNode Input and Output node controls de dialog flow, if output is empty and the node has'nt responses the conversation end. A: Input B: Output C: Dialog Text (Here you can put the text of conversation) D: Responses (Each response has her own output node for conversation flow)"
  },
  "manual/2g.shinseiInteraction copy.html": {
    "href": "manual/2g.shinseiInteraction copy.html",
    "title": "Shinsei interaction system | Example Unity documentation",
    "keywords": "Shinsei interaction system The pet interaction system contains is a simple script called PetInteraction that allow you to play animations in companion Shinsei. The user interact with the script using a pie menu and function PlayAnimation(index) when index is index of animation The script stores multiple animations and setup the enviroment for the correct visualization, stop the player, Hide innecesary elements and show petting UI"
  },
  "manual/2h.dayNightCycle.html": {
    "href": "manual/2h.dayNightCycle.html",
    "title": "Day and night cycle | Example Unity documentation",
    "keywords": "Day and night cycle The day and night cycle is managed by the class The script simulates the passing of time in the game with calculations to make the day last 3 hours. So every 3 hours in the real world 1 day passes in the game. The script initializes by calling an api(worldtimeapi.org) to get the current time. Once the API call returns, the script parses the response to extract the current hour and minute, and uses that to calculate the current time in the game (from 0 to 24). This logic is only execute once at the beginning of the game to ensure the players have the same hour in all their local clients. For the rest of the game, the time is updated every 60 seconds. Every 60 seconds we add .125 hours to the current time, in order to preserve the ration of 3hous/day."
  },
  "manual/2i.bar.html": {
    "href": "manual/2i.bar.html",
    "title": "Bar | Example Unity documentation",
    "keywords": "Bar Drinking and eating system Bar The bar is the lastest update on the game. It functions as a reunion site to drink/eat, watch shinsei fights and check tournaments. Let's see those functionalities in more details Drinking and eating system This system is basically a specific NPC interaction for that reason the charge script is called Cooker.cs, this script store references to the NPC animator Cooker and other props like a ber or eat plate, when character interact start to play a coroutine that play secuencially animations, show and hide objects for make the illusión of interaction, using a callback of dialogue turn on a script that show the animation pending of response of character in this case give a beer of serving a plate of food. For decoration the bar also have a Sit system when you can see other players sitdown or you can sitdown in the chairs of bar, this system works using nearness, the first character that touch the sit can use the other player will be ignored, for reason of delay of server you can see different things when you see from one client or other, the chair always align their forward direction to the character."
  },
  "manual/2j.lobbyServer.html": {
    "href": "manual/2j.lobbyServer.html",
    "title": "Lobby Server | Example Unity documentation",
    "keywords": "Lobby Server A large part of the lobby processing is done via server, this is responsible for saving and delivering the positions of all players. The first step to be part of a lobby is to connect ConnectToLobby Connect to lobby first checks that the player who is trying to connect is using the latest version of the game to avoid corrupting data to other players, then it checks if the ID provided is truly a lobby and if it is, it checks if it has space for more players. When connecting, it checks if the player has ELO among his data, if not, it sets the default ELO value and informs the player that he was able to connect correctly. SendGetData SendGetData from lobby basically sends the lobby data of the player, the chats, the position, the current shinsei, etc. and also brings all the lobby data to return this data to the client in order for him to update his local lobby. DeletePlayer DeletePlayer function its a very basic function that just disconnects the player from the respective lobby. Other Server Side Functions ReportBug This function allows users to send a bug report through a small form and a button, which includes a screenshot of the user. Let's look at the pseudocode. module.exports = function (context, req) { try { UploadReport(matchId + \":\" + date.getTime() + \":\" + playFabId, picture, message, context) } catch (err) { CatchError(context, { code: 404, message: \"Unexpected error on bug report\", data: null }); } } function UploadReport(code, picture, message, context) { //Organize the parameters into the data object let debugData = {}; debugData[code] = ...; //Update the sharedgroup Bugs data let reportBugRequest = { SharedGroupId: \"Bugs\", Data: debugData } PlayFabServer.UpdateSharedGroupData(reportBugRequest, (error, result) => { if (error != null) { // Return error to client... return; } // Return success to client }); }"
  },
  "manual/2k.tournament.html": {
    "href": "manual/2k.tournament.html",
    "title": "Torunament system | Example Unity documentation",
    "keywords": "Torunament system The tournament system is a complex system that has to handle multiple cases and states of the users in order to garantee a correct flow of the tournament. We have to check the state of the whole tournament and the state of each bracket. The state of the players if they are ready or not to fight. The disconnection of players. A lot of variables to take in consideration. Here is a general flow of the system: 🥇🏠Tournament system unity We start by requesting the tournament list in the bar. We request and display them with the SearchAndShow.cs filtering the ones that hasn't finished yet and then let the user decide one of them. Once the user decides we execute the JoinTournament() in the TournamentSlot.cs . If the joining was a success, we proceed to hide all the things that should be hidden in a tournament such as searching for matches or changing the shinseis position in our vault. Then we start the timer to wait for the tournament to initiate in the ShowTimerInitTournament() of the TournamentReadyController.cs . This method checks if the tournament has started already, if it doesn't then it proceeds to show the countdown to initiate the tournament. If it has, proceeds to show the ready button for the player to start his current match in the tournament with the StartReadyButton() . This method sets the timer to get ready for the match before a disqualification. If the players clicks on the ready button then the MarkAsReady() method start to execute every X seconds. This method will send a petiton to the azure server to check if the other player also accepted the match. In this method we also check if the player won by default and, if so, then we proceed to show him the time left for the next round to begin with the ShowPendingTimeAfterMatch() . Otherwise, if the two players get ready for the match, the match starts. Once they finished the match we proceed to check the tournament state every 3 seconds with the method CheckTournamentState() of CheckTournamentState.cs . In this method we send a petion to the server and in it's response we check a variaty of states, ranging from winner of tournament, second place, loser of match and finally winner of match. It's this last case, were we show the player the ShowPendingTimeAfterMatch() method from before, so that he can see the time to end the match. But we keep asking the server if the round has ended before time(if all players have already played their matches). If so then we show again the [StartReadyButton()] and the cycle begins again until there is a winner in the tournament. 🥇🌐Tournaments system server Sacred tails allows the creation of a Knock Out tournaments between players in the form of elimination. Create Tournament This function creates a sharegroup and initializes the necessary values to add a user to this tournament. module.exports = function (context, req) { PlayFabServer.CreateSharedGroup(request, (error, result) => { if (error !== null) { // Return error to client... return; } request[\"Data\"] = { initTimeStage_1: ..., tournamentName: ..., maxPlayer: ..., tournamentDuration: ..., currentStage: 0 }; PlayFabServer.UpdateSharedGroupData(request, (error, result) => { if (error !== null) { // Return error to client... return; } // Update also the data in the available tournament playerData // In order to the client to later get the tournament list requestData[tournamentId] = JSON.stringify(displayTournamentData); let displayRequest = { PlayFabId: availableTournamentPID, Data: requestData } PlayFabServer.UpdateUserData( displayRequest, (error, result) => { if (error !== null){ // Return error to client... return; } // Return success to client... }); }); }); } These are the possible responses for the Create Tournament function: Code Success Message Data 0 true 'Tournament Created' tournamentData 1 false 'Could not set display data tournament' null 2 false 'Could set data of tournament' null 3 false 'Could not create tournament' null 20 false 'Please send valid data' null *Tournament data example: { \"TD-6-123\": { \"initTimeStage_1\": \"2022-12-30T19:44:30.000Z\", \"tournamentName\": \"PRUEBA\", \"maxPlayer\": 8 } } Get Tournament List With this function, users from the game can see which tournaments are active at the moment and request to join them by code. When a tournament is created, a fake user is added that saves the existing tournaments in its keys, this function downloads all these keys, filters them by hour and displays them. module.exports = function (context, req) { let getTounrnamentDataRequest = { PlayFabId: availableTournamentPID } PlayFabServer.GetUserData(getTounrnamentDataRequest, (error, result) => { if(error != null){ // Return error to client... return; } // Get all the available tournaments data and add it the torunamentId as part of the data let data = []; Object.keys(result.data.Data).forEach(key => { let tournamentData = JSON.parse(result.data.Data[key].Value); tournamentData.tournamentId = key; data.push(tournamentData); }) //Return data to client }); } These are the possible responses for the GetTorunamentList function: Code Success Message Data 0 true \"here is all tournaments\" tournamentList* 404 false err.data 20 false 'Please send valid data' null *TournamentList beign a list of tournaments like these: { [ ... { \"initTimeStage_1\": \"2023-01-23T21:45:45Z\", \"tournamentName\": \"TName\", \"maxPlayer\": 4, \"tournamentId\": \"TName_1UVLDn9TZb3\" }, ... ] } Get Brackets Data Tournaments have their own function to check the state of the tournament at certain times and that function is this. The first thing it does is check if this function was called by both players, the player can call it using the ready button within the game, when the function is called it verifies the maximum time limit to notify that it is ready and if one of the two has not called the function, the one who did wins, and if neither of them called it, the game decides that there will be a default winner in the next bracket. The first time a request arrives where both are marked as ready, the lobby is notified that a fight is ready and what the match ID of that fight is for the tournament, then both players enter a fight. After everything is processed like in a normal game, the game notifies that there was a winner and the winning player stays calling the function GetCurrentBracketsData These are the possible responses for the GetBracktsData function: Code Success Message Data 0 true \"Players are ready\" bracketData 1 false \"Other player is not ready\" bracketData 2 false \"Player already marked as ready, other player is not ready yet\" bracketData 3 false \"Check ready state success\" bracketData 4 false \"Tournament hasn't started yet\" null 5 false \"Could not send ready to tournament\" null 20 false 'Please send valid data' null *Being bracketData something like this: { \"PID1\": \"B2DF0D8F88E6053E\", \"PID2\": \"2C332300EEA8B647\", \"matchId\": \"T97_B2DF0D8F88E6053E_2C332300EEA8B647\", \"p1Joined\": true, \"p2Joined\": true, \"displayName1\": \"jiufen\", \"displayName2\": \"dardranight\" } Get Current Brackets Data In this function, the server verifies that all games have a winner in order to proceed to update the state of the tournament and create the next branches. These are the possible responses for the GetBracktsData function: Code Success Message Data 0 true \"Getting current stage brackets success\" stageBracketsData 2 true \"The tournament has not begun\" null 1 false \"Error getting current stage of tournament\" null 3 false \"Error getting brackets\" null 4 false \"Error getting usersData\" null 20 false 'Please send valid data' null *Being stageBracketsData a list of stages with brackets like this: { \"stages\": { \"stage_1\": { \"brackets\": { \"bracket_1\": { \"PID1\": \"jiufen\", \"PID2\": \"dardranight\", \"matchId\": \"T-2-1_B2DF0D8F88E6053E_2C332300EEA8B647\", \"p1Joined\": false, \"p2Joined\": false }, ... } }, \"stage_2\":{ ... } } }"
  },
  "manual/3a.battleSystem.html": {
    "href": "manual/3a.battleSystem.html",
    "title": "Battle system | Example Unity documentation",
    "keywords": "Battle system The system is basically composed of 3 pillar controllers: The GameSceneManager.cs : Which receives the request to create a match and configures the initial data needed to start the battle. The BattleGameMode.cs : Which handles general game information such as player information and also handles game status such as the start and end of the game. The TurnsController.cs : The main controller of the game. It handles the logic of the individual turn and turn flow. Let's look at each of them in more detail. GameSceneManager.cs This class sends a petiton to create a new battle with the SendBattle method. It is necessary to pass it the necessary data such as the matchId of the game, the current shinseis of the players and their stats. After that, it creates an instance of the battle, changes the player status in the database to combat and turns off the unnecesary open windows at the moment. After that it passes the flow to the BattleGameMode.cs with all the necessary data to start the battle. On the other hand, when the battle is over, this is the controller that returns us to the lobby with the EndBattle method, showing again the lobby UI and deleting the battle instance. BattleGameMode.cs In the battle game mode we have the pre-battle flow and displaying of the end of battle . We also handle here the general data of the users in the battle. We start in the OnStartMatchRoutine() method once the data is initialised, with the initialisation of the pre-battle shinseis selector. These are handled by controllers such as the ArenaShinseiSelectionController.cs and the ArenaShinseiSelectionUserPanelController.cs which handle the entire flow of viewing and choosing the shinseis for the battle. Once chosen, it notifies BattleGameMode.cs with the shinseis that were chosen or with the fact that time is up and no shinseis were chosen. If they were indeed chosen, it proceeds to send the indices of the chosen shinseis to the server via a CloudScript . Then the flow proceeds to wait for the other player to choose with the method WaitForOpponentToSelect() and once this is done it initializes the data of the chosen shinseis, the life and energy bars, the shinsei change system and spawn the shinsei . After this it continues with the start-up cameras, which show the shinseis from the front and finally once those cameras finish showing the shinseis, the UI is initialised. From here, the TurnsController.cs will control the rest of the flow of the battle. Once the match is over the BattleGameMode.cs will return to the BattleGameMode.cs method to display the result screen. TurnsController.cs This class handles the flow of the battle once it has started. It initialises along with the BattleGameMode.cs and initialises the Battle Actions dependencies. Then we continue the flow with each turn start in the InitTurnFlow() method. Every time a turn starts we check if the player is sleeping or not in order to run the animation and send a mandatory turn skip to simulate the sleeping state. This is a temporary solution that should be changed to a BattleAction, but for the moment it is like this. Send Turn Then the flow continues when the player decides to send an action with the SendTurnRequest method, either one of his cards, a shinsei change, a skip turn or a surrender. All these actions are sent with an index as follows: 0,1,2,3 => Shinsei attacks in that respective order. 4,5,6 => Change to the respective shinsei (i.e.: 4 -> first shinsei) 7 => Skip Turn 8 => Surrender The index is sent to the server via a CloudScript . If the request fails it is reentered by sending the turn up to a maximum of 7 times. After that it is considered a disconnection of the player who could not send the turn. Also the case when for whatever reason the match is over according to the server is taked into account too. In this case BattleGameMode.cs is called to end the match on the client. In case everything works correctly, we continue to wait for the other player's turn. Receiving turns from the two players The method WaitOponentTurn() helps us to wait for the opponent's turn by sending a CloudScript every X seconds, where X is the time defined by parameter (i.e: 3seconds). This request performs all the necessary calculations in the server for it to process and I have a snapshot of the game with those turns processed. Then once this process is finished, it returns the turns of the two players so that the client processes the turns itself . This method handles and delegates from end-of-game to the processing of altered states, terrain and BattleActions. As for Terrain , these are stored in the BattleGameMode.cs and can only exist one at a time . Each terrain has its own controller which inherits from the BattleTerrainBehavioursBase . A similar thing happens with altered states , only instead of being stored in BattleGameMode.cs per se, they are stored in the specific shinseis that have the altered states. But these can be multiple per shinsei. They are all controlled by classes that inherit from BattleAlteredStateBase . The processing of the current player's altered state and battleActions** is encapsulated in an event or Action that is passed to the InitTurnFlow() method. This method, with the help of the server response, determines who starts the turn first and whether or not the other player can execute the turn due to being dead or asleep. This method handles the timing based on an action time that is defined at the start of the execution of the Altered States and Battle Actions . After defining the time for the InitTurnFlow() to wait, these are executed with their vfx and cameras. Battle Actions The battle actions are executed with the help of the method CalculateIncomingActions() . This method executes the Battle Actions in the order in which the player has received them from server. These battle actions vary from an attack, a heal, a buffdebuff, setting up altered states or terrain, etc. Each of these actions has a controller that inherits from BattleActionsBase . This base runs the vfx with its timings so that its inheritance only cares about the logic of the action like updating the healthbars or changing the shinsei. As we said before the vfx time is sent to the turns controller so the InitTurnFlow() method can control the waiting time for the skills to finish executing their vfx. When the method has finished executing all the actions, it proceeds to check if the shinseis have died and if they have all died to end the game locally. End of the game The end of the game is executed if the server indicates it, either by the detection of a surrender or because the match ended on the server. It is also executed if the client ends the game with its current values, this is a security measure, however all prizes, scores, etc. will be reflected in how the game ends on the server. AlteredStateController The Altered state controller class, handles all the high level logic and flow of the altered states vfx and times. In here we check the altered states and verify the altered states on the data of the shinseis bringed from the server. Once the specific BattleAlteredState has been process, mainly for vfx because the damage is done on the server, we proceed to check if in the data of the server, the variable didAltereedStateKillShinsei is true. This variable will tell us if in this turn, this shinsei was killed by the altered state or if it was killed by the calculations of the turn actions . If is true, we proceed to execute the death animation and vfx. After that we update the healthbars with the healthAfterAlteredState variable that came from the server. After that we continue the turn flow, with the calculation of the Battle Actions ."
  },
  "manual/3b.battleServerMain.html": {
    "href": "manual/3b.battleServerMain.html",
    "title": "⚔️Battle Server⚔️ | Example Unity documentation",
    "keywords": "⚔️Battle Server⚔️ Sacred Tails uses Microsoft Azure and PlayFab systems to function, PlayFab to save account data, battle data, and even manage the game lobby data, and Azure to allow players to make the connection of this data with the client and garantee a safe enviroment for it. The battle server part of azure will handle all the battle logic that will be needed to execute a correct match between two players. Lets see how the flows of a match is developed in the server. Init Match Flow 🆕 Create Match and Delete Match 🗑️ These functions create what is known as Share Group in Azure, the fights in sacred tails are Sharegroups where the two contenders are added. It has a matchId that identifies it and saves the playerData, the turns and the results of the match. 🆕 Create Match creates a new match from scratch and the 🗑️ Delete match function deletes that match, but the deletes only happens by a manual request from the admin. The matches doesn't self-delete themself . The create match 📨 payload look something like this: { \"CustomTags\": null, \"Entity\": null, \"FunctionName\": \"BattleServer_CreateMatch\", \"FunctionParameter\": { \"Keys\": { \"MatchId\": \"2C332300EEA8B647_B2DF0D8F88E6053E_3655\" } }, \"GeneratePlayStreamEvent\": null, \"AuthenticationContext\": null } And its 📩 response something like this: { \"success\": true, \"code\": 19, \"message\": \"Match created successfully\", \"data\": null } Here are the list of possible responses for the create match: Code Success Message Data 19 true \"Match created successfully\" noErrorOnCreation:bool 20 false 'Could not add user as memeber of match' null 21 false 'Please send valid data' null 22 false \"Could not write matchid to user data\" null This is an example of a Share Group of a fight in Playfab. ❔ Match Confirm State ❔ This function is responsible for verifying if both users already confirm the combat. First, it verifies if the match already has a combat zone base on the position of users if not, use the nearest combat position then return it. Then, it checks if both players call this function and if it is true tell both players to start selecting the match. This is an example of petition 📨 payload to the server: { \"CallerEntityProfile\": { \"Lineage\": { \"MasterPlayerAccountId\": \"This will be filled by unity\" } }, \"FunctionArgument\": { \"Keys\": { \"MatchId\": \"Match ID\", \"SpawnPoint\": \"xyz\" } } } This is an example of the 📩response of the server: { success: true, code: 25, message: \"Match confirmed by both players\", data: { matchSpawnPoint: matchSpawnPoint } } Here are the list of possible responses for the match confirm state: Code Success Message Data 25 true \"Match Confirmed by both players\" {matchSpawnPoint:int} 23 false \"Match hasnt been confirmed\" null 22 false \"Error on confirmMatch\" null > 🫵🏻 Select Shinsei 🫵🏻 Once the match is confirmed, the player is asked to select his shinseis. The three shinseis are selected and then the client sent the petition to the server. Here its an example of that petition 📨 payload : { \"CustomTags\": null, \"Entity\": null, \"FunctionName\": \"BattleServer_SelectShinseis\", \"FunctionParameter\": { \"Keys\": { \"MatchId\": \"2C332300EEA8B647_B2DF0D8F88E6053E_7396\", \"ShinseiIdList\": [ 0, 1, 2 ], \"PlayerMatchData\":\"{\\r\\n \\\"DisplayName\\\": \\\"jiufen312\\\",\\r\\n \\\"shinseisSelected\\\": true,\\r\\n \\\"hasSurrender\\\": false,\\r\\n \\\"confirmState\\\": true,\\r\\n \\\"strikes\\\": 0,\\r\\n \\\"forbidenActions\\\": {},\\r\\n \\\"playFabId\\\": \\\"54BB079356042E83\\\",\\r\\n \\\"currentShinsei\\\": 0\\r\\n}\" } }, \"GeneratePlayStreamEvent\": null, \"AuthenticationContext\": null } The server recieves this information and continues to process it. If the player disconnects by his own decision then he sends a final payload with all the shinseis indices in -1.If that is the case we update the data of the disconnected player and then end the match, here is an example of the pseudocode: if (shinseisId.includes(-1)) { //Get members of the match let getMembersRequest = { SharedGroupId: matchId, GetMembers: true } PlayFabServer.GetSharedGroupData(getMembersRequest, (error, resultMembers) => { if (error !== null) // Return error to client... else { // Set player data to disconnect keyword // When the other player ask for the data, he sees this word and end the game in his client newTurnData[\"PlayerMatchData_\" + playFabId] = \"Disconnect\"; let updateRequest = { SharedGroupId: matchId, data: newTurnData } PlayFabServer.UpdateSharedGroupData( updateRequest, (error, result) => { if (error !== null) // Return error to client... else // Endgame and return data to client }); } }); } Otherwise, we get the selected indexes of the shinseis for the player, get the shinseis data from the userData in playfab and write them, among the data sent by the client, in the respective player data field of the match sharedGroup. let getShinseiKeys = []; shinseisId.forEach( shinseiId => { // We modify the name in order to match the name in the player title data. // I.E: if (shinsei index == 1) return \"ShinseiSlot1\" getShinseiKeys = // List of modified names }); let getShinseiData = { PlayFabId: playFabId, Keys: getShinseiKeys }; PlayFabServer.GetUserData( getShinseiData, (error, result) => { if (error !== null) { // Return error to client... } else { // With the data of the shinseis build the player data that is // Going to exist in the shared group. let updateRequest = { SharedGroupId: matchId, data: newTurnData } PlayFabServer.UpdateSharedGroupData( updateRequest, (error, result) => { if (error !== null) // Return error to client... else // Return succes to the client, with the player's data } ); } }); Finally here is an example of the server 📩 response : { \"success\": true, \"code\": 26, \"message\": \"Shinsei Selection success\", \"data\": null } Here are the list of possible responses for the Select shinseis function: Code Success Message Data 25 true \"You have disconnected from match\" null 26 true \"Shinsei Selection success\" null 27 false 'Please send valid data' null 28 false 'Shinseis selected not valid' null 29 false \"Error verifying shinseis with server data\" null 30 false 'Error selecting shisneis' null 31 false 'Error disconnecting' null 🫵🏻✅ Confirm Shinsei selection 🫵🏻✅ The client, after selecting it's shisneis, continues by asking each X seconds if the other player already selected/disconnected . This petition is made by the CheckShinseisChoosed petiton and its 📨 payload is a basic one that takes only the matchId, it looks something like this: { \"CallerEntityProfile\": { \"Lineage\": { \"MasterPlayerAccountId\": \"2C332300EEA8B647\" } }, \"FunctionArgument\": { \"Keys\": { \"MatchId\": \"MatchId\" } } } On the server, we process the data we have in the sharedgroup to verify if both players has already choosed or disconnected. If someone disconnected we return to the players the respective code for them to process it, otherwise if both players choosed. await PlayfabHelpers.GetMatchMembers(matchId).then(async (membersData) => { // Get Data of players in the shared group. PlayFabServer.GetSharedGroupData( getPlayerDataRequest, (error, result) => { if (error !== null) // Return error to client... else { let playersData = [] // Parse the data of the players in the sharedgroup and set them in the variable playersdata ... let ifBothPlayersConfirmed = playersData.length == 2; if (ifBothPlayersConfirmed) { if (playersData.includes(\"Disconnect\")) { // Return to client match ended by disconnection else // Return to client send match started } else // Return to client that the other player hasn't selected yet } }); }); Then we return the data of both players, in order for the clients to fill their data. The data looks like this: { \"success\": true, \"code\": 31, \"message\": \"Shinseis sucessfully selected by both players\", \"data\": [ { \"DisplayName\": \"\", \"shinseisSelected\": true, \"hasSurrender\": false, \"confirmState\": false, \"strikes\": 0, \"forbidenActions\": {}, \"ShinseiParty\": [ { \"shinseiName\": \"\", \"ShinseiDna\": \"10080040011003001000100700000210010000031005002004003\", \"generation\": \"\", \"ShinseiActionsIndex\": [ 61, 56, 39, 45 ], \"shinseiType\": 3, \"reflectDamage\": 0, \"shinseiRarity\": 1, \"ShinseiOriginalStats\": { \"Attack\": 24, \"Defence\": 75, \"Speed\": 24, \"Stamina\": 227.85, \"Vigor\": 50, \"Health\": 428, \"Energy\": 241 }, \"shinseiIcon\": { \"instanceID\": -295248 }, \"shinseiHealth\": 428, \"shinseiEnergy\": 19, \"evadeChance\": 0, \"ShinseiNormalizedStats\": { \"Attack\": 24, \"Defence\": 75, \"Speed\": 24, \"Stamina\": 227.85, \"Vigor\": 50, \"Health\": 428, \"Energy\": 241 } }, { \"shinseiName\": \"\", \"ShinseiDna\": \"10070030011001000000101200900210100000031009002004001\", \"generation\": \"\", \"ShinseiActionsIndex\": [ 12, 19, 20, 8 ], \"shinseiType\": 1, \"reflectDamage\": 0, \"shinseiRarity\": 2, \"ShinseiOriginalStats\": { \"Attack\": 155, \"Defence\": 99, \"Speed\": 30, \"Stamina\": 39, \"Vigor\": 63, \"Health\": 480, \"Energy\": 79 }, \"shinseiIcon\": { \"instanceID\": -295194 }, \"shinseiHealth\": 480, \"shinseiEnergy\": 79, \"evadeChance\": 0, \"ShinseiNormalizedStats\": { \"Attack\": 155, \"Defence\": 99, \"Speed\": 30, \"Stamina\": 39, \"Vigor\": 63, \"Health\": 480, \"Energy\": 79 } }, { \"shinseiName\": \"\", \"ShinseiDna\": \"10090030011005004000101200600210100030031009000004009\", \"generation\": \"\", \"ShinseiActionsIndex\": [ 36, 8, 14, 6 ], \"shinseiType\": 9, \"reflectDamage\": 0, \"shinseiRarity\": 3, \"ShinseiOriginalStats\": { \"Attack\": 62, \"Defence\": 87, \"Speed\": 116, \"Stamina\": 117, \"Vigor\": 51, \"Health\": 432, \"Energy\": 196 }, \"shinseiIcon\": { \"instanceID\": -295208 }, \"shinseiHealth\": 432, \"shinseiEnergy\": 196, \"evadeChance\": 0, \"ShinseiNormalizedStats\": { \"Attack\": 62, \"Defence\": 87, \"Speed\": 116, \"Stamina\": 117, \"Vigor\": 51, \"Health\": 432, \"Energy\": 196 } } ], \"playFabId\": \"2C332300EEA8B647\", \"currentShinsei\": 0, \"tempCalculateShinseiIndex\": 0 }, { \"DisplayName\": \"jiufen\", \"shinseisSelected\": true, \"hasSurrender\": false, \"confirmState\": true, \"ShinseiParty\": [ { \"shinseiName\": \"\", \"ShinseiDna\": \"10060030011006003000100200400210100020031000002004006\", \"generation\": \"\", \"ShinseiActionsIndex\": [ 57, 53, 25, 14 ], \"shinseiType\": 6, \"shinseiRarity\": 3, \"ShinseiOriginalStats\": { \"Health\": 452, \"Attack\": 170, \"Deffense\": 66, \"Speed\": 51, \"Stamina\": 110, \"Vigor\": 56, \"Energy\": 185 }, \"shinseiIcon\": { \"instanceID\": 0 }, \"shinseiHealth\": null, \"shinseiEnergy\": 0, \"evadeChance\": 0, \"ShinseiNormalizedStats\": { \"Health\": 452, \"Attack\": 170, \"Deffense\": 66, \"Speed\": 51, \"Stamina\": 110, \"Vigor\": 56, \"Energy\": 185 } }, { \"shinseiName\": \"\", \"ShinseiDna\": \"10010000011003003000100900400210070030031004002004003\", \"generation\": \"\", \"ShinseiActionsIndex\": [ 13, 4, 9, 46 ], \"shinseiType\": 3, \"shinseiRarity\": 2, \"ShinseiOriginalStats\": { \"Health\": 408, \"Attack\": 69, \"Deffense\": 24, \"Speed\": 57, \"Stamina\": 177, \"Vigor\": 45, \"Energy\": 286 }, \"shinseiIcon\": { \"instanceID\": 0 }, \"shinseiHealth\": 408, \"shinseiEnergy\": 286, \"evadeChance\": 0, \"ShinseiNormalizedStats\": { \"Health\": 408, \"Attack\": 69, \"Deffense\": 24, \"Speed\": 57, \"Stamina\": 177, \"Vigor\": 45, \"Energy\": 286 } }, { \"shinseiName\": \"\", \"ShinseiDna\": \"10050000011012006000100000000210080010031001000004012\", \"generation\": \"\", \"ShinseiActionsIndex\": [ 47, 16, 28, 31 ], \"shinseiType\": 12, \"shinseiRarity\": 1, \"ShinseiOriginalStats\": { \"Health\": 488, \"Attack\": 105, \"Deffense\": 105, \"Speed\": 68, \"Stamina\": 93, \"Vigor\": 65, \"Energy\": 160 }, \"shinseiIcon\": { \"instanceID\": 0 }, \"shinseiHealth\": 488, \"shinseiEnergy\": 160, \"evadeChance\": 0, \"ShinseiNormalizedStats\": { \"Health\": 488, \"Attack\": 105, \"Deffense\": 105, \"Speed\": 68, \"Stamina\": 93, \"Vigor\": 65, \"Energy\": 160 } } ], \"playFabId\": \"5352E306ACAB3F9B\", \"currentShinsei\": 0, } ] } Here are the list of possible responses for the Check Shinseis choosed function: Code Success Message Data 30 true \"Player disconnected\" null 31 true \"Shinseis sucessfully selected by both players\" playersData 32 false 'Please send valid data' null 33 false \"Error on get match members\" null 34 false \"Shinseis hasn't been selected\" null 47 false \"Error on get match members\" null Once this is done, the match starts. ⚔️♾️Combat Flow️♾️⚔️ Once both players selected their shinseis, the combat starts. The main loop of the combat begins which consists of each player sending their turn, using SendTurn. Then the client starts asking the server if the other player already sent its turn and it calculates all the logic on the server, and when the answer arrive to the client, he shows all the vfx and animation and then the loop cycles again until and end condition happens. Lets see all of these parts in more detail: Send Turn The client sent either the index of the card in the database or an special action. The current special actions are the following ones: Index 0 corresponds to skip turn Index 2 to surrender. Index 1004,1005,1006 are a change of shinsei 1,2,3 respectively. This is an example of a petition 📨 payload : { \"CustomTags\": null, \"Entity\": null, \"FunctionName\": \"BattleServer_SendTurn\", \"FunctionParameter\": { \"Keys\": { \"MatchId\": \"2C332300EEA8B647_B2DF0D8F88E6053E_7396\", \"indexCard\": 2, \"clientShinsei\": 1 } }, \"GeneratePlayStreamEvent\": null, \"AuthenticationContext\": null } When this petiton arrives to the server, it makes necessary checks for the combat such as checking if there is already a winner of a match or if the other player is writing their turn at that moment to avoid writing at the same time (Shared group have problems with writing data at the same time). But after the main checks are passed, it checks if is an special card or if the index that the player sent actually exist in the client shinsei available cards . Lets see the pseudocode of that: if (!isSpecialCard) { sendTurnHelper.AnalyzeSpecialIndexAndSendTurnDev(...); return } await PlayfabHelpers.GetPlayerMatchData(matchId, playFabId).then(async (playerData) => { if (!playerHasCardInItsShinseiData) { // Return error, not valid card index to client... return; } //Get the card data from the index turnToSend = { ...cardDatabase[indexOfcard] }; // If is a random card index, like empower. Select a random card from database. turnToSend.BattleActions.forEach(card => { if (card.actionType == randomType) { // Select random card // ... // Set previous index in a variable for later use turnToSend.isComingFromCopyIndex = previousIndex; } }); // Write turn on playfab and return client success response sendTurnHelper.SendTurnWithCard(...); }); And this is an example of the server 📩 response : { \"Error\": null, \"ExecutionTimeMilliseconds\": 739, \"FunctionName\": \"BattleServer_SendTurn\", \"FunctionResult\": { \"success\": true, \"code\": 35, \"message\": \"Send turn correct\", \"data\": { \"cardType\": 10, \"isComingFromCopyIndex\": -1, \"PpCost\": 120, \"name\": \"BlackRay\", \"hideFlags\": 0, \"BattleActions\": [ { \"actionType\": 2, \"turnsDuration\": 1, \"amount\": 344, \"isSelfInflicted\": false, \"cardSkipTurn\": true, \"bonusPercent\": 24, \"statBonusDamage\": 2, \"applyEachTurn\": false, \"isPercertange\": true, \"numberOfTimesBuffApplied\": 0, \"changeMinAndMaxStats\": false, \"stat1\": 0, \"stat2\": 0, \"activateAlteredState\": false, \"alteredStateToActivate\": 0, \"criticsPercentChange\": 0, \"actionElementType\": 10, \"criticsRoll\": \"0.67\", \"evadeRoll\": \"0.04\", \"turnsPassed\": 0, \"evadedTurns\": 0 } ], \"timeStamp\": \"2023-01-23T21:52:14.802Z\", \"indexCard\": 8 } }, \"FunctionResultTooLarge\": null, \"Request\": { \"CustomTags\": null, \"Entity\": null, \"FunctionName\": \"BattleServer_SendTurn\", \"FunctionParameter\": { \"Keys\": { \"MatchId\": \"2C332300EEA8B647_B2DF0D8F88E6053E_7396\", \"indexCard\": 2 } }, \"GeneratePlayStreamEvent\": null, \"AuthenticationContext\": null }, \"CustomData\": null } Here are the list of possible responses for the __ function: Code Success Message Data 35 true \"Send turn correct\" turnSent 36 false 'Please send valid data' null 37 false 'You could not send a turn yet, wait for the opponent to send turn.' null 38 false \"Error with index card sent\" null 39 false \"Send turn error\" null 40 false \"Your current shinsei doesnt has that card please check your local values\" playerData 51 false \"Match ended! Winner:\"+ 47 false \"Error on get current index\" errorData 493 false <Error on try catch, message dependent of error> null When the players have already sent their corresponding turns, they begin asking the server to check if the other has already sent their data and the server was able to process the turn, this is done in the Azure Function GetMatchState. GetMatchState.js And CalculateTurn.js This is an example of a petition 📨 payload the server recieves when the client checks every X seconds the state of the server in order to proccess the turns once they had been sended: { \"CallerEntityProfile\": { \"Lineage\": { \"MasterPlayerAccountId\": \"54BB079356042E83\" } }, \"FunctionArgument\": { \"Keys\": { \"MatchId\": \"ExampleMatchId\" } } } Get match state is responsible for checking if the data from both players is already uploaded and, in case it is, it calculates them using Calculate Turn class. Calculate turn is the heart of the combat, it is responsible for applying all the modifications to the data to then save them in PlayFab. It first verifies that only one of the two players is manipulating the data, then it verifies which of the two Shinsei that are currently in combat has more speed to apply their actions first. Having decided the order of execution of actions, it verifies a special case that is CopyCat, an attack that allows you to use the same attack as the opponent, then it checks if either of them decided to surrender, and finally, it verifies if the time limit for the combat has not been exceeded. If it passes all these filters, the turn is processed using the ExecuteTurn function. In execute turn, first, the altered states are calculated. These can be Burned, Rooted, Bleeding or Reflecting and their effects are applied. Finally, the effects of the card chosen by the player are applied and the energy of the Shinsei is regenerated at the end of the process. If it turns out that a Shinsei died in the process, it is changed to the next one, or simply if there are no more available, the end of the game will be proccessed. Like it follows this pseudocode: function ExecuteTurn(...) { if (/* It has a terrain alteration */) terrainController.ExecuteTerrain(...); let previousPlayerShinsei = ...; let previousOtherShinsei = ...; CalculateAlteredStates(playerThatCalledTheFunction,...); gameEnded = CalculateUserTurn(playerThatCalledTheFunction,...) if (gameEnded) return; if (/* If player attack didn't kill otherPlayer shinshei */) { CalculateAlteredStates(otherPlayer,...); gameEnded = CalculateUserTurn(otherPlayer,...) if (gameEnded) return; } RegenerateEnergy(playerThatCalledFunction); RegenerateEnergy(otherPlayer); } And at the end the 📩 response looks something like this: { \"success\": true, \"code\": 40, \"message\": \"Turn correctly proccessed, check data.\", \"data\": { \"playersTurn\": [ { \"cardType\": 0, \"isComingFromCopyIndex\": -1, \"PpCost\": 0, \"name\": \"SkipTurn\", \"hideFlags\": 0, \"BattleActions\": [ { \"actionType\": 6, \"turnsDuration\": 1, \"isSelfInflicted\": true, \"cardSkipTurn\": false, \"bonusPercent\": 0, \"applyEachTurn\": false, \"isPercertange\": true, \"numberOfTimesBuffApplied\": 0, \"changeMinAndMaxStats\": false, \"stat1\": 0, \"stat2\": 0, \"activateAlteredState\": false, \"alteredStateToActivate\": 0, \"criticsPercentChange\": 0, \"actionElementType\": 0, \"criticsRoll\": \"0.12\", \"evadeRoll\": \"0.04\", \"turnsPassed\": 0, \"evadedTurns\": 0 } ], \"timeStamp\": \"2023-03-02T20:12:47.742Z\", \"indexCard\": 0 }, { \"cardType\": 0, \"isComingFromCopyIndex\": -1, \"PpCost\": 0, \"name\": \"SkipTurn\", \"hideFlags\": 0, \"BattleActions\": [ { \"actionType\": 6, \"turnsDuration\": 1, \"isSelfInflicted\": true, \"cardSkipTurn\": false, \"bonusPercent\": 0, \"applyEachTurn\": false, \"isPercertange\": true, \"numberOfTimesBuffApplied\": 0, \"changeMinAndMaxStats\": false, \"stat1\": 0, \"stat2\": 0, \"activateAlteredState\": false, \"alteredStateToActivate\": 0, \"criticsPercentChange\": 0, \"actionElementType\": 0, \"criticsRoll\": \"0.17\", \"evadeRoll\": \"0.94\", \"turnsPassed\": 0, \"evadedTurns\": 0 } ], \"timeStamp\": \"2023-03-02T20:12:48.556Z\", \"indexCard\": 0 } ], \"isOwnerLocal\": false, \"turnTimes\": { \"lastUpdatedTurn1\": \"2023-03-06T15:26:36.635Z\", \"lastUpdatedTurn2\": \"2023-03-06T15:26:36.623Z\", \"startMatchTime\": \"1678116385000\" }, \"lastUpdated\": \"2023-03-06T15:26:36.596Z\", \"currentTerrain\": null, \"currentTurn\": \"2\", \"playersServerData\": { \"PlayerMatchData_B2DF0D8F88E6053E\": \"{\\\"DisplayName\\\":\\\"\\\",\\\"shinseisSelected\\\":true,\\\"hasSurrender\\\":false,\\\"confirmState\\\":false,\\\"strikes\\\":0,\\\"forbidenActions\\\":{},\\\"ShinseiParty\\\":[{\\\"shinseiName\\\":\\\"\\\",\\\"ShinseiDna\\\":\\\"10090020011004003000100400000210030000031006003004004\\\",\\\"generation\\\":\\\"\\\",\\\"ShinseiActionsIndex\\\":[36,19,49,32],\\\"shinseiType\\\":4,\\\"reflectDamage\\\":0,\\\"shinseiRarity\\\":2,\\\"ShinseiOriginalStats\\\":{\\\"Attack\\\":34,\\\"Defence\\\":97,\\\"Speed\\\":49,\\\"Stamina\\\":94,\\\"Vigor\\\":94,\\\"Health\\\":604,\\\"Energy\\\":161},\\\"shinseiIcon\\\":{\\\"instanceID\\\":-644706},\\\"shinseiHealth\\\":604,\\\"shinseiEnergy\\\":15,\\\"evadeChance\\\":0,\\\"didAlteredStateKillShinsei\\\":false,\\\"ShinseiNormalizedStats\\\":{\\\"Attack\\\":34,\\\"Defence\\\":97,\\\"Speed\\\":49,\\\"Stamina\\\":94,\\\"Vigor\\\":94,\\\"Health\\\":604,\\\"Energy\\\":161},\\\"healthAfterAlteredState\\\":604},{\\\"shinseiName\\\":\\\"\\\",\\\"ShinseiDna\\\":\\\"10030020011005002000100600100210100000031004003004005\\\",\\\"generation\\\":\\\"\\\",\\\"ShinseiActionsIndex\\\":[53,57,45,41],\\\"shinseiType\\\":5,\\\"reflectDamage\\\":0,\\\"shinseiRarity\\\":2,\\\"ShinseiOriginalStats\\\":{\\\"Attack\\\":94,\\\"Defence\\\":109,\\\"Speed\\\":35,\\\"Stamina\\\":114,\\\"Vigor\\\":80,\\\"Health\\\":548,\\\"Energy\\\":191},\\\"shinseiIcon\\\":{\\\"instanceID\\\":-644722},\\\"shinseiHealth\\\":548,\\\"shinseiEnergy\\\":191,\\\"evadeChance\\\":0,\\\"didAlteredStateKillShinsei\\\":false,\\\"ShinseiNormalizedStats\\\":{\\\"Attack\\\":94,\\\"Defence\\\":109,\\\"Speed\\\":35,\\\"Stamina\\\":114,\\\"Vigor\\\":80,\\\"Health\\\":548,\\\"Energy\\\":191}},{\\\"shinseiName\\\":\\\"\\\",\\\"ShinseiDna\\\":\\\"10120070011010001000101100000210060010031000003004010\\\",\\\"generation\\\":\\\"\\\",\\\"ShinseiActionsIndex\\\":[32,37,12,44],\\\"shinseiType\\\":10,\\\"reflectDamage\\\":0,\\\"shinseiRarity\\\":2,\\\"ShinseiOriginalStats\\\":{\\\"Attack\\\":46,\\\"Defence\\\":154,\\\"Speed\\\":56,\\\"Stamina\\\":53,\\\"Vigor\\\":86,\\\"Health\\\":572,\\\"Energy\\\":100},\\\"shinseiIcon\\\":{\\\"instanceID\\\":-644736},\\\"shinseiHealth\\\":572,\\\"shinseiEnergy\\\":100,\\\"evadeChance\\\":0,\\\"didAlteredStateKillShinsei\\\":false,\\\"ShinseiNormalizedStats\\\":{\\\"Attack\\\":46,\\\"Defence\\\":154,\\\"Speed\\\":56,\\\"Stamina\\\":53,\\\"Vigor\\\":86,\\\"Health\\\":572,\\\"Energy\\\":100}}],\\\"playFabId\\\":\\\"B2DF0D8F88E6053E\\\",\\\"currentShinsei\\\":0,\\\"tempCalculateShinseiIndex\\\":0,\\\"KONODIODA\\\":20269,\\\"strikeTimer\\\":\\\"Min:0Sec:20\\\"}\", \"PlayerMatchData_5352E306ACAB3F9B\": \"{\\\"DisplayName\\\":\\\"jiufen\\\",\\\"shinseisSelected\\\":true,\\\"hasSurrender\\\":false,\\\"confirmState\\\":true,\\\"ShinseiParty\\\":[{\\\"shinseiName\\\":\\\"\\\",\\\"ShinseiDna\\\":\\\"10060030011006003000100200400210100020031000002004006\\\",\\\"generation\\\":\\\"\\\",\\\"ShinseiActionsIndex\\\":[57,53,25,14],\\\"shinseiType\\\":6,\\\"shinseiRarity\\\":3,\\\"ShinseiOriginalStats\\\":{\\\"Health\\\":452,\\\"Attack\\\":170,\\\"Defence\\\":-14,\\\"Speed\\\":51,\\\"Stamina\\\":110,\\\"Vigor\\\":56,\\\"Energy\\\":185},\\\"shinseiIcon\\\":{\\\"instanceID\\\":0},\\\"shinseiHealth\\\":300,\\\"shinseiEnergy\\\":15,\\\"evadeChance\\\":0,\\\"ShinseiNormalizedStats\\\":{\\\"Health\\\":452,\\\"Attack\\\":170,\\\"Defence\\\":-14,\\\"Speed\\\":51,\\\"Stamina\\\":110,\\\"Vigor\\\":56,\\\"Energy\\\":185},\\\"didAlteredStateKillShinsei\\\":false,\\\"healthAfterAlteredState\\\":300,\\\"alteredStates\\\":{\\\"3\\\":{\\\"amount\\\":40,\\\"targetPlayer\\\":\\\"5352E306ACAB3F9B\\\",\\\"perTurns\\\":true,\\\"turnsDuration\\\":3,\\\"turnsLeft\\\":2}}},{\\\"shinseiName\\\":\\\"\\\",\\\"ShinseiDna\\\":\\\"10010000011003003000100900400210070030031004002004003\\\",\\\"generation\\\":\\\"\\\",\\\"ShinseiActionsIndex\\\":[13,4,9,46],\\\"shinseiType\\\":3,\\\"shinseiRarity\\\":2,\\\"ShinseiOriginalStats\\\":{\\\"Health\\\":408,\\\"Attack\\\":69,\\\"Defence\\\":24,\\\"Speed\\\":57,\\\"Stamina\\\":177,\\\"Vigor\\\":45,\\\"Energy\\\":286},\\\"shinseiIcon\\\":{\\\"instanceID\\\":0},\\\"shinseiHealth\\\":408,\\\"shinseiEnergy\\\":286,\\\"evadeChance\\\":0,\\\"ShinseiNormalizedStats\\\":{\\\"Health\\\":408,\\\"Attack\\\":69,\\\"Defence\\\":24,\\\"Speed\\\":57,\\\"Stamina\\\":177,\\\"Vigor\\\":45,\\\"Energy\\\":286}},{\\\"shinseiName\\\":\\\"\\\",\\\"ShinseiDna\\\":\\\"10050000011012006000100000000210080010031001000004012\\\",\\\"generation\\\":\\\"\\\",\\\"ShinseiActionsIndex\\\":[47,16,28,31],\\\"shinseiType\\\":12,\\\"shinseiRarity\\\":1,\\\"ShinseiOriginalStats\\\":{\\\"Health\\\":488,\\\"Attack\\\":105,\\\"Defence\\\":105,\\\"Speed\\\":68,\\\"Stamina\\\":93,\\\"Vigor\\\":65,\\\"Energy\\\":160},\\\"shinseiIcon\\\":{\\\"instanceID\\\":0},\\\"shinseiHealth\\\":488,\\\"shinseiEnergy\\\":160,\\\"evadeChance\\\":0,\\\"ShinseiNormalizedStats\\\":{\\\"Health\\\":488,\\\"Attack\\\":105,\\\"Defence\\\":105,\\\"Speed\\\":68,\\\"Stamina\\\":93,\\\"Vigor\\\":65,\\\"Energy\\\":160}}],\\\"playFabId\\\":\\\"5352E306ACAB3F9B\\\",\\\"currentShinsei\\\":0,\\\"tempCalculateShinseiIndex\\\":0,\\\"KONODIODA\\\":19455,\\\"strikeTimer\\\":\\\"Min:0Sec:19\\\"}\" } } } Here are the list of possible responses for the GetMatchData function: Code Success Message Data 42 true \"Turn correctly proccessed, check data.\" turnsData 43 true \"Player \" + playfabIdLoser + \" has surrendered.\" null 44 true \"End match successfully\" turnsData 51 true \"Match has already ended, normal match, player that didn't proccess it.\" lastTurnData 83 true \"Match has already ended, when it doen't have last turn data.\" lastTurnData 99 true \"Match has already ended, by time limit.\" lastTurnData 45 false 'Please send valid data' null 46 false \"There are no turns sent to the match.\" null 47 false \"Couldnt get attempts.\" null 56 false \"Error on get current index\" errorData 57 false \"Error on get match members\" errorData 48 false \"Couldnt post attempts\" null 56 false \"Turns doesn't match yet, keep asking.\" null 50 false \"Get match state error\" null 49 false \"Other player is processing please try again\" null 52 false \"Action proccess error\" null 53 false \"Turn proccess error\" null 448 false \"Error updating player victories\" turnsData 441 & 442 false \"Error updating player elo\" turnsData 443 false \"Error updating virtual currency\" turnsData 445 & 446 false \"Error getting shared group data\" turnsData 448 false \"Winner has no current bracket data in the tournament\" turnsData 447 false \"Error getting shared group data\" turnsData 596 & 570 false \"Error getting player ELO and RANK\" turnsData 830 false \"Error updating player data on match at the end of the game\" null 9991 false \"ERROR: Error defining data from server, please verify the server\" null 9992 false \"ERROR: Error defining data from server, please verify the server\" null Battle Actions Each action within the game is represented by a class that is responsible for knowing how to process itself. In the current game, the following actions exist: Block BuffDebuff ChangeShinsei CopyCat Damage Heal ReflectDamage SkipTurn StatSwap EndGame Block Block allows the Shinsei to evade the damage from the next attack of its opponent. Some cards bring this action as a secondary effect. function BlockActionType(actionData, userData, otherData) { //Check who gets the movement block let targetPlayerData = actionData.isSelfInflicted ? userData : otherData; if (/* There is not already a block action of this type */) { //Write the ban movements into the players data targetPlayerData.forbidenActions[actionData.amount] = actionData.turnsDuration; } } Buff and Debuff Buffs increase the statistics of a Shinsei, whether its attack, defense, vigor, stamina or damage, debuffs are the opposite by decreasing the stats. function ExecuteBuffDebuff(buffDebuffData, userData, otherData) { if (/* The buff is not already applied */) { let targetPlayerData = buffDebuffData.isSelfInflicted ? userData : otherData; if (!attackEvaded) { buffDebuffData.evadedTurns++; return; } // Set buff amount to negative if is a debuff let buffAmount = amount * (isBuff? 1 : -1); if (/* If buff is applied by percentage */) { let percentage = ...; targetPlayerData.ShinseiParty[targetPlayerData.currentShinsei].ShinseiOriginalStats[stat] = statValue * percentage; buffDebuffData.numberOfTimesBuffApplied++; } else if(/* If buff is applied directly */) { //Is within normal values if (finalAmount < 300 && finalAmount > 0) { shinseiStats[stat] += amount; } } // There are 2 stats, original and normalized // Original has the full value I.E: 453 // Normalized is the value from 0-300, I.E: 300 SetNormalizedStats(...); } } Change Shinsei This defines the action of changing the current Shinsei. Here is the pseudocode: function ExecuteChangeShinsei(...) { let targetPlayerData = changeShinseiData.isSelfInflicted ? userData : otherData; targetPlayerData.currentShinsei = changeShinseiData.amount; actionsOrdered[targetIndex] = []; } Copy Cat Copy Cat is a special case where the opponent's ability is used. function ExecuteCopyCat(turnsOrdered, actionsOrdered, userIndex, otherIndex) { //Write the action from the other player into the battleActions of the target player. turnsOrdered[userIndex] = { ...turnsOrdered[otherIndex]}; //Preserve the previous index for the client to execute vfx turnsOrdered[userIndex].isComingFromCopyIndex = previousIndex; } Damage This is the simplest type of action because it only processes the damage with the current Shinsei's stats and applies it. function ExecuteDamage(damageData, userData, otherData) { // Select target let targetPlayerData = damageData.isSelfInflicted ? userData : otherData; if (/* If target shinsei has a reflect flag */) // Invert the target if (/* Should apply critic */) criticMultiplier = 1.5; //Attack if (!attackEvaded) { let bonusDamage = battleStatisticsCalculator.GetBonusStat(shinseiType, cardType,...); let rawDamage = battleStatisticsCalculator.GetRawDamage(shinseiAttack,shinseiType, ...); let finalDamage = battleStatisticsCalculator.GetDamageReceiveByTarget(defence,...); let finalDamageInt = Math.floor(finalDamage); //Set damage to shinsei health targetShinsei.shinseiHealth = finalDamageInt; } } Heal Heal is the a similar process as damage but increasing the health instead. function ExecuteHeal(healData, userData, otherData) { //Select target let targetPlayerData = healData.isSelfInflicted ? userData : otherData; let bonusHeal = battleStatisticsCalculator.GetBonusStat(...); let finalHeal = Math.floor((currentHealth + healData.amount + bonusHeal)); targetShinsei.shinseiHealth = Math.min(maxHealth, finalHeal); } Reflect Damage Reflect Damage is a special status in which the damage that would be received is applied to the opponent. function ReflectDamage(reflectDamageData, userData, otherData) { //Select target let targetPlayerData = reflectDamageData.isSelfInflicted ? userData : otherData; //Apply target targetShinsei.reflectDamageLeft += 1; } Skip Turn This function is mainly used in the case of setting a strike because the turn was sent after the allowed time. It's also use for cards like root that makes the oponnent skips a turn. Lets see the pseudocode: function ExecuteSkip(actionData, playerData, otherData, actionOrdered, turnsData, userIndexes) { if (!actionData.isSelfInflicted) { // If is a card someone else set on me, then we proceed set its skipTurnVariable in the shinsei // to the turns duration of the card. otherPlayerShinsei.skipTurnsLeft = actionData.turnsDuration; actionOrdered.push(skipTurnAction); } else { if (minutesFromSendTurnToNow >= 1) playerData.strikes++; // If the player has reached 3 strikes already we kill all his shinseis in order to end the match. if (playerData.strikes >= 3) playerData.ShinseiParty.forEach(element => element.shinseiHealth = 0); } } StatSwap Swaps the value of two stats temporarily. This could be done by selecting the 2 stats to change, or by changen the max stat with the min stat. I.E: Exchange the high defence value with the low attack value. Lets look at the pseudocode: function ExecuteStatSwap(...) { //Select target let targetPlayerData = statSwapData.isSelfInflicted ? userData : otherData; if (/* If there it hasn't been applied yet*/) { if (attackEvaded) { statSwapData.evadedTurns++; return; } if (statSwapData.changeMinAndMaxStats) { // Search the max and min stat shinseiTarget.ShinseiOriginalStats.forEach(stat => { if (value > maxValue) statMax = stat; else if (value < minValue) statMin = stat; }); //Exchange the 2 stats shinseiTarget.ShinseiOriginalStats[statMax] = minValue; shinseiTarget.ShinseiOriginalStats[statMin] = maxValue; //Set the stats on the action data in order to exchange it later statSwapData.stat1 = statMax; statSwapData.stat2 = statMin; } else { //Exchange the 2 stats let value1Temp = shinseiTarget.ShinseiOriginalStats[stat1]; shinseiTarget.ShinseiOriginalStats[stat1] = shinseiTarget.ShinseiOriginalStats[stat2]; shinseiTarget.ShinseiOriginalStats[stat2] = value1Temp; } SetNormalizedStats(targetPlayerData); } } EndGameAction This action is special because it is called when the game has ended on the turn calculation, independent of where in the code is it. It is responsible for granting the virtual currency prizes, updating data in the tournament status and writing in the respective places who was the winner. Note that this only happens on calculation, it doesn't happend if the player it's not the one calculating, later we will see this case. Before that, it can be of value reuse the turnsData payload, in order to make the paylod not as extensive, so this is the response of a turns data: TurnsData \"turnsData\": [ { \"cardType\": 0, \"isComingFromCopyIndex\": -1, \"PpCost\": 0, \"name\": \"BlackRay\", \"hideFlags\": 0, \"BattleActions\": [ { \"actionType\": 2, \"turnsDuration\": 1, \"isSelfInflicted\": true, \"cardSkipTurn\": true, \"bonusPercent\": 0, \"applyEachTurn\": false, \"isPercertange\": true, \"numberOfTimesBuffApplied\": 0, \"changeMinAndMaxStats\": false, \"stat1\": 0, \"stat2\": 0, \"activateAlteredState\": false, \"alteredStateToActivate\": 0, \"criticsPercentChange\": 0, \"actionElementType\": 0, \"criticsRoll\": \"0.42\", \"evadeRoll\": \"0.69\", \"turnsPassed\": 0, \"evadedTurns\": 0 } ], \"timeStamp\": \"2023-01-06T13:30:26.836Z\", \"indexCard\": 2 }, { \"cardType\": 0, \"isComingFromCopyIndex\": -1, \"PpCost\": 0, \"name\": \"Eclipse\", \"hideFlags\": 0, \"BattleActions\": [ { \"actionType\": 0, \"turnsDuration\": 1, \"isSelfInflicted\": true, \"cardSkipTurn\": true, \"bonusPercent\": 0, \"applyEachTurn\": false, \"isPercertange\": true, \"numberOfTimesBuffApplied\": 0, \"changeMinAndMaxStats\": false, \"stat1\": 0, \"stat2\": 0, \"activateAlteredState\": false, \"alteredStateToActivate\": 0, \"criticsPercentChange\": 0, \"actionElementType\": 0, \"criticsRoll\": \"0.10\", \"evadeRoll\": \"0.51\", \"turnsPassed\": 0, \"evadedTurns\": 0 } ], \"timeStamp\": \"2023-01-06T13:30:24.066Z\", \"indexCard\": 2 } ] There can be multiple 📩responses from the EndgameAction. This is the ✅successful ones, it could be due to the ending of the timei of the match, due to the flow, or due to the surrender of the players, lets take a look at the response: Successful endgame, match ending by time or by natural flow or surrenders { \"status\": 200, \"body\": { \"success\": true, \"code\": 44, \"message\": \"End match successfully\", \"data\": { \"playersTurn\": { \"turnsData\": turnsData, \"lastUpdated\": \"2023-01-06T13:29:27.056Z\", \"currentTerrain\": null, \"currentTurn\": \"14\", \"winnerId\": \"5AB7BC46EA4AB58E\", \"loserId\": \"B2DF0D8F88E6053E\", \"playerWritedLastTurn\": false } } } } The list of possible responses are found in the GetMatchdata section All of these errors will be handle by the client by making the petition again. He tries this 2 times and the if it isn't working he continues with the local state he had, in order to not lock the flow of the game. EndGame for player who isn't calculating As we said in the previous version, if the player isn't calculating then we doesn't recieve the responses from the previous section. In this case the server looks for the winnerId variable written by the previous player that did calculate the match. Let's take a look at the pseudo code of that part: var data = dataFromPlayfab; if (hasWinner) { if (!hasLastTurnData) { lastTurnData.winnerId = data[\"matchWinner\"]; lastTurnData.loserId = data[\"matchLoser\"]; // If the match ended but it doesn't have last turn data, // we try to generate that data again.Until the client send us // that it has been too many tries with the // calculateEndMatchAgain variable if (calculateEndMatchAgain != null && calculateEndMatchAgain){ endGameAction.UpdateAllEndMatch(); } // If the client has too many tries then we procceed to tell him that the winner and losers // and proceed to end the match else { ResponseToClient(\"Match has already ended, when it doen't have last turn data.\"); // End flow of function context.done(); } return; } lastTurnData = getLastTurnDataFromDataInSharedGroup(); lastTurnData.winnerId = data[\"matchWinner\"]; lastTurnData.loserId = data[\"matchLoser\"]; //If the server has a turn and nobody is calculating the turns, we proceed to write if the // player that wrote that turn was this player. This is done to tell the player if the data //wroten on the shared group as the last turns follows the order of [playerData, enemyData] or //if he has to reverse it in the client. if (data[\"IsCalculatingTurn\"] != null && !IsATurn(data[\"IsCalculatingTurn\"].Value)) lastTurnData.playerWritedLastTurn = data[\"IsCalculatingTurn\"].Value == playFabId; let firstTimeStamp = getTimeStampOfInitMatchFromData() // We check if the match has reached his limit. if (matchTimeLimitHelper.CheckMatchTimeLimit(firstTimeStamp)) { // If it has then we say to the client ResponseToClient(\"Match has already ended, when it doen't have last turn data.\"); //End flow context.done(); } else { if (calculateEndMatchAgain != null && calculateEndMatchAgain) endGameAction.UpdateAllEndMatch(); else { ResponseToClient(\"Match has already ended, normal match, player that didn't proccess it.\"); // End flow of function context.done(); } } } else if (player turn does not match with match turn) { var attempts = ...; // 35 attemps is 1:45 minutes. Each attemp is made every 3 seconds. // So if the player hasn't sent anything in a timespan of 1:45 seg (max time to play is 1:30), // then we proceed to end the game with him as a lose if (attempts >= 35) { if (turnIndexes[0] > turnIndexes[1]) endGameAction.EndGame(context, matchId, enemyPlayfabId, playFabId); else endGameAction.EndGame(context, matchId, playFabId, enemyPlayfabId); } else { attempts++; //We update the current attempts PlayFabServer.UpdateSharedGroupData(getAttemps, ()=>{ //We tell him that the turns doesn't match yet. Keep asking. ResponseToClient(\"Turns doesn't match yet, keep asking.\"); //End flow context.done(); }); } } // If none of the above happens we proceed to calculate the turn. else { calculateTurn.CalculateTurn(context, data, keys, [playFabId, enemyPlayfabId], matchId, turnIndexes[0]); }"
  },
  "manual/4.shinseiGenerator.html": {
    "href": "manual/4.shinseiGenerator.html",
    "title": "Shinsei Generator | Example Unity documentation",
    "keywords": "Shinsei Generator The objective of this document is to provide a clear and detailed guide of the Shinsei generation process and the main components of the tool so that any programmer can develop the content generation activity for Sacred Tails NFTs. SetUp: Unity version: 2020.3.23.f1 Repository branch: Feat_NFTVideoGen Scene: Character Generator Structure and components of the scene The scene is divided into 3 main components: Environment, Lighting, and Core. Environment: Contains the props and assets that make up the scene in which the Shinsei generator videos are captured and processed, and it is organized as follows: The main elements of the stage are separated by category, vegetation, props (buildings and accessories), particle systems, and the sprites that make up the horizon. The Shinsei Gate is outside of the containers because it contains the flag that indicates the type of Shinsei. This flag is the only object in the environment that has a reference within the \"ShinseiGenerator.cs\" script, which will be detailed later. Lighting: The lighting within the scene is handled by different sources to keep in mind in case changes are required. The distribution of lights within the scene is as follows: The main thing to keep in mind is the directional light controller, which contains the directional light source of the scene, and the light manager, which contains the components necessary to control the time of day and the sky tones. The other light sources are located according to the elements of the scene that they affect, in Shinsei only lights and Flag Only lights are light sources that only affect the shinsei and the flag respectively. while the support light is only an auxiliary light that affects all elements within the scene. Core: Contains the elements responsible for the generation and recording of shinseis. And these are its main elements: Shinsei Generation Manager is the object that contains the ShinseiGenerator.cs class and is where all the actions of generating shinseis, recording videos and storing JSONs are performed. There are 2 cameras, one responsible for recording the content (Video Capture) and another that only serves the purpose of showing us the content of the scene in the game view. The ShinseiWardrobe is responsible for changing the parts of the Skinned_Shinsei_Atlas according to the DNA and is referenced within the ShinseiGenerator.cs, while the color swapper is responsible for assigning the correct color palette to the shinsei in question. Inicialization: To start, the types of Shinseis that are going to be generated in the pool of types within the CharacterGenerator.cs in the Shinsei generation manager must be established. In this example, the corresponding families for the second generation of Shinseis are set, so that the Shinseis that will be generated do not have parts of foreign families. Subsequently, the scriptable objects that will contain the generated Shinseis must be created. The name of the scriptable object is \"Generated Shinsei Container\" which is a database of Shinseis. It is recommended to use this structure for ease of management. Create a shinsei container per rarity-type of shinsei included in the sale, more or less in the following way: Shinsei Generation: To begin generating the shinseis that will be released, you must first drag one of the Generated Shinsei Containers to the InputSO and OutputSO fields in the Shinsei Generator manager, then set the number of shinseis that will be generated (Shinseis to generate) and the index with which the new shinsei count should start (Last Index), this index should be the value of the last shinsei generated in the previous sale or in the last batch of generated shinseis (for example, if the last shinsei in the previous sale has an index of 2999, the Last Index should be assigned as 3000). Once this is established, you must proceed to enter play mode, and there choose the type and rarity of the Shinseis that will be generated to fill that Generated Shinsei Container. Once the type and rarity are chosen, within playmode you must activate the \"Invoke\" button within the component. If the Shinsei type (Desired Type) is not contained within the type pool, then the function will not be executed and a warning log will be displayed. To generate Shinseis of celestial type, only tiers from legendary1 to legendary2 can be chosen. Repeat this process for all SOs created for the sale. Note: As the scriptable objects (Generated shinsei container) are filled in runtime, they are never saved in git changes. It is suggested that after generating a batch, add and remove an element from the scriptable and then save the project to ensure they are included in the changes. Generation of content for Minting Generation of videos To generate videos, first a path must be assigned in the VideoCaptureManager and VideoCapture components within the object in the scene called VideoCapture. (Here you can also modify the desired resolution and frame rate.) Once the path is set, you must select the Generated Shinsei Container from which the videos will be generated and drag it to the InputSO and OutputSO fields of the ShinseiGenerator in the shinsei generation manager. Then, enter play mode and press the record button within the component. The editor will take approximately 30 seconds per shinsei, and will generate the videos in the specified folder. Once finished with a batch, another shinsei container should be assigned and the button pressed again to continue the task until all videos are generated. Upload to IPFS: Once all videos are generated, they must be uploaded to the timba drive, specifically in the following path: Instinct>SacredTails>Mint>Videos>Folder with the sale number, all while having a backup of the information. Then, from a single PC, all videos must be downloaded and then uploaded to an IPFS folder (IPFS desktop is recommended). Once there, you must copy the CID of the folder and give it to the client, so that they can import the files to pinata. During this process, the computer that uploaded the files must be kept on and have a stable internet connection. (It is of vital importance to verify that the videos do not require corrections and are correct before the next step). If all files are found and it is certain that no video needs to be corrected, the next step is to copy that CID of the folder and paste it within the ShinseiGenerator.cs script as the value of the string ipfsCID in the following line. Make sure to save changes in the script. Generation of Metadata: To generate the metadata JSONs, all the Shinsei containers that were used for video generation must be dragged to the following list in the ShinseiGenerator.cs. Subsequently, enter playmode and press the Save Json Files button of the component in question. The editor will appear to freeze for a brief moment, and when it finishes generating the Jsons, the files will be found in the following path of the project: SacredTails(root)>GeneratedShinseis>JSON> Hoardable/OpenSea. It is recommended to compress these folders and send them to the client when the process is finished, they should be responsible for using them for the minting process."
  }
}